function levels_data(levels) {
  // <<<<<<<<<<
  // << LEVEL 0
  // <<<<<<<<<<

  // tworzmy nowy poziom w nawiazie podajemy jego numer porzadkowy
  var level_0 = levels.define_level(0);
  // nazwa pojawiajaca sie na mapie
  level_0.set_name('level_0_name');
  // umiejscowienie przycisku z flaga poziomu
  level_0.set_map_position(135, 20);
  level_0.set_desc('level_0_desc');

  // opisujemy szczegoly mapy poziomu
  level_0.set_level_data(
      function level_data(level) {
        // powtarzamy numer porzadkowy - koniecznie
        level.set_id(0);

        // ustawiamy tlo poziomu
        level.set_background_image ('assets/img/levels/gdynska_plaza.png');
        // (opcjonalnie) ustawiamy pierwszy plan poziomu - jest rysowany na tle i na postaciach
        // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');

        // gdzie gra bedzie rozmieszczac postacie graczy
        // dla kazdego poziomu musza byc 4 takie punkty, bo kazdy poziom bedzie mozna zagrac
        // majac 4 postacie w druzynie
        level.define_soldier_start_point(140,395);
        level.define_soldier_start_point(278,398);
        level.define_soldier_start_point(229,352);
        level.define_soldier_start_point(278,352);

        // limit jednoczesnie widocznych w grze botow
        level.set_max_creatures(20);
        // level.set_max_creatures(1);

        // Tworzymy siatke poziomu
        var mesh = level.mesh;

        // definiujemy przeszkody(sciany) uniemozliwiajace przejscie
        // define_barrier( x0, y0, x1, y1);
        mesh.define_barrier(54,23, 207,21);
        mesh.define_barrier(207,21, 257,-20);
        mesh.define_barrier(257,-20, 341,-20);
        mesh.define_barrier(341,-20, 459,42);
        mesh.define_barrier(459,42, 525,61);
        mesh.define_barrier(525,61, 651,61);
        mesh.define_barrier(651,61, 651,92);
        mesh.define_barrier(651,92, 736,92);
        mesh.define_barrier(736,92, 736,132);
        mesh.define_barrier(736,132, 692,140);
        mesh.define_barrier(692,140, 690,328);
        mesh.define_barrier(690,328, 820,328);
        mesh.define_barrier(820,328, 820,380);
        mesh.define_barrier(820,380, 770,380);
        mesh.define_barrier(770,380, 740,402);
        mesh.define_barrier(740,402, 714,572);
        mesh.define_barrier(714,572, 575,547);
        mesh.define_barrier(575,547, 397,582);
        mesh.define_barrier(397,582, 358,520);
        mesh.define_barrier(358,520, 252,576);
        mesh.define_barrier(252,576, 54,576);
        mesh.define_barrier(54,576, 54,23);
        mesh.define_barrier(521,122, 485,222);
        mesh.define_barrier(485,222, 590,222);
        mesh.define_barrier(590,222, 597,185);
        mesh.define_barrier(597,185, 623,168);
        mesh.define_barrier(623,168, 593,116);
        mesh.define_barrier(593,116, 521,122);
        mesh.define_barrier(209,432, 209,498);
        mesh.define_barrier(209,498, 302,498);
        mesh.define_barrier(302,498, 302,432);
        mesh.define_barrier(302,432, 209,432);
        mesh.define_barrier(282,127, 267,179);
        mesh.define_barrier(267,179, 231,211);
        mesh.define_barrier(231,211, 233,211);
        mesh.define_barrier(233,211, 243,269);
        mesh.define_barrier(243,269, 288,272);
        mesh.define_barrier(288,272, 312,252);
        mesh.define_barrier(312,252, 365,272);
        mesh.define_barrier(365,272, 393,206);
        mesh.define_barrier(393,206, 282,127);

        // definiujemy sciany, uniemozliwiajace strzelanie przez przeszkody
        // define_wall( x0, y0, x1, y1 )
        mesh.define_wall(520,122, 620,168);
        mesh.define_wall(506,178, 592,117);
        mesh.define_wall(209,432, 302,498);
        mesh.define_wall(302,432, 209,498);
        mesh.define_wall(282,127, 365,272);
        mesh.define_wall(243,269, 393,206);

        level.describe_wave(   //1
            // green - prepare time
            {
              timeout: 10, // czas trwania fazy w sekundach!

              droppings: [ // znajdzki
                { x: 430, y: 300, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 10 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [1,1] },
              ],

              bots: [ // boty
              ],

              marks: [ // strzalki
                { x: 300, y:5, src: 'assets/img/strzalki/arrow_down.png' },
              ]
            },
            // orange - cautious time
            {
              timeout: 15, // czas trwania fazy w sekundach!

              droppings: [
                { x: 140, y: 80, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 14 * 24, health_add: [10,20], ammo_add: [0.1, 0.25], viols_add: [5,5] },		
				{ x: 650, y: 110, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 14 * 24, health_add: [10,20], ammo_add: [0.1, 0.25], viols_add: [5,5] },
				{ x: 650, y: 500, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 14 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [5,5] },
				{ x: 140, y: 500, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 14 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [5,5] },
              ],
              // cruiser, wanderer
              bots: [
			  { x: 310, y: -10, kind: "Zmutowany_gryzon", count: 2, ai: 'wanderer' },
			  { x: 300, y: -10, kind: "Zmutowany_gryzon", count: 2, ai: 'wanderer' },
			  { x: 290, y: -10, kind: "Zmutowany_gryzon", count: 2, ai: 'wanderer' },
              ],
			  
			  marks: [
              ],
            },
            // red - amok time
            {
              timeout: 10, // czas trwania fazy w sekundach!

              droppings: [
              ],

              bots: [
              ],
			  
			  marks: [
              ],
            }
        );

        level.describe_wave(   //2
            // green - prepare time
            {
              timeout: 10, // czas trwania fazy w sekundach!

              droppings: [ // znajdzki  
				{ x: 160, y: 330, ammo: 0.00, health: 1.0, viols: 0.0, ttl: 10 * 24, health_add: [5,5], ammo_add: [0.1, 0.25], viols_add: [5,5] },
				{ x: 620, y: 330, ammo: 0.00, health: 1.0, viols: 0.0, ttl: 10 * 24, health_add: [5,5], ammo_add: [0.1, 0.25], viols_add: [5,5] },
              ],

              bots: [ // boty
              ],

              marks: [ // strzalki
                { x: 300, y:5, src: 'assets/img/strzalki/arrow_down.png' },
              ]
            },
            // orange - cautious time
            {
              timeout: 20, // czas trwania fazy w sekundach!

              droppings: [
                { x: 140, y: 100, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 19 * 24, health_add: [10,20], ammo_add: [0.1, 0.25], viols_add: [10,10] },
				{ x: 650, y: 100, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 19 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [10,10] },
				{ x: 420, y: 300, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 19 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [5,5] },
              ],

              bots: [
                { x: 300, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'wanderer', params: { x: 400, y: 320, r: 100 } },
				{ x: 290, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'wanderer', params: { x: 400, y: 320, r: 100 } },
				{ x: 310, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'wanderer', params: { x: 400, y: 320, r: 100 } },
			 { x: 300, y: -10, kind: "Zmutowany_gryzon", count: 2, ai: 'cruiser', params: { x: 415, y: 300, r: 100 } },
			 { x: 310, y: -10, kind: "Zmutowany_gryzon", count: 2, ai: 'cruiser', params: { x: 435, y: 300, r: 100 } },
              ],

              marks: [ // strzalki
              ],
            },
            // red - amok time
            {
              timeout: 10, // czas trwania fazy w sekundach!

              droppings: [
              ],

              bots: [
              ],

              marks: [ // strzalki
              ],
            }
        );
		
		level.describe_wave(  //3
            // green - prepare time
            {
              timeout: 10, // czas trwania fazy w sekundach!

              droppings: [ // znajdzki  
				{ x: 430, y: 180, ammo: 0.00, health: 1.0, viols: 0.0, ttl: 10 * 24, health_add: [10,10], ammo_add: [0.1, 0.25], viols_add: [5,15] },
				{ x: 420, y: 485, ammo: 0.00, health: 1.0, viols: 0.0, ttl: 10 * 24, health_add: [10,10], ammo_add: [0.1, 0.25], viols_add: [5,15] },
              ],

              bots: [ // boty
              ],

              marks: [ // strzalki
                { x: 300, y:5, src: 'assets/img/strzalki/arrow_down.png' },
                { x: 739, y:345, src: 'assets/img/strzalki/arrow_left.png'},
              ]
            },
            // orange - cautious time
            {
              timeout: 23, // czas trwania fazy w sekundach!

              droppings: [
                { x: 140, y: 335, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 22 * 24, health_add: [10,20], ammo_add: [0.1, 0.25], viols_add: [5,5] },
				{ x: 630, y: 350, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 22 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [5,5] },
				{ x: 440, y: 100, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 22 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [10,10] },
              ],

              bots: [
			    { x: 812, y: 353, kind: "Zmutowany_gryzon", count: 3, ai: 'wanderer' },
                { x: 300, y: -10, kind: "Zmutowany_gryzon", count: 3, ai: 'wanderer' },
                { x: 300, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'cruiser', params: { x: 130, y: 300, r: 100 } },
				{ x: 290, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'cruiser', params: { x: 640, y: 300, r: 100 } },
				{ x: 310, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'cruiser', params: { x: 130, y: 300, r: 100 } },
				{ x: 300, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'cruiser', params: { x: 640, y: 300, r: 100 } },
              ],

              marks: [ // strzalki
              ],
            },
            // red - amok time
            {
              timeout: 15, // czas trwania fazy w sekundach!

              droppings: [
              ],

              bots: [
              ],

              marks: [ // strzalki
              ],
            }
        );
		
		level.describe_wave(   // 4
            // green - prepare time
            {
              timeout: 10, // czas trwania fazy w sekundach!

              droppings: [ // znajdzki  
				{ x: 130, y: 220, ammo: 0.00, health: 1.0, viols: 0.0, ttl: 15 * 24, health_add: [10,10], ammo_add: [0.1, 0.25], viols_add: [5,15] },
				{ x: 410, y: 480, ammo: 0.00, health: 1.0, viols: 0.0, ttl: 15 * 24, health_add: [10,10], ammo_add: [0.1, 0.25], viols_add: [5,15] },
				{ x: 640, y: 220, ammo: 0.00, health: 1.0, viols: 0.0, ttl: 15 * 24, health_add: [10,10], ammo_add: [0.1, 0.25], viols_add: [5,15] },
              ],

              bots: [ // boty
              ],

              marks: [ // strzalki
                { x: 300, y:5, src: 'assets/img/strzalki/arrow_down.png' },
                { x: 739, y:345, src: 'assets/img/strzalki/arrow_left.png'},
              ]
            },
            // orange - cautious time
            {
              timeout: 25, // czas trwania fazy w sekundach!

              droppings: [
                { x: 440, y: 100, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 24 * 24, health_add: [10,20], ammo_add: [0.1, 0.25], viols_add: [10,10] },
				{ x: 160, y: 400, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 24 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [5,5] },
				{ x: 660, y: 400, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 24 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [10,10] },
				{ x: 420, y: 330, ammo: 0.00, health: 1.0, viols: 0.0, ttl: 24 * 24, health_add: [15,15], ammo_add: [0.1, 0.25], viols_add: [10,10] },
              ],

              bots: [{ x: 290, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'wanderer' },
			  { x: 300, y: -10, kind: "Zmutowany_gryzon", count: 2, ai: 'wanderer' },
			  { x: 310, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'wanderer' },
			  { x: 810, y: 340, kind: "Zmutowany_gryzon", count: 1, ai: 'wanderer' },
			  { x: 810, y: 345, kind: "Zmutowany_gryzon", count: 2, ai: 'wanderer' },
			  { x: 810, y: 350, kind: "Zmutowany_gryzon", count: 1, ai: 'wanderer' },
                { x: 300, y: -10, kind: "Zmutowany_gryzon", count: 2, ai: 'pathfinder', params: {
                      0: { x: 160, y: 140, next: 1 },
                      1: { x: 210, y: 330, next: 2 }, 
                      2: { x: 430, y: 330, next: 3 },
                      3: { x: 430, y: 100, next: 0 },
					  },
                   },
				{ x: 810, y: 350, kind: "Zmutowany_gryzon", count: 2, ai: 'pathfinder', params: {
					  0: { x: 600, y: 480, next: 1 },
                      1: { x: 350, y: 480, next: 2 }, 
                      2: { x: 350, y: 300, next: 3 },
                      3: { x: 600, y: 300, next: 0 },
					  },
                   },
              ],

              marks: [ // strzalki
              ],
            },
            // red - amok time
            {
              timeout: 10, // czas trwania fazy w sekundach!

              droppings: [
              ],

              bots: [
              ],

              marks: [ // strzalki
              ],
            }
        );
		
		level.describe_wave(   // 5
            // green - prepare time
            {
              timeout: 15, // czas trwania fazy w sekundach!

              droppings: [ // znajdzki  
				{ x: 130, y: 300, ammo: 0.00, health: 1.0, viols: 0.0, ttl: 15 * 24, health_add: [10,10], ammo_add: [0.1, 0.25], viols_add: [5,15] },
				{ x: 420, y: 500, ammo: 0.00, health: 1.0, viols: 0.0, ttl: 15 * 24, health_add: [10,10], ammo_add: [0.1, 0.25], viols_add: [5,15] },
				{ x: 420, y: 100, ammo: 0.00, health: 1.0, viols: 0.0, ttl: 15 * 24, health_add: [10,10], ammo_add: [0.1, 0.25], viols_add: [5,15] },
				{ x: 650, y: 300, ammo: 0.00, health: 1.0, viols: 0.0, ttl: 15 * 24, health_add: [10,10], ammo_add: [0.1, 0.25], viols_add: [5,15] },
              ],

              bots: [ // boty
              ],

              marks: [ // strzalki
                { x: 300, y:5, src: 'assets/img/strzalki/arrow_down.png' },
                { x: 739, y:345, src: 'assets/img/strzalki/arrow_left.png'},
              ]
            },
            // orange - cautious time
            {
              timeout: 35, // czas trwania fazy w sekundach!

              droppings: [
                { x: 300, y: 80, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 34 * 24, health_add: [10,20], ammo_add: [0.1, 0.25], viols_add: [15,15] },
				{ x: 660, y: 350, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 34 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [15,15] },
				{ x: 375, y: 335, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 34 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [10,10] },
				{ x: 130, y: 330, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 34 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [5,5] },
				{ x: 400, y: 500, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 34 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [5,5] },
              ],

              bots: [
			    { x: 812, y: 343, kind: "Zmutowany_gryzon", count: 1, ai: 'wanderer' },
                { x: 300, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'wanderer' },
				{ x: 812, y: 353, kind: "Zmutowany_gryzon", count: 1, ai: 'wanderer' },
                { x: 290, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'wanderer' },
				{ x: 812, y: 363, kind: "Zmutowany_gryzon", count: 1, ai: 'wanderer' },
                { x: 310, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'wanderer' },
			    { x: 812, y: 354, kind: "Zmutowany_gryzon", count: 3, ai: 'pathfinder', params: { // prawo 
                      0: { x: 644, y: 347, next: 1 },
                      1: { x: 644, y: 509, next: 2 }, 
                      2: { x: 123, y: 509, next: 3 },
                      3: { x: 137, y: 347, next: 1 },
					  },
                   },
                { x: 300, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'cruiser', params: { x: 140, y: 210, r: 100 } },
				{ x: 290, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'cruiser', params: { x: 430, y: 200, r: 100 } },
				{ x: 310, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'cruiser', params: { x: 653, y: 115, r: 100 } },
                { x: 300, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'cruiser', params: { x: 140, y: 210, r: 100 } },
				{ x: 290, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'cruiser', params: { x: 430, y: 200, r: 100 } },
				{ x: 310, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'cruiser', params: { x: 653, y: 115, r: 100 } },
				{ x: 300, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'cruiser', params: { x: 140, y: 210, r: 100 } },
				{ x: 290, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'cruiser', params: { x: 430, y: 200, r: 100 } },
				{ x: 310, y: -10, kind: "Zmutowany_gryzon", count: 1, ai: 'cruiser', params: { x: 653, y: 115, r: 100 } },
              ],

              marks: [ // strzalki
              ],
            },
            // red - amok time
            {
              timeout: 10, // czas trwania fazy w sekundach!

              droppings: [
                { x: 400, y: 300, ammo: 0.00, health: 1.00, viols: 0.00, ttl: 10 * 24, health_add: [15,15], ammo_add: [0.1, 0.25], viols_add: [5,15] },
              ],

              bots: [
              ],

              marks: [ // strzalki
              ],
            }
        );

        // Dialogi w grze, po prostu tablica do kolejnych obrazkóww z rozmowami
        // jesli w poziomie nie ma dialogow nie umieszczac w ogóle
        level.define_speeches( [
            'assets/img/story/00/LANG/d/begining/1/1.jpg',
            'assets/img/story/00/LANG/d/begining/1/2.jpg',
            'assets/img/story/00/LANG/d/begining/1/3.jpg',
            'assets/img/story/00/LANG/d/begining/1/4.jpg',
            'assets/img/story/00/LANG/d/begining/1/5.jpg',
            'assets/img/story/00/LANG/d/begining/1/6.jpg',
            'assets/img/story/00/LANG/d/begining/1/7.jpg',
            'assets/img/story/00/LANG/d/begining/1/8.jpg',
            'assets/img/story/00/LANG/d/begining/1/9.jpg',
            'assets/img/story/00/LANG/d/begining/1/10.jpg',
            'assets/img/story/00/LANG/d/begining/1/11.jpg',
            'assets/img/story/00/LANG/d/begining/1/12.jpg',
            'assets/img/story/00/LANG/d/begining/1/13.jpg',
            'assets/img/story/00/LANG/d/begining/1/14.jpg',
            'assets/img/story/00/LANG/d/begining/1/15.jpg',
            'assets/img/story/00/LANG/d/begining/1/16.jpg',
            'assets/img/story/00/LANG/d/begining/1/17.jpg',
            'assets/img/story/00/LANG/d/begining/1/18.jpg',
            'assets/img/story/00/LANG/d/begining/1/19.jpg',
            'assets/img/story/00/LANG/d/begining/1/20.jpg',
            'assets/img/story/00/LANG/d/begining/1/21.jpg',
            'assets/img/story/00/LANG/d/begining/1/22.jpg',


            ]);

        // Dialogi przed fala, pierwszy parametr - numer fali przed ktora ma sie pojawic dialo, drugi parametr
        // jak w dialogach poczatkowych
        //level.define_wave_speeches( 1, [
        //    'assets/img/levels/speech_0_1.png',
        //    'assets/img/levels/speech_0_2.png',
        //    'assets/img/levels/speech_0_3.png',
        //]);

        // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazkow z rozmowami
        // jesli w poziomie nie ma dialogow nie umieszczac w ogole
        level.define_end_speeches( [
            'assets/img/story/00/LANG/d/end/1/1.jpg',
            'assets/img/story/00/LANG/d/end/1/2.jpg',
            'assets/img/story/00/LANG/d/end/1/3.jpg',
            'assets/img/story/00/LANG/d/end/1/4.jpg',
            'assets/img/story/00/LANG/d/end/1/5.jpg',
            'assets/img/story/00/LANG/d/end/1/6.jpg',
            ]);

        // Tipsy w grze, po prostu tablica do kolejnych obrazkow z tipami
        // jesli w poziomie nie ma tipow nie umieszczac w ogole
        level.define_tips( [
            'assets/img/story/00/LANG/t/1.jpg',
            'assets/img/story/00/LANG/t/2.jpg',
<<<<<<< local
            ]);
=======
        ]);
>>>>>>> other

<<<<<<< local
        //Tipsy po zakonczeniu poziomu, po prostu tablica do kolejnych obrazkow z tipami
        //jesli w poziomie nie ma tipow nie umieszczac w ogole
        level.define_end_tips( [
            'assets/img/story/00/LANG/t/8.jpg',
            'assets/img/story/00/LANG/t/9.jpg',
            'assets/img/story/00/LANG/t/10.jpg',
            'assets/img/story/00/LANG/t/11.jpg',
            'assets/img/story/00/LANG/t/12.jpg',
            //'assets/img/story/00/LANG/t/13.jpg',
            ]);
=======
         //Tipsy po zakonczeniu poziomu, po prostu tablica do kolejnych obrazkow z tipami
         //jesli w poziomie nie ma tipow nie umieszczac w ogole
         level.define_end_tips( [
             'assets/img/story/00/LANG/t/8.jpg',
             'assets/img/story/00/LANG/t/9.jpg',
             'assets/img/story/00/LANG/t/10.jpg',
             'assets/img/story/00/LANG/t/11.jpg',
			 'assets/img/story/00/LANG/t/12.jpg',
         ]);
>>>>>>> other

        // Tipsy przed fala, pierwszy parametr - numer fali przed ktora ma sie pojawic tip, drugi parametr
        // jak w tipsach startowych
        level.define_wave_tips( 1, [
            'assets/img/story/00/LANG/t/5.jpg',
            ]);

        // Tipsy przed fala, pierwszy parametr - numer fali przed ktora ma sie pojawic tip, drugi parametr
        // jak w tipsach startowych
        level.define_wave_tips( 3, [
            'assets/img/story/00/LANG/t/3.jpg',
            'assets/img/story/00/LANG/t/4.jpg',
            ]);

        // Tipsy przed fala, pierwszy parametr - numer fali przed ktora ma sie pojawic tip, drugi parametr
        // jak w tipsach startowych
        level.define_wave_tips( 4, [
            'assets/img/story/00/LANG/t/6.jpg',
            'assets/img/story/00/LANG/t/7.jpg',
            ]);

        level.define_prizes( {
        });
        // definiujemy ilosc violek nagrody
        level.define_violki_prize(80); // było 55 //
      }
  );

  // >>>>>>>>>>
  // LEVEL 0 >>
  // >>>>>>>>>>

  // <<<<<<<<<<
  // << LEVEL 1
  // <<<<<<<<<<

  var level_1 = levels.define_level(1);
  level_1.set_name('level_1_name');
  level_1.set_map_position(142, 46);
  level_1.set_desc('level_1_desc');
  level_1.set_previous(0);

  level_1.set_level_data(
    function level_data(level) {
      level.set_id(1);

      level.set_background_image ('assets/img/levels/sopocka_ulica.png');
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');

      // dochodzacy zolniez - parametry
      // id - karta postaci, liczona od zera
      // nawa postaci z pliku soldiers.js
      // opcjonalnie założona broń
      // opcjonalnie założony armour
      // 4 * opcjonalnie item w plecaku
      level.add_survivor(1, "Wojownik", "Gdański trójząb", null, "Plaster gojący", "Plaster gojący");

      level.define_soldier_start_point(660,250); // było (694,100)
      level.define_soldier_start_point(660,340); // było (646,100)
      level.define_soldier_start_point(700,250); // było (385,100)
      level.define_soldier_start_point(700,370); // było (330,100)

      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      var mesh = level.mesh;

	  mesh.define_barrier(835,44, 835,564);
	  mesh.define_barrier(835,564, 416,564);
	  mesh.define_barrier(416,564, 342,645);
	  mesh.define_barrier(342,645, 308,645);
	  mesh.define_barrier(308,645, 278,554);
	  mesh.define_barrier(278,554, 160,554);
	  mesh.define_barrier(160,554, 210,433);
	  mesh.define_barrier(210,433, 140,350);
	  mesh.define_barrier(140,350, 184,301);
	  mesh.define_barrier(184,301, 159,280);
	  mesh.define_barrier(159,280, 100,280);
	  mesh.define_barrier(100,280, 142,236);
	  mesh.define_barrier(142,236, 30,142);
	  mesh.define_barrier(30,142, -40,142);
	  mesh.define_barrier(-40,142, -40,34);
	  mesh.define_barrier(-40,34, 835,34);
	  mesh.define_barrier(490,154, 446,301);
	  mesh.define_barrier(446,301, 508,418);
	  mesh.define_barrier(508,418, 460,452);
	  mesh.define_barrier(460,452, 486,516);
	  mesh.define_barrier(486,516, 554,472);
	  mesh.define_barrier(562,131, 512,82);
	  mesh.define_barrier(512,82, 484,110);
	  mesh.define_barrier(484,110, 528,160);
	  mesh.define_barrier(528,160, 490,154);
	  mesh.define_barrier(562,131, 648,252);
	  mesh.define_barrier(554,472, 648,252);
	  
	  mesh.define_wall(140,350, 184,301);
	  mesh.define_wall(142,236, 30,142);
	  mesh.define_wall(490,154, 508,418);
	  mesh.define_wall(596,182, 446,301);
	  mesh.define_wall(140,350, 210,433);
	  
	  level.define_body(650,350, "Mutant");
	  level.define_body(690,350, "Mutant");
	  
	    // Dialogi w grze, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczac w ogóle
      level.define_speeches( [
          'assets/img/story/01/LANG/d/begining/1/1.jpg',
          'assets/img/story/01/LANG/d/begining/1/2.jpg',
          'assets/img/story/01/LANG/d/begining/1/3.jpg',
		  'assets/img/story/01/LANG/d/begining/1/4.jpg',
		  'assets/img/story/01/LANG/d/begining/1/5.jpg',
		  'assets/img/story/01/LANG/d/begining/1/6.jpg',
		  'assets/img/story/01/LANG/d/begining/1/7.jpg',
		  'assets/img/story/01/LANG/d/begining/1/8.jpg',
		  'assets/img/story/01/LANG/d/begining/1/9.jpg',
		  'assets/img/story/01/LANG/d/begining/1/10.jpg',
		  'assets/img/story/01/LANG/d/begining/1/11.jpg',
		  'assets/img/story/01/LANG/d/begining/1/12.jpg',
		  'assets/img/story/01/LANG/d/begining/1/13.jpg',
		  'assets/img/story/01/LANG/d/begining/1/14.jpg',
		  'assets/img/story/01/LANG/d/begining/1/15.jpg',
		  'assets/img/story/01/LANG/d/begining/1/16.jpg',
		  'assets/img/story/01/LANG/d/begining/1/17.jpg',
		  'assets/img/story/01/LANG/d/begining/1/18.jpg',
		  'assets/img/story/01/LANG/d/begining/1/19.jpg',
		  'assets/img/story/01/LANG/d/begining/1/20.jpg',
		  'assets/img/story/01/LANG/d/begining/1/21.jpg',
		  'assets/img/story/01/LANG/d/begining/1/22.jpg',
		  'assets/img/story/01/LANG/d/begining/1/23.jpg',
		  'assets/img/story/01/LANG/d/begining/1/24.jpg',
		  'assets/img/story/01/LANG/d/begining/1/25.jpg',
		  'assets/img/story/01/LANG/d/begining/1/26.jpg',
		  'assets/img/story/01/LANG/d/begining/1/27.jpg',
		  'assets/img/story/01/LANG/d/begining/1/28.jpg',
		  'assets/img/story/01/LANG/d/begining/1/29.jpg',
		  'assets/img/story/01/LANG/d/begining/1/30.jpg',
		  'assets/img/story/01/LANG/d/begining/1/31.jpg',
		  'assets/img/story/01/LANG/d/begining/1/32.jpg',
		  'assets/img/story/01/LANG/d/begining/1/33.jpg',
		  'assets/img/story/01/LANG/d/begining/1/33.jpg',  
      ]);
	     // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczać w ogóle
      level.define_end_speeches( [
          'assets/img/story/01/LANG/d/end/1/1.jpg',
          'assets/img/story/01/LANG/d/end/1/2.jpg',
          'assets/img/story/01/LANG/d/end/1/3.jpg',
		  'assets/img/story/01/LANG/d/end/1/4.jpg',
		  'assets/img/story/01/LANG/d/end/1/5.jpg',
		  'assets/img/story/01/LANG/d/end/1/6.jpg',
		  'assets/img/story/01/LANG/d/end/1/7.jpg',
		  'assets/img/story/01/LANG/d/end/1/8.jpg', 
		  'assets/img/story/01/LANG/d/end/1/9.jpg',
		  'assets/img/story/01/LANG/d/end/1/10.jpg',  
      ]);
	  
	  level.define_tips( [
            'assets/img/story/01/LANG/t/1.jpg',
            'assets/img/story/01/LANG/t/2.jpg',
			'assets/img/story/01/LANG/t/3.jpg',
			'assets/img/story/01/LANG/t/4.jpg',
			'assets/img/story/01/LANG/t/5.jpg',
			'assets/img/story/01/LANG/t/6.jpg',
			'assets/img/story/01/LANG/t/9.jpg',
			'assets/img/story/01/LANG/t/10.jpg',
        ]);
		
		level.define_end_tips( [
             'assets/img/story/01/LANG/t/11.jpg',
             'assets/img/story/01/LANG/t/12.jpg',
             'assets/img/story/01/LANG/t/13.jpg',
             'assets/img/story/01/LANG/t/14.jpg',
			 'assets/img/story/01/LANG/t/15.jpg',
         ]);

      // wave'y
      // dwa wave'y nie mogą zdarzyć się w tej samej klatce
      level.describe_wave(   // 1
            // green - prepare time
            {
              timeout: 5, // czas trwania fazy w sekundach!

              droppings: [ // znajdzki  
              ],

              bots: [ // boty
              ],

              marks: [ // strzalki
                { x: 740, y: 60, src: 'assets/img/strzalki/arrow_left.png' },
				{ x: 740, y: 275, src: 'assets/img/strzalki/arrow_left.png' },
                { x: 740, y: 525, src: 'assets/img/strzalki/arrow_left.png'},
              ]
            },
            // orange - cautious time
            {
              timeout: 20, // czas trwania fazy w sekundach!

              droppings: [
                { x: 440, y: 250, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 19 * 24, health_add: [10,20], ammo_add: [0.1, 0.25], viols_add: [5,5] },
				{ x: 80, y: 80, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 19 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [10,10] },
				{ x: 340, y: 565, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 19 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [5,5] },
              ],

              bots: [
			    { x: 810, y: 55, kind: "Mutant", count: 1, ai: 'cruiser', params: { x: 310, y: 100, r: 150 } },
                { x: 810, y: 60, kind: "Mutant", count: 1, ai: 'cruiser', params: { x: 310, y: 100, r: 150 } },
				{ x: 810, y: 65, kind: "Mutant", count: 1, ai: 'wanderer'},
                { x: 810, y: 515, kind: "Mutant", count: 1, ai: 'cruiser', params: { x: 310, y: 520, r: 150 } },
				{ x: 810, y: 525, kind: "Mutant", count: 1, ai: 'cruiser', params: { x: 310, y: 520, r: 150 } },
                { x: 810, y: 535, kind: "Mutant", count: 1, ai: 'wanderer'},
             //   { x: 810, y: 275, kind: "Ślepy Mutant", count: 1, ai: 'cruiser', params: { x: 690, y: 270, r: 50 } },
			 //   { x: 810, y: 265, kind: "Ślepy Mutant", count: 1, ai: 'cruiser', params: { x: 690, y: 270, r: 50 } },
              ],

              marks: [ // strzalki
              ],
            },
            // red - amok time
            {
              timeout: 10, // czas trwania fazy w sekundach!

              droppings: [
              ],

              bots: [
              ],

              marks: [ // strzalki
              ],
            }
        );
		
		level.describe_wave(   // 2
            // green - prepare time
            {
              timeout: 15, // czas trwania fazy w sekundach!

              droppings: [ // znajdzki  
              { x: 520, y: 55, ammo: 0.00, health: 1.0, viols: 0.0, ttl: 10 * 24, health_add: [10,10], ammo_add: [0.1, 0.25], viols_add: [5,5] },
			  { x: 520, y: 525, ammo: 0.00, health: 1.0, viols: 0.0, ttl: 10 * 24, health_add: [10,10], ammo_add: [0.1, 0.25], viols_add: [5,5] },
			  { x: 400, y: 280, ammo: 0.00, health: 1.0, viols: 0.0, ttl: 19 * 24, health_add: [15,15], ammo_add: [0.1, 0.25], viols_add: [5,5] },
			  ],

              bots: [ // boty
              ],

              marks: [ // strzalki
                { x: 740, y: 60, src: 'assets/img/strzalki/arrow_left.png' },
				{ x: 740, y: 275, src: 'assets/img/strzalki/arrow_left.png' },
                { x: 740, y: 525, src: 'assets/img/strzalki/arrow_left.png'},
              ]
            },
            // orange - cautious time
            {
              timeout: 25, // czas trwania fazy w sekundach!

              droppings: [
                { x: 350, y: 250, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 24 * 24, health_add: [10,20], ammo_add: [0.1, 0.25], viols_add: [5,5] },
				{ x: 80, y: 80, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 24 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [10,10] },
				{ x: 340, y: 565, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 24 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [5,5] },
				{ x: 700, y: 285, ammo: 0.00, health: 0.0, viols: 1.0, ttl: 24 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [20,20] },
              ],

              bots: [
			    { x: 810, y: 55, kind: "Mutant", count: 2, ai: 'cruiser', params: { x: 310, y: 100, r: 150 } },
                { x: 810, y: 60, kind: "Mutant", count: 1, ai: 'cruiser', params: { x: 310, y: 100, r: 150 } },
				{ x: 810, y: 65, kind: "Mutant", count: 1, ai: 'wanderer'},
                { x: 810, y: 515, kind: "Mutant", count: 2, ai: 'cruiser', params: { x: 310, y: 520, r: 150 } },
				{ x: 810, y: 525, kind: "Mutant", count: 1, ai: 'cruiser', params: { x: 310, y: 520, r: 150 } },
                { x: 810, y: 535, kind: "Mutant", count: 1, ai: 'wanderer'},
                { x: 810, y: 275, kind: "Ślepy Mutant", count: 1, ai: 'cruiser', params: { x: 700, y: 285, r: 50 } },
			    { x: 810, y: 265, kind: "Ślepy Mutant", count: 1, ai: 'cruiser', params: { x: 700, y: 285, r: 50 } },
              ],

              marks: [ // strzalki
              ],
            },
            // red - amok time
            {
              timeout: 10, // czas trwania fazy w sekundach!

              droppings: [
              ],

              bots: [
              ],

              marks: [ // strzalki
              ],
            }
        );
		
      level.define_prizes( {
        "Mały zestaw pierwszej pomocy": 1,
      });

      level.define_violki_prize(180);
    }
  );

  // >>>>>>>>>>
  // LEVEL 1 >>
  // >>>>>>>>>>
  
   // <<<<<<<<<<
  // << LEVEL 2
  // <<<<<<<<<<

  // tworzmy nowy poziom w nawiazie podajemy jego numer porzadkowy
  var level_2 = levels.define_level(2);
  // nazwa pojawiajaca sie na mapie
  level_2.set_name("level_2_name");
  // lewy dolny rog napisu
  level_2.set_map_position(172, 41);
  // pierwsza linijka opisu poziomu
  level_2.set_desc('level_2_desc');
  level_2.set_previous(1);
  // opisujemy szczegóły mapy poziomu
  level_2.set_level_data(
    function level_data(level) {
      // powtarzamy numer porządkowy - koniecznie
      level.set_id(2);

      // ustawiamy tlo poziomu
      level.set_background_image ('assets/img/levels/gdanska_fabryka.png');
      // (opcjonalnie) ustawiamy pierwszy plan poziomu - jest rysowany na tle i na postaciach
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');

      // ustawimy kolejne punkty z ktorych moga startowac boty, w nawiazie podajemy wspolrzedne tych punktow
      // powinny byc poza mapa (lub w miejscu przykrytym pierwszym planem) tak aby gracz nie zobaczyl
      // botow pojawiajacych sie z nikad
      level.define_bot_start_point(370,-18);
	  level.define_bot_start_point(370,618);
      
	  level.define_bot_start_point_mark( 370, 10, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(370, 540, 'assets/img/strzalki/arrow_up.png');

      // gdzie gra bedzie rozmieszczac postacie graczy
      // dla kazdego poziomu musza byc 4 takie punkty, bo kazdy poziom bedzie mozna zagrac
      // majac 4 postacie w druzynie
      level.define_soldier_start_point(379,388);
      level.define_soldier_start_point(448,388);
      level.define_soldier_start_point(379,439);
      level.define_soldier_start_point(448,439);

      // limit jednoczesnie widocznych w grze botow
      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      // Tworzymy siatke poziomu
      var mesh = level.mesh;

	  mesh.define_barrier(20,20, 277,20);
	  mesh.define_barrier(277,20, 277,-40);
	  mesh.define_barrier(277,-40, 520,-40);
	  mesh.define_barrier(520,-40, 520,20);
	  mesh.define_barrier(520,20, 780,20);
	  mesh.define_barrier(780,20, 780,580);
	  mesh.define_barrier(780,580, 638,580);
	  mesh.define_barrier(638,580, 674,509);
	  mesh.define_barrier(674,509, 674,475);
	  mesh.define_barrier(674,475, 652,475);
	  mesh.define_barrier(652,475, 652,413);
	  mesh.define_barrier(652,413, 602,366);
	  mesh.define_barrier(602,366, 559,366);
	  mesh.define_barrier(559,366, 559,471);
	  mesh.define_barrier(559,471, 540,488);
	  mesh.define_barrier(540,488, 540,580);
	  mesh.define_barrier(540,580, 470,580);
	  mesh.define_barrier(470,580, 470,650);
	  mesh.define_barrier(470,650, 342,650);
	  mesh.define_barrier(342,650, 342,580);
	  mesh.define_barrier(342,580, 20,580);
	  mesh.define_barrier(20,580, 20,20);
	  mesh.define_barrier(160,92, 242,92);
	  mesh.define_barrier(242,92, 242,122);
	  mesh.define_barrier(242,122, 294,146);
	  mesh.define_barrier(294,146, 294,440);
	  mesh.define_barrier(294,440, 216,440);
	  mesh.define_barrier(216,440, 216,521);
	  mesh.define_barrier(216,521, 160,521);
	  mesh.define_barrier(160,521, 160,92);
	  mesh.define_barrier(446,264, 446,328);
	  mesh.define_barrier(446,328, 380,328);
	  mesh.define_barrier(380,328, 380,264);
	  mesh.define_barrier(380,264, 446,264);
	  mesh.define_barrier(566,92, 584,92);
	  mesh.define_barrier(584,92, 652,154);
	  mesh.define_barrier(652,154, 652,255);
	  mesh.define_barrier(652,255, 604,255);
	  mesh.define_barrier(604,255, 533,220);
	  mesh.define_barrier(533,220, 533,136);
	  mesh.define_barrier(533,136, 566,92);
	  
	  mesh.define_wall(533,136, 652,255);
	  mesh.define_wall(533,220, 652,154);
	  mesh.define_wall(559,366, 638,579);
	  mesh.define_wall(380,264, 446,328);
	  mesh.define_wall(446,264, 380,328);
	  mesh.define_wall(160,521, 294,146);
	  mesh.define_wall(160,92, 294,440);
	  mesh.define_wall(559,471, 652,413);
	  
	 // Dialogi w grze, po prostu tablica do kolejnych obrazkóww z rozmowami
     // jesli w poziomie nie ma dialogow nie umieszczac w ogóle
      level.define_speeches( [
          'assets/img/story/02/LANG/d/begining/1/1.jpg',
          'assets/img/story/02/LANG/d/begining/1/2.jpg',
          'assets/img/story/02/LANG/d/begining/1/3.jpg',
		  'assets/img/story/02/LANG/d/begining/1/4.jpg',
		  'assets/img/story/02/LANG/d/begining/1/5.jpg',
		  
      ]);
	  // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazkow z rozmowami
      // jesli w poziomie nie ma dialogow nie umieszczac w ogole
	 level.define_end_speeches( [
          'assets/img/story/02/LANG/d/end/1/1.jpg',
          'assets/img/story/02/LANG/d/end/1/2.jpg',
		  'assets/img/story/02/LANG/d/end/1/3.jpg',
		  'assets/img/story/02/LANG/d/end/1/4.jpg',
		  'assets/img/story/02/LANG/d/end/1/5.jpg',
		  'assets/img/story/02/LANG/d/end/1/6.jpg',
		  'assets/img/story/02/LANG/d/end/1/7.jpg',
      ]);
	  

	 level.define_tips( [
            'assets/img/story/02/LANG/t/1.jpg',
        ]);
	  
      // wave'y
      // dwa wave'y nie mogą zdarzyć się w tej samej klatce
      level.define_wave( 24 , 
        [
          { "Korsarz": 2 },
          null,
        ],
		1
      );
	  level.define_wave( 24 * 15, 
        [
          { "Korsarz": 3 },
          { "Mutant": 5 },
        ],
		24 * 10
      );
	  level.define_wave( 24 * 40, 
        [
          { "Korsarz": 2 },
          { "Mutant": 5 },
        ],
		24 * 35
      );
	  level.define_wave( 24 * 70, 
        [
          { "Korsarz": 3 },
          { "Mutant": 5 },
        ],
		24 * 75
      );
	  level.define_wave( 24 * 100, 
        [
          { "Korsarz": 2 },
          { "Mutant": 5 },
        ],
		24 * 95
      );
	  level.define_wave( 24 * 135, 
        [
          { "Korsarz": 5 },
          { "Mutant": 10 },
        ],
		24 * 130
      );
	  level.define_wave( 24 * 175, 
        [
          null,
          { "Mutant": 10 },
        ],
		24 * 170
      );
	  // prawy górny róg przy górnym gruzie
	  level.define_dropping_point( 652, 107,
        20 * 24,
        { ammo: 0.15, health: 0.20, viols: 0.00, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.15, 0.3], viols_add: [10,40] }
      );
	  // międzygruzie
	  level.define_dropping_point( 630, 318,
        23 * 24,
        { ammo: 0.15, health: 0.20, viols: 0.00, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.15, 0.3], viols_add: [10,40] }
      );
	  // prawy dolny róg
	  level.define_dropping_point( 732, 517,
        26 * 24,
        { ammo: 0.15, health: 0.20, viols: 0.00, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.15, 0.3], viols_add: [10,40] }
      );
	   // lewy górny róg
	  level.define_dropping_point( 58, 56,
        29 * 24,
        { ammo: 0.15, health: 0.20, viols: 0.00, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.15, 0.3], viols_add: [10,40] }
      );
	  // na lewo od maszyny
	  level.define_dropping_point( 58, 355,
        32 * 24,
        { ammo: 0.15, health: 0.20, viols: 0.00, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.15, 0.3], viols_add: [10,40] }
      );
	  // na lewo od dolnego gruzu
	  level.define_dropping_point( 482, 404,
        35 * 24,
        { ammo: 0.05, health: 0.05, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.15, 0.3], viols_add: [10,40] }
      );
	  // prawy dolny róg maszyny
	  level.define_dropping_point( 253, 486,
        38 * 24,
        { ammo: 0.05, health: 0.05, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.15, 0.3], viols_add: [10,40] }
      );
	  // między maszyną a filarem
	  level.define_dropping_point( 340, 298,
        41 * 24,
        { ammo: 0.05, health: 0.05, viols: 0.25, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.15, 0.3], viols_add: [10,40] }
      );
	  // pod drzwiami
	  level.define_dropping_point( 438, 170,
        44 * 24,
        { ammo: 0.05, health: 0.05, viols: 0.20, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.15, 0.3], viols_add: [10,40] }
      );
	  // prawy górny róg maszyny
	  level.define_dropping_point( 303, 107,
        47 * 24,
        { ammo: 0.05, health: 0.05, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.35], viols_add: [10,40] }
      );
      // definiujemy nagrody
      // define_prizes( { "Klucz_itemu_1": liczba, "Klucz_itemu_2": liczba, ..., "Klucz_itemu_6": liczba } )
      level.define_prizes( {
       // "Korsarski kordelas": 1,
       // "Lekki kirys śmieciowy": 1,
      });
      // definiujemy ilosc violek nagrody
      level.define_violki_prize(400);
    }
  );

  // >>>>>>>>>>
  // LEVEL 2 >>
  // >>>>>>>>>>
  
   // <<<<<<<<<<
  // << LEVEL 3
  // <<<<<<<<<<

  
  // tworzmy nowy poziom w nawiazie podajemy jego numer porzadkowy
  var level_3 = levels.define_level(3);
  // nazwa pojawiajaca sie na mapie
  level_3.set_name("level_3_name");
  // lewy dolny rog napisu
  level_3.set_map_position(160, 72);
  // pierwsza linijka opisu poziomu
  level_3.set_desc('level_3_desc');
  level_3.set_previous(1);
  // opisujemy szczegoly mapy poziomu
  level_3.set_level_data(
    function level_data(level) {
      // powtarzamy numer porzadkowy - koniecznie
      level.set_id(3);

      // ustawiamy tlo poziomu
      level.set_background_image ('assets/img/levels/gdanskie_wybrzeze.png');
      // (opcjonalnie) ustawiamy pierwszy plan poziomu - jest rysowany na tle i na postaciach
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');

      // ustawimy kolejne punkty z ktorych moga startowac boty, w nawiazie podajemy wspolrzedne tych punktow
      // powinny byc poza mapa (lub w miejscu przykrytym pierwszym planem) tak aby gracz nie zobaczyl
      // botow pojawiajacych sie z nikad
      level.define_bot_start_point(585,-20); // góra prawo
	  level.define_bot_start_point(585,-20);
	  level.define_bot_start_point(585,-20);
      level.define_bot_start_point(327,-20); // góra środek
	  level.define_bot_start_point(327,-20);
      level.define_bot_start_point(-20,100); // góra lewo
	  level.define_bot_start_point(-20,100);
	  level.define_bot_start_point(-20,190); // góra lewo nieco niżej
	  level.define_bot_start_point(-20,190);
      level.define_bot_start_point(-20,320); // lewo środek
	  level.define_bot_start_point(-20,320);
	  level.define_bot_start_point(-20,320);
      level.define_bot_start_point(-20,489); // lewy dolny róg
	  level.define_bot_start_point(-20,489);
      level.define_bot_start_point(360,619); // dół
	  level.define_bot_start_point(360,619);
	  level.define_bot_start_point(360,619);
	  
	  level.define_bot_start_point_mark(585, 10, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(585, 10, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(585, 10, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(327, 10, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(327, 10, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(10, 100, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(10, 100, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(10, 190, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(10, 190, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(10, 320, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(10, 320, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(10, 320, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(10, 489, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(10, 489, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(360, 541, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(360, 541, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(360, 541, 'assets/img/strzalki/arrow_up.png');

      // gdzie gra bedzie rozmieszczac postacie graczy
      // dla kazdego poziomu musza byc 4 takie punkty, bo kazdy poziom bedzie mozna zagrac
      // majac 4 postacie w druzynie
      level.define_soldier_start_point(542,284);
      level.define_soldier_start_point(500,284);
      level.define_soldier_start_point(500,332);
      level.define_soldier_start_point(542,332);

      // limit jednoczesnie widocznych w grze botow
      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      // Tworzymy siatke poziomu
      var mesh = level.mesh;

	  mesh.define_barrier(612,-40, 612,201);
	  mesh.define_barrier(612,201, 688,201);
	  mesh.define_barrier(688,201, 688,243);
	  mesh.define_barrier(688,243, 800,243);
	  mesh.define_barrier(800,243, 800,356);
	  mesh.define_barrier(800,356, 612,356);
	  mesh.define_barrier(612,356, 612,412);
	  mesh.define_barrier(612,412, 458,412);
	  mesh.define_barrier(458,412, 368,462);
	  mesh.define_barrier(368,462, 469,650);
	  mesh.define_barrier(469,650, -40,640);
	  mesh.define_barrier(-40,640, -40,-40);
	  mesh.define_barrier(-40,-40, 612,-40);
	  mesh.define_barrier(169,70, 454,70);
	  mesh.define_barrier(454,70, 512,97);
	  mesh.define_barrier(512,97, 564,130);
	  mesh.define_barrier(564,130, 547,166);
	  mesh.define_barrier(547,166, 464,166);
	  mesh.define_barrier(464,166, 431,222);
	  mesh.define_barrier(431,222, 417,222);
	  mesh.define_barrier(417,222, 371,182);
	  mesh.define_barrier(371,182, 296,182);
	  mesh.define_barrier(296,182, 212,256);
	  mesh.define_barrier(212,256, 212,297);
	  mesh.define_barrier(212,297, 188,284);
	  mesh.define_barrier(188,284, 146,242);
	  mesh.define_barrier(146,242, 130,164);
	  mesh.define_barrier(130,164, 166,130);
	  mesh.define_barrier(166,130, 169,70);
	  mesh.define_barrier(66,341, 123,341);
	  mesh.define_barrier(123,341, 172,386);
	  mesh.define_barrier(172,386, 192,373);
	  mesh.define_barrier(192,373, 254,412);
	  mesh.define_barrier(254,412, 284,455);
	  mesh.define_barrier(284,455, 293,485);
	  mesh.define_barrier(293,485, 334,524);
	  mesh.define_barrier(334,524, 306,558);
	  mesh.define_barrier(66,424, 66,341);
	  mesh.define_barrier(66,424, 169,559);
	  mesh.define_barrier(169,559, 268,588);
	  mesh.define_barrier(306,558, 268,588);
	  
	  mesh.define_wall(114,424, 284,455);
	  mesh.define_wall(192,373, 220,524);
	  mesh.define_wall(169,70, 212,297);
	  mesh.define_wall(166,130, 512,97);
	  mesh.define_wall(454,70, 464,166);
	  mesh.define_wall(368,462, 469,620);
	  mesh.define_wall(612,201, 688,166);
	
	 // Dialogi w grze, po prostu tablica do kolejnych obrazkóww z rozmowami
     // jesli w poziomie nie ma dialogow nie umieszczac w ogóle
      level.define_speeches( [
          'assets/img/story/03/LANG/d/begining/1/1.jpg',
          'assets/img/story/03/LANG/d/begining/1/2.jpg',
          'assets/img/story/03/LANG/d/begining/1/3.jpg',
		  'assets/img/story/03/LANG/d/begining/1/4.jpg',
		  'assets/img/story/03/LANG/d/begining/1/5.jpg',
		  'assets/img/story/03/LANG/d/begining/1/6.jpg',
		  'assets/img/story/03/LANG/d/begining/1/7.jpg',
		  'assets/img/story/03/LANG/d/begining/1/8.jpg',
		  'assets/img/story/03/LANG/d/begining/1/9.jpg',
		  'assets/img/story/03/LANG/d/begining/1/10.jpg',
		  'assets/img/story/03/LANG/d/begining/1/11.jpg',
		  'assets/img/story/03/LANG/d/begining/1/12.jpg',
		  'assets/img/story/03/LANG/d/begining/1/13.jpg',
		  'assets/img/story/03/LANG/d/begining/1/14.jpg',
		  'assets/img/story/03/LANG/d/begining/1/15.jpg',
		  'assets/img/story/03/LANG/d/begining/1/16.jpg',
		  'assets/img/story/03/LANG/d/begining/1/17.jpg',
		  'assets/img/story/03/LANG/d/begining/1/18.jpg',
		  
		  
      ]);
	  // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazkow z rozmowami
      // jesli w poziomie nie ma dialogow nie umieszczac w ogole
      level.define_end_speeches( [
          'assets/img/story/03/LANG/d/end/1/1.jpg',
          'assets/img/story/03/LANG/d/end/1/2.jpg',
          'assets/img/story/03/LANG/d/end/1/3.jpg',
		  'assets/img/story/03/LANG/d/end/1/4.jpg',
		  'assets/img/story/03/LANG/d/end/1/5.jpg',
		  'assets/img/story/03/LANG/d/end/1/6.jpg',
		  'assets/img/story/03/LANG/d/end/1/7.jpg',
		  'assets/img/story/03/LANG/d/end/1/8.jpg',
		  'assets/img/story/03/LANG/d/end/1/9.jpg',
		  'assets/img/story/03/LANG/d/end/1/10.jpg',
		  'assets/img/story/03/LANG/d/end/1/11.jpg',
		  'assets/img/story/03/LANG/d/end/1/12.jpg',
		  'assets/img/story/03/LANG/d/end/1/13.jpg',
		  'assets/img/story/03/LANG/d/end/1/14.jpg',
		  'assets/img/story/03/LANG/d/end/1/15.jpg',
		  'assets/img/story/03/LANG/d/end/1/16.jpg',
		  'assets/img/story/03/LANG/d/end/1/17.jpg',
		  'assets/img/story/03/LANG/d/end/1/18.jpg',
		  ]);
		  
		    // Dialogi przed fala, pierwszy parametr - numer fali przed która ma sie pojawić działo, 
			//drugi parametr jak dialogach początkowych
			level.define_wave_speeches( 7 ,
		[
           'assets/img/story/03/LANG/d/mid/1.jpg',
           'assets/img/story/03/LANG/d/mid/2.jpg',
           'assets/img/story/03/LANG/d/mid/3.jpg',
      ]);
	  
	  level.define_tips( [
            'assets/img/story/03/LANG/t/1.jpg',
			'assets/img/story/03/LANG/t/2.jpg',
        ]);
		
		level.define_wave_tips( 7, [
            'assets/img/story/03/LANG/t/3.jpg',
			'assets/img/story/03/LANG/t/4.jpg',
        ]);
		
      level.define_wave( 24 * 4 , 
        [
          null,
		  null,
		  null,
	      null,
		  null,
		  null,
		  null,
		  null,
		  null,		  
		  { "Korsarz": { no: 1, x: 565, y: 180, r: 50 } }, // lewo środek
		  { "Korsarz": { no: 1, x: 750, y: 300, r: 50 } }, 
		  { "Korsarz": { no: 1, x: 380, y: 425, r: 50 } }, 
		  null,
		  null,
		  null,
		  null,
		  null,		  
        ],
		1
      );
	  level.define_wave( 24 * 15 , 
        [
          null, // prawo góra
		  null,
		  null,		  
		  { "Korsarz": { no: 1, x: 280, y: 35, r: 20 } }, // góra środek
		  null,, 
		  null,
		  null,
		  { "Korsarz": { no: 1, x: 55, y: 180, r: 20 } }, // góra lewo niżej
		  null,
		  { "Korsarz_biegacz": { no: 1, x: 565, y: 180, r: 50 } }, // lewo środek
		  { "Korsarz": { no: 2, x: 750, y: 300, r: 50 } }, 
		  { "Korsarz": { no: 2, x: 380, y: 425, r: 50 } }, 
		  { "Korsarz": { no: 1, x: 45, y: 500, r: 20 } }, // lewy dolny róg
		  null, 
		  null,
		  null,
		  null,		  
        ],
		24 * 10
      );
	  level.define_wave( 24 * 30 , 
        [
          { "Korsarz_biegacz": { no: 1, x: 640, y: 300, r: 50 } }, // prawo góra
		  { "Korsarz": { no: 2, x: 560, y: 300, r: 50 } },  
		  null, 
		  null,
		  null,
		  null,
		  null, 
		  null,
		  null,		  
		  null,
		  null,
		  null,
		  null,
null,		  
		  { "Korsarz_biegacz": { no: 1, x: 220, y: 300, r: 50 } }, // dół
		  { "Korsarz": { no: 2, x: 370, y: 200, r: 50 } }, 
		  null, 
        ],
		24 * 25
      );
	  level.define_wave( 24 * 42 , 
        [
          null,
null,
null,		  
		  null, // góra środek
		  { "Korsarz": { no: 1, x: 360, y: 35, r: 20 } }, 
		  null, // góra lewo
		  { "Korsarz": { no: 1, x: 100, y: 100, r: 20 } }, 
		  { "Korsarz": { no: 1, x: 55, y: 180, r: 20 } }, // góra lewo niżej
		  { "Korsarz": { no: 1, x: 45, y: 170, r: 20 } }, 
		  null,
		  null,
		  null, 
		  { "Korsarz": { no: 1, x: 45, y: 500, r: 20 } }, // lewy dolny róg
		  { "Korsarz": { no: 1, x: 100, y: 550, r: 20 } }, 
		  null,
		  null,
		  null,
        ],
		24 * 37
      );
	  level.define_wave( 24 * 55 , 
        [
          { "Korsarz": { no: 2, x: 640, y: 300, r: 50 } }, // prawo góra
		  { "Korsarz": { no: 1, x: 560, y: 300, r: 50 } },  
		  { "Korsarz_biegacz": { no: 1, x: 450, y: 300, r: 55 } }, 
		  null,
null,
null,
null,
null,
null,		  
		  { "Korsarz": { no: 1, x: 565, y: 180, r: 50 } }, // lewo środek
		  { "Korsarz": { no: 1, x: 750, y: 300, r: 50 } }, 
		  null, 
		  null,
null,		  
		  { "Korsarz": { no: 1, x: 220, y: 300, r: 50 } }, // dół
		  { "Korsarz_biegacz": { no: 1, x: 370, y: 200, r: 50 } }, 
		  { "Korsarz": { no: 2, x: 600, y: 200, r: 50 } }, 
        ],
		24 * 50
      );
	  level.define_wave( 24 * 80 , 
        [
          null,
		  null,
		  null,
		  null,
null,
null,
null,
null,
null,		  
		  { "Korsarz": { no: 2, x: 565, y: 180, r: 50 } }, // lewo środek
		  { "Korsarz_7": { no: 1, x: 750, y: 300, r: 50 } }, 
		  { "Korsarz": { no: 2, x: 380, y: 425, r: 50 } }, 
		  null,
null,		  
		  null,
null,		  
		  null,
        ],
		24 * 85
      );
	  // mapa 4

level.define_wave( 24 * 105 , 
        [
          { "Korsarz_7": { no: 1, x: 640, y: 300, r: 50 } }, // prawo góra
		  { "Korsarz": { no: 1, x: 560, y: 300, r: 50 } },  
		  { "Korsarz_biegacz": { no: 1, x: 450, y: 300, r: 55 } }, 
		  null,
		  null,
		  null,
		  null,
		  null, 
		  null,
		  { "Korsarz": { no: 1, x: 565, y: 180, r: 50 } }, // lewo środek
		  { "Korsarz_7": { no: 1, x: 750, y: 300, r: 50 } }, 
		  { "Korsarz_biegacz": { no: 1, x: 380, y: 425, r: 50 } }, 
		  null,
null,		  
		  { "Korsarz": { no: 1, x: 220, y: 300, r: 50 } }, // dół
		  { "Korsarz_7": { no: 1, x: 370, y: 200, r: 50 } }, 
		  { "Korsarz_biegacz": { no: 1, x: 600, y: 200, r: 50 } }, 
        ],
		24 * 100
      );
	  // mapa 4

level.define_wave( 24 * 115 , 
        [
          null,
null,
null,		  
		  { "Korsarz": { no: 2, x: 280, y: 35, r: 50 } }, // góra środek
		  { "Korsarz_7": { no: 1, x: 560, y: 300, r: 50 } },  
		  { "Korsarz": { no: 1, x: 80, y: 70, r: 50 } }, // góra lewo
		  null, 
		  { "Korsarz": { no: 2, x: 55, y: 180, r: 50 } }, // góra lewo niżej
		  { "Korsarz_7": { no: 1, x: 45, y: 170, r: 50 } }, 
		  null,
null,
null,		  
		  { "Korsarz": { no: 2, x: 45, y: 500, r: 50 } }, // lewy dolny róg
		  { "Korsarz_7": { no: 1, x: 100, y: 550, r: 50 } }, 
		  null,
		  null,
		  null, 
        ],
		24 * 110
      );
	  level.define_wave( 24 * 135 , 
        [
         null,
		 null,
		 null,
	     null,
		 null,
		 null,
		 null,
		 null,
		 null,	
         null,
         null,
         { "Król Korsarzy": { no: 1, x: 565, y: 180, r: 50 } },
         null,
		 null,
		 null,
		 null,
		 null,
        ],
		24 * 140
      );
	  // na prawo od ruiny
	  level.define_dropping_point( 573, 122,
        10 * 24,
        { ammo: 0.0, health: 0.25, viols: 0.1, ttl: 15 * 24, health_add: [10,20], ammo_add: [0.2, 0.4], viols_add: [10,20] }
      );
	  // pomost góra
	  level.define_dropping_point( 782, 258,
        13 * 24,
        { ammo: 0.0, health: 0.3, viols: 0.1, ttl: 15 * 24, health_add: [15,30], ammo_add: [0.2, 0.4], viols_add: [10,20] }
      );
	  // pomost dół
	  level.define_dropping_point( 779, 346,
        16 * 24,
        { ammo: 0.0, health: 0.3, viols: 0.2, ttl: 15 * 24, health_add: [15,30], ammo_add: [0.2, 0.4], viols_add: [10,20] }
      );
	  // przy śladach gora
	  level.define_dropping_point( 116, 120,
        19 * 24,
        { ammo: 0.0, health: 0.0, viols: 0.4, ttl: 45 * 24, health_add: [10,20], ammo_add: [0.2, 0.4], viols_add: [20,40] }
      );
	  // przy śladach gora 2
	  level.define_dropping_point( 80, 90,
        19 * 24,
        { ammo: 0.0, health: 0.4, viols: 0.0, ttl: 45 * 24, health_add: [20,40], ammo_add: [0.2, 0.4], viols_add: [10,20] }
      );
	  // pod samochodem
	  level.define_dropping_point( 95, 498,
        22 * 24,
        { ammo: 0.0, health: 0.4, viols: 0.0, ttl: 45 * 24, health_add: [20,40], ammo_add: [0.2, 0.4], viols_add: [10,20] }
      );
	  // pod samochodem 2
	  level.define_dropping_point( 75, 478,
        22 * 24,
        { ammo: 0.0, health: 0.0, viols: 0.4, ttl: 45 * 24, health_add: [10,20], ammo_add: [0.2, 0.4], viols_add: [20,40] }
      );
	  // nad drzewem
	  level.define_dropping_point( 500, 396,
        25 * 24,
        { ammo: 0.0, health: 0.35, viols: 0.1, ttl: 15 * 24, health_add: [10,20], ammo_add: [0.2, 0.4], viols_add: [10,20] }
      );
	  // między samochodem a drzewem
	  level.define_dropping_point( 358, 520,
        28 * 24,
        { ammo: 0.0, health: 0.35, viols: 0.1, ttl: 15 * 24, health_add: [10,20], ammo_add: [0.2, 0.4], viols_add: [10,20] }
      );
	  // na prawo od samochodu
	  level.define_dropping_point( 302, 417,
        31 * 24,
        { ammo: 0.0, health: 0.25, viols: 0.05, ttl: 15 * 24, health_add: [10,20], ammo_add: [0.2, 0.4], viols_add: [10,20] }
      );
	  // środek mapy
	  level.define_dropping_point( 362, 302,
        34 * 24,
        { ammo: 0.0, health: 0.4, viols: 0.05, ttl: 13 * 24, health_add: [20,40], ammo_add: [0.2, 0.4], viols_add: [10,20] }
      );
	  // pod ruiną
	  level.define_dropping_point( 313, 207,
        37 * 24,
        { ammo: 0.0, health: 0.3, viols: 0.05, ttl: 15 * 24, health_add: [10,20], ammo_add: [0.2, 0.4], viols_add: [10,20] }
      );
	  
      // definiujemy nagrody
      // define_prizes( { "Klucz_itemu_1": liczba, "Klucz_itemu_2": liczba, ..., "Klucz_itemu_6": liczba } )
      level.define_prizes( {
        //"Naboje pistoletowe-samoróbki": 2,
        //"Korsarski kordelas": 1,
		//"Nowak-3": 1,
      });

      // definiujemy ilość violek nagrody
      level.define_violki_prize(300);
    }
  );

  // >>>>>>>>>>
  // LEVEL 3 >>
  // >>>>>>>>>>
  
  // <<<<<<<<<<
  // << LEVEL 6
  // <<<<<<<<<<

  
  // tworzmy nowy poziom w nawiazie podajemy jego numer porzadkowy
  var level_6 = levels.define_level(6);
  // nazwa pojawiajaca sie na mapie
  level_6.set_name("level_6_name");
  // lewy dolny rog napisu
  level_6.set_map_position(160, 72);
  // pierwsza linijka opisu poziomu
  level_6.set_desc('level_6_desc');
  level_6.set_previous(5);
  // opisujemy szczegoly mapy poziomu
  level_6.set_level_data(
    function level_data(level) {
      // powtarzamy numer porzadkowy - koniecznie
      level.set_id(6);

      // ustawiamy tlo poziomu
      level.set_background_image ('assets/img/levels/metro_plac_wilsona.png');
      // (opcjonalnie) ustawiamy pierwszy plan poziomu - jest rysowany na tle i na postaciach
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');

      // ustawimy kolejne punkty z ktorych moga startowac boty, w nawiazie podajemy wspolrzedne tych punktow
      // powinny byc poza mapa (lub w miejscu przykrytym pierwszym planem) tak aby gracz nie zobaczyl
      // botow pojawiajacych sie z nikad
      level.define_bot_start_point(140,-15); // góra lewo
      level.define_bot_start_point(365,-15); // góra środek
      level.define_bot_start_point(135,615); // dół lewo
      level.define_bot_start_point(366,615); // dół środek
      level.define_bot_start_point(-15,465); // lewo dół
      level.define_bot_start_point(-15,288); // lewo środek
      level.define_bot_start_point(-15,108); // lewo góra
      level.define_bot_start_point(815,104); // prawo dół
	  level.define_bot_start_point(815,290);// prawo środek
	  level.define_bot_start_point(815,467);// prawo góra
	  
	  level.define_bot_start_point_mark(140, 10, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(365, 10, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(133, 540, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(366, 540, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(10, 465, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(10, 288, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(10, 108, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(740, 104, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(740, 290, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(740, 467, 'assets/img/strzalki/arrow_left.png');

      // gdzie gra bedzie rozmieszczac postacie graczy
      // dla kazdego poziomu musza byc 4 takie punkty, bo kazdy poziom bedzie mozna zagrac
      // majac 4 postacie w druzynie
      level.define_soldier_start_point(467,285);
      level.define_soldier_start_point(467,330);
      level.define_soldier_start_point(515,330);
      level.define_soldier_start_point(515,285);

      // limit jednoczesnie widocznych w grze botow
      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      // Tworzymy siatke poziomu
      var mesh = level.mesh;

	  // zewnętrzne od górnego lewego rogu
	  mesh.define_barrier(-25,18, 82,17);
	  mesh.define_barrier(82,17, 82,-25);
	  mesh.define_barrier(82,-25, 216,-25);
	  mesh.define_barrier(216,-25, 216,17);
	  mesh.define_barrier(216,17, 333,17);
	  mesh.define_barrier(333,17, 333,-25);
	  mesh.define_barrier(333,-25, 400,-25);
	  mesh.define_barrier(400,-25, 400,17);
	  mesh.define_barrier(400,17, 825,17);
	  mesh.define_barrier(825,17, 825,582);
	  mesh.define_barrier(825,582, 405,582);
	  mesh.define_barrier(405,582, 405,625);
	  mesh.define_barrier(405,625, 336,625);
	  mesh.define_barrier(336,625, 336,582);
	  mesh.define_barrier(336,582, 180,582);
	  mesh.define_barrier(180,582, 170,600);
	  mesh.define_barrier(170,600, 170,625);
	  mesh.define_barrier(170,625, 122,625);
	  mesh.define_barrier(122,625, 100,582);
	  mesh.define_barrier(100,582, -25,582);
	  mesh.define_barrier(-25,582, -25,18);
	  
	  // wewnętrzne od lewej 
	  mesh.define_barrier(108,88, 177,88);
	  mesh.define_barrier(177,88, 177,493);
	  mesh.define_barrier(177,493, 108,493);
	  mesh.define_barrier(108,493, 108,88);
	  
	  mesh.define_barrier(235,56, 305,56);
	  mesh.define_barrier(305,56, 305,462);
	  mesh.define_barrier(305,462, 235,462);
	  mesh.define_barrier(235,462, 235,56);
	  
	  mesh.define_barrier(272,115, 443,115);
	  mesh.define_barrier(443,115, 443,520);
	  mesh.define_barrier(443,520, 373,520);
	  mesh.define_barrier(373,520, 272,115);
	  
	  //centralna górna
	  mesh.define_barrier(551,76, 621,76);
	  mesh.define_barrier(621,76, 621,276);
	  mesh.define_barrier(621,276, 551,276);
	  mesh.define_barrier(551,276, 551,76);
	  
	  //centralna dolna
	  mesh.define_barrier(551,372, 621,372);
	  mesh.define_barrier(621,372, 621,532);
	  mesh.define_barrier(621,532, 551,532);
	  mesh.define_barrier(551,532, 551,372);
	
	 // Dialogi w grze, po prostu tablica do kolejnych obrazkóww z rozmowami
     // jesli w poziomie nie ma dialogow nie umieszczac w ogóle
      level.define_speeches( [
          'assets/img/story/03/LANG/d/begining/1/1.jpg',
		  
      ]);
	  // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazkow z rozmowami
      // jesli w poziomie nie ma dialogow nie umieszczac w ogole
      level.define_end_speeches( [
		  'assets/img/story/03/LANG/d/end/1/18.jpg',
		  ]);
		  
		    // Dialogi przed fala, pierwszy parametr - numer fali przed która ma sie pojawić działo, 
			//drugi parametr jak dialogach początkowych
			level.define_wave_speeches( 7 ,
		[
           'assets/img/story/03/LANG/d/mid/1.jpg',
           'assets/img/story/03/LANG/d/mid/2.jpg',
           'assets/img/story/03/LANG/d/mid/3.jpg',
      ]);
	  
	  level.define_tips( [
            'assets/img/story/03/LANG/t/1.jpg',
			'assets/img/story/03/LANG/t/2.jpg',
        ]);
		
		level.define_wave_tips( 7, [
            'assets/img/story/03/LANG/t/3.jpg',
			'assets/img/story/03/LANG/t/4.jpg',
        ]);
		
      level.define_wave( 24 , 
        [
         null,
         null,
         { "Korsarz": 1 },
         { "Korsarz": 1 },
         { "Korsarz": 1 },
         null,
         null,
         null,
		 null,
		 null,
        ],
		1
      );
	  // góra lewo
	  level.define_dropping_point( 24, 48,
        20 * 24,
        { ammo: 0.01, health: 0.15, viols: 0.15, ttl: 15 * 24, health_add: [1,16], ammo_add: [0.2, 0.4], viols_add: [10,80] }
      );
	  // dół lewo
	  level.define_dropping_point( 31, 545,
        23 * 24,
        { ammo: 0.01, health: 0.15, viols: 0.15, ttl: 15 * 24, health_add: [1,16], ammo_add: [0.2, 0.4], viols_add: [10,80] }
      );
	  // pierwsze po lewej na środku
	  level.define_dropping_point( 208, 282,
        26 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [10,80] }
      );
	  // drugie po lewej na środku
	  level.define_dropping_point( 345, 283,
        29 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [10,80] }
      );
	  // środek góra
	  level.define_dropping_point( 492, 193,
        32 * 24,
     { ammo: 0.05, health: 0.2, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [10,80] }
      );
	  // środek dół
	  level.define_dropping_point( 492, 471,
        35 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [10,80] }
      );
	  // prawo góra
	  level.define_dropping_point( 773, 51,
        38 * 24,
        { ammo: 0.05, health: 0.25, viols: 0.25, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.25, 0.4], viols_add: [40,80] }
      );
	  // prawo od górnej bariery
	  level.define_dropping_point( 684, 191,
        41 * 24,
        { ammo: 0.05, health: 0.25, viols: 0.25, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.25, 0.4], viols_add: [40,80] }
      );
	  // prawo od dolnej barierz
	  level.define_dropping_point( 684, 367,
        44 * 24,
        { ammo: 0.05, health: 0.25, viols: 0.25, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.25, 0.4], viols_add: [40,80] }
      );
	  // prawo dół
	  level.define_dropping_point( 777, 543,
        47 * 24,
        { ammo: 0.05, health: 0.25, viols: 0.25, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.25, 0.4], viols_add: [40,80] }
      );
	  
      // definiujemy nagrody
      // define_prizes( { "Klucz_itemu_1": liczba, "Klucz_itemu_2": liczba, ..., "Klucz_itemu_6": liczba } )
      level.define_prizes( {
        //"Naboje pistoletowe-samoróbki": 2,
        //"Korsarski kordelas": 1,
		//"Nowak-3": 1,
      });

      // definiujemy ilość violek nagrody
      level.define_violki_prize(120);
    }
  );
  
  // <<<<<<<<<<
  // << REPLAY LEVEL 0
  // <<<<<<<<<<

  // tworzmy nowy poziom w nawiazie podajemy jego numer porządkowy
  var replay_level_0 = levels.define_replay_level(0);
  // nazwa pojawiajaca sie na mapie
  replay_level_0.set_name("replay_level_0_name");
  // lewy dolny rog napisu
  replay_level_0.set_map_position(135, 20);
  // prawy górny róg klikany - aby wybrać poziom trzeba bedzie kliknąć między
  // wyżej zdefiniowanym lewym dolnym rogiem a niżej definiowanym prawym górnym
  // pierwsza linijka opisu poziomu
  replay_level_0.set_desc('replay_level_0_desc');
  

  // opisujemy szczegóły mapy poziomu
  replay_level_0.set_level_data(
    function level_data(level) {
      // powtarzamy numer porządkowy - koniecznie
      level.set_id(0);

      // ustawiamy tło poziomu
      level.set_background_image ('assets/img/levels/gdynska_plaza.png');
      // (opcjonalnie) ustawiamy pierwszy plan poziomu - jest rysowany na tle i na postaciach
      // level.set_foreground_image ('assets/img/levels/replay_level_0_foreground.png');
      
      // ustawimy kolejne punkty z ktorych moga startowac boty, w nawiazie podajemy wspolrzedne tych punktow
      // powinny byc poza mapa (lub w miejscu przykrytym pierwszym planem) tak aby gracz nie zobaczyl
      // botow pojawiajacych sie z nikad
      // PUNKTY STARTOWE MUSZA WYPADAC W DOSTEPNEJ PRZESTRZENI DLA BOTOW - inaczej boty sie nie pojawia
      level.define_bot_start_point(300,-10);
	  level.define_bot_start_point(300,-10);
	  level.define_bot_start_point(300,-10);
	  level.define_bot_start_point(300,-10);
	  level.define_bot_start_point(300,-10);
	  level.define_bot_start_point(300,-10);
      level.define_bot_start_point(812,353);
	  level.define_bot_start_point(812,353);
	  level.define_bot_start_point(812,353);
	  level.define_bot_start_point(812,353);
	  level.define_bot_start_point(812,353);
	  level.define_bot_start_point(812,353);

      level.define_bot_start_point_mark(300, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(300, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(300, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(300, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(300, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(300, 5, 'assets/img/strzalki/arrow_down.png');
      level.define_bot_start_point_mark(739, 345, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(739, 345, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(739, 345, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(739, 345, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(739, 345, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(739, 345, 'assets/img/strzalki/arrow_left.png');

      // gdzie gra bedzie rozmieszczać postacie graczy
      // dla kazdego poziomu musza byc 4 takie punkty, bo kazdy poziom bedzie mozna zagrac
      // majac 4 postacie w druzynie
      level.define_soldier_start_point(229,398);
      level.define_soldier_start_point(278,398);
      level.define_soldier_start_point(229,352);
      level.define_soldier_start_point(278,352);

      // limit jednoczesnie widocznych w grze botow
      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      // Tworzymy siatke poziomu
      var mesh = level.mesh;

     // definiujemy przeszkody(sciany) uniemozliwiajace przejscie
      // define_barrier( x0, y0, x1, y1);
      mesh.define_barrier(54,23, 207,21);
      mesh.define_barrier(207,21, 257,-20);
      mesh.define_barrier(257,-20, 341,-20);
      mesh.define_barrier(341,-20, 459,42);
      mesh.define_barrier(459,42, 525,61);
      mesh.define_barrier(525,61, 651,61);
      mesh.define_barrier(651,61, 651,92);
      mesh.define_barrier(651,92, 736,92);
      mesh.define_barrier(736,92, 736,132);
      mesh.define_barrier(736,132, 692,140);
      mesh.define_barrier(692,140, 690,328);
      mesh.define_barrier(690,328, 820,328);
      mesh.define_barrier(820,328, 820,380);
      mesh.define_barrier(820,380, 770,380);
      mesh.define_barrier(770,380, 740,402);
      mesh.define_barrier(740,402, 714,572);
      mesh.define_barrier(714,572, 575,547);
      mesh.define_barrier(575,547, 397,582);
      mesh.define_barrier(397,582, 358,520);
      mesh.define_barrier(358,520, 252,576);
      mesh.define_barrier(252,576, 54,576);
      mesh.define_barrier(54,576, 54,23);
	  mesh.define_barrier(521,122, 485,222);
	  mesh.define_barrier(485,222, 590,222);
	  mesh.define_barrier(590,222, 597,185);
	  mesh.define_barrier(597,185, 623,168);
	  mesh.define_barrier(623,168, 593,116);
	  mesh.define_barrier(593,116, 521,122);
	  mesh.define_barrier(209,432, 209,498);
	  mesh.define_barrier(209,498, 302,498);
	  mesh.define_barrier(302,498, 302,432);
	  mesh.define_barrier(302,432, 209,432);
	  mesh.define_barrier(282,127, 267,179);
	  mesh.define_barrier(267,179, 231,211);
	  mesh.define_barrier(231,211, 233,211);
	  mesh.define_barrier(233,211, 243,269);
	  mesh.define_barrier(243,269, 288,272);
	  mesh.define_barrier(288,272, 312,252);
	  mesh.define_barrier(312,252, 365,272);
	  mesh.define_barrier(365,272, 393,206);
	  mesh.define_barrier(393,206, 282,127);

        // definiujemy sciany, uniemozliwiajace strzelanie przez przeszkody
        // define_wall( x0, y0, x1, y1 )
        mesh.define_wall(520,122, 620,168);
        mesh.define_wall(506,178, 592,117);
		mesh.define_wall(209,432, 302,498);
		mesh.define_wall(302,432, 209,498);
		mesh.define_wall(282,127, 365,272);
		mesh.define_wall(243,269, 393,206);
      

      // wave'y
      // dwa wave'y nie moga zdarzyc sie w tej samej klatce
      // w fali musi byc po rekordzie na kazdy punkt startowy - jesli boty maja stamtad nie wychodzi
      // nalezy wpisac pusta tablice
      // define_wave( numer_klatki, 
      //   [
      //     { "Kreatura_A": liczebność, "Kreatura_B": liczebność, ..., "Kreatura_Z": liczebność }, // kolejne elementy tablicy
      //     { "Kreature_A": liczebność, "Kreatura_B": liczebność } // to kolejne punkty startowe
      //     {}, // pusta tablica jeśli z punktu nie ma nikt wychodzić
      //   ]
      // )
      // z pierwsze punktu szczury, z drugiego mutanty
      level.define_wave( 2 * 24 , 
          [
            { "Szczur": { no: 2, x: 90, y: 325, r: 100 } },
            null,
            null,
			null,
            null,
            { "Szczur": { no: 1, x: 510, y: 325, r: 100 } },
			null,
			null,
			null,
			null,
			null,
			null,
          ],
          1
		  // Ilość botów w fali: 2
        );
        level.define_wave( 8 * 24 , 
          [
            { "Szczur": { no: 1, x: 100, y: 325, r: 100 } },
            null,
            null,
			{ "Szczur": { no: 2, x: 450, y: 325, r: 100 } },
            { "Szczur": { no: 2, x: 520, y: 325, r: 100 } },
            { "Szczur": { no: 2, x: 560, y: 325, r: 100 } },
			null,
			null,
			null,
			null,
			null,
			null,
          ],
          4 * 24
		  // Ilość botów w fali: 5
        );
        level.define_wave( 22 * 24 , 
          [
            { "Szczur": { no: 2, x: 100, y: 325, r: 100 } },
            { "Szczur": { no: 1, x: 40, y: 325, r: 100 } },
            { "Szczur": { no: 1, x: 200, y: 325, r: 100 } },
			null,
            null,
            { "Szczur": { no: 2, x: 560, y: 325, r: 100 } }, // koniec góry
		    null, // koniec dołu
            null,
            null,
			null,
            { "Szczur": { no: 2, x: 340, y: 480, r: 100 } },
            { "Szczur": { no: 2, x: 410, y: 500, r: 100 } },
          ],
          18 * 24
		  // Ilość botów w fali: 7
        );
        level.define_wave( 45 * 24 ,  
          [
            { "Szczur": { no: 1, x: 90, y: 325, r: 100 } },
            { "Szczur": { no: 1, x: 130, y: 325, r: 100 } },
            null,
			{ "Szczur": { no: 2, x: 450, y: 325, r: 100 } },
            { "Szczur": { no: 1, x: 500, y: 325, r: 100 } },
            { "Szczur": { no: 1, x: 550, y: 325, r: 100 } },
			{ "Szczur": { no: 2, x: 428, y: 125, r: 100 } },
            { "Szczur": { no: 1, x: 350, y: 125, r: 100 } },
            null,
			null,
            { "Szczur": { no: 1, x: 360, y: 480, r: 100 } },
            { "Szczur": { no: 2, x: 410, y: 500, r: 100 } },
          ],
          40 * 24
		  // Ilość botów w fali: 9
        );
		level.define_wave( 75 * 24 ,  
          [
            { "Szczur": { no: 2, x: 90, y: 325, r: 100 } },
            { "Szczur": { no: 1, x: 130, y: 325, r: 100 } },
            { "Szczur": { no: 1, x: 200, y: 325, r: 100 } },
			{ "Szczur": { no: 1, x: 450, y: 325, r: 100 } },
            { "Szczur": { no: 2, x: 500, y: 325, r: 100 } },
            null,
			null,
            { "Szczur": { no: 1, x: 350, y: 125, r: 100 } },
            { "Szczur": { no: 1, x: 150, y: 360, r: 100 } },
			{ "Szczur": { no: 1, x: 110, y: 320, r: 100 } },
            { "Szczur": { no: 1, x: 360, y: 480, r: 100 } },
            { "Szczur": { no: 2, x: 410, y: 500, r: 100 } },
          ],
          70 * 24
		  // Ilość botów w fali: 12
        );
		level.define_wave( 100 * 24 ,  
          [
            { "Szczur": { no: 2, x: 90, y: 325, r: 100 } },
            { "Szczur": { no: 1, x: 130, y: 325, r: 100 } },
            { "Szczur": { no: 2, x: 200, y: 325, r: 100 } },
			{ "Szczur": { no: 1, x: 450, y: 325, r: 100 } },
            { "Szczur": { no: 2, x: 500, y: 325, r: 100 } },
            { "Szczur": { no: 1, x: 550, y: 325, r: 100 } },
			{ "Szczur": { no: 2, x: 428, y: 125, r: 100 } },
            { "Szczur": { no: 1, x: 350, y: 125, r: 100 } },
            { "Szczur": { no: 2, x: 150, y: 360, r: 100 } },
			{ "Szczur": { no: 1, x: 110, y: 320, r: 100 } },
            { "Szczur": { no: 2, x: 360, y: 480, r: 100 } },
            { "Szczur": { no: 1, x: 410, y: 500, r: 100 } },
          ],
          105 * 24
		  // Ilość botów w fali: 18
        );

      // definiujemy nagrody
      // define_prizes( { "Klucz_itemu_1": liczba, "Klucz_itemu_2": liczba, ..., "Klucz_itemu_6": liczba } )
      level.define_prizes( {
      });

      // Dialogi w grze, po prostu tablica do kolejnych obrazkow z rozmowami
      // jesli w poziomie nie ma dialogow nie umieszczac w ogole
      level.define_speeches( [
          'assets/img/story/00/LANG/d/begining/2/1.jpg',
          'assets/img/story/00/LANG/d/begining/2/2.jpg',
          'assets/img/story/00/LANG/d/begining/2/3.jpg',
      ]);

      // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazkow z rozmowami
      // jesli w poziomie nie ma dialogow nie umieszczac w ogole
      level.define_end_speeches( [
          'assets/img/story/00/LANG/d/end/2/1.jpg',
      ]);

      // Tipsy w grze, po prostu tablica do kolejnych obrazkow z tipami
      // jesli w poziomie nie ma tipow nie umieszczac w ogole
      //level.define_tips( [
        //  'assets/img/levels/tip_0_1.png',
        //  'assets/img/levels/tip_0_2.png',
      //]);

      // Definiowane stałego punktu wypadajek
      // ( wspolrzedna x, wspolrzedna y,
      // interwal wypadania,
      // definicja wypadajek - jak w kreaturach );
       // prawy górny róg
		// prawy górny róg
      level.define_dropping_point( 687, 125,
          5 * 24,
          { ammo: 0.00, health: 0.25, viols: 0.2, ttl: 40 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [5,15] }
        );
      // prawy dolny róg
      level.define_dropping_point( 652, 498,
          8 * 24,
          { ammo: 0.00, health: 0.25, viols: 0.2, ttl: 43 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [5,15] }
        );
      // dolny środek
      level.define_dropping_point( 357, 504,
          11 * 24,
          { ammo: 0.00, health: 0.25, viols: 0.2, ttl: 46 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [5,15] }
        );
      // lewy dolny róg
      level.define_dropping_point( 126, 512,
          14 * 24,
          { ammo: 0.00, health: 0.25, viols: 0.2, ttl: 49 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [5,15] }
        );
          // lewy górny róg
      level.define_dropping_point( 98, 142,
          17 * 24,
          { ammo: 0.00, health: 0.25, viols: 0.2, ttl: 52 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [5,15] }
        );
      // lewy górny róg namiotu
      level.define_dropping_point( 196, 330,
          20 * 24,
          { ammo: 0.00, health: 0.25, viols: 0.2, ttl: 55 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [5,15] }
        );
      // przy kościach
      level.define_dropping_point( 496, 347,
          23 * 24,
          { ammo: 0.00, health: 0.25, viols: 0.2, ttl: 58 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [5,15] }
        );
      // pod parsolem
      level.define_dropping_point( 324, 286,
          26 * 24,
          { ammo: 0.00, health: 0.25, viols: 0.2, ttl: 61 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [5,15] }
        );	  
      // pod beczkami
      level.define_dropping_point( 552, 249,
          29 * 24,
          { ammo: 0.00, health: 0.25, viols: 0.2, ttl: 64 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [5,15] }
        );
      // nad parasolem
      level.define_dropping_point( 244, 160,
          32 * 24,
          { ammo: 0.00, health: 0.25, viols: 0.2, ttl: 67 * 24, health_add: [5,10], ammo_add: [0.1, 0.25], viols_add: [5,15] }
        );

      // definiujemy ilość violek nagrody
      level.define_violki_prize(120);
    }
  );

  // >>>>>>>>>>
  // REPLAY LEVEL 0 >>
  // >>>>>>>>>>
  
   // <<<<<<<<<<
  // <<REPLAY LEVEL 1
  // <<<<<<<<<<

  var replay_level_1 = levels.define_replay_level(1);
  replay_level_1.set_name('replay_level_1_name');
  replay_level_1.set_map_position(142, 46);
  replay_level_1.set_desc('replay_level_1_desc');
  replay_level_1.set_previous(1);

  replay_level_1.set_level_data(
    function level_data(level) {
      level.set_id(1);

      level.set_background_image ('assets/img/levels/sopocka_ulica.png');
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');

      // id - karta postaci, liczona od zera
      // nawa postaci z pliku soldiers.js
      // opcjonalnie zalozona bron
      // opcjonalnie zalozony armour
      // 4 * opcjonalnie item w plecaku
      //level.add_survivor(1, "Wojownik", "Gdański trójząb", "Skórzana kurtka", "Postapokaliptyczny zestaw opatrunkowy", "Postapokaliptyczny zestaw opatrunkowy" );

      level.define_bot_start_point(819,55);
	  level.define_bot_start_point(819,75);
      level.define_bot_start_point(819,296);
	  level.define_bot_start_point(819,316);
      level.define_bot_start_point(819,515);
	  level.define_bot_start_point(819,535);
      level.define_bot_start_point(315,624);
	  level.define_bot_start_point(315,624);
	  level.define_bot_start_point(315,624);
      level.define_bot_start_point(-15,93);
	  level.define_bot_start_point(-15,93);
	  level.define_bot_start_point(-15,93);

      level.define_bot_start_point_mark(745, 55, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(745, 55, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 296, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(745, 296, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 515, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(745, 515, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(330, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(330, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(330, 545, 'assets/img/strzalki/arrow_up.png');
      level.define_bot_start_point_mark(5, 90, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 90, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 90, 'assets/img/strzalki/arrow_right.png');

      level.define_soldier_start_point(660,250); // było (694,100)
      level.define_soldier_start_point(660,340); // było (646,100)
      level.define_soldier_start_point(700,250); // było (385,100)
      level.define_soldier_start_point(700,370); // było (330,100)

      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      var mesh = level.mesh;

	  mesh.define_barrier(835,44, 835,564);
	  mesh.define_barrier(835,564, 416,564);
	  mesh.define_barrier(416,564, 342,645);
	  mesh.define_barrier(342,645, 308,645);
	  mesh.define_barrier(308,645, 278,554);
	  mesh.define_barrier(278,554, 160,554);
	  mesh.define_barrier(160,554, 210,433);
	  mesh.define_barrier(210,433, 140,350);
	  mesh.define_barrier(140,350, 184,301);
	  mesh.define_barrier(184,301, 159,280);
	  mesh.define_barrier(159,280, 100,280);
	  mesh.define_barrier(100,280, 142,236);
	  mesh.define_barrier(142,236, 30,142);
	  mesh.define_barrier(30,142, -40,142);
	  mesh.define_barrier(-40,142, -40,34);
	  mesh.define_barrier(-40,34, 835,34);
	  mesh.define_barrier(490,154, 446,301);
	  mesh.define_barrier(446,301, 508,418);
	  mesh.define_barrier(508,418, 460,452);
	  mesh.define_barrier(460,452, 486,516);
	  mesh.define_barrier(486,516, 554,472);
	  mesh.define_barrier(562,131, 512,82);
	  mesh.define_barrier(512,82, 484,110);
	  mesh.define_barrier(484,110, 528,160);
	  mesh.define_barrier(528,160, 490,154);
	  mesh.define_barrier(562,131, 648,252);
	  mesh.define_barrier(554,472, 648,252);
	  
	  mesh.define_wall(140,350, 184,301);
	  mesh.define_wall(142,236, 30,142);
	  mesh.define_wall(490,154, 508,418);
	  mesh.define_wall(596,182, 446,301);
	  mesh.define_wall(140,350, 210,433);
	  
     // Dialogi w grze, po prostu tablica do kolejnych obrazkóww z rozmowami
     // jesli w poziomie nie ma dialogow nie umieszczac w ogóle
      level.define_speeches( [
          'assets/img/story/01/LANG/d/begining/2/1.jpg',
          'assets/img/story/01/LANG/d/begining/2/2.jpg',
          'assets/img/story/01/LANG/d/begining/2/3.jpg',
		  'assets/img/story/01/LANG/d/begining/2/4.jpg',
		 
      ]);
	  // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazkow z rozmowami
      // jesli w poziomie nie ma dialogow nie umieszczac w ogole
      level.define_end_speeches( [
          'assets/img/story/01/LANG/d/end/2/1.jpg',
		  
      ]);
		  
      // wave'y
      // dwa wave'y nie moga zdarzyc sie w tej samej klatce
	   level.define_wave( 24 * 5 ,
        [
          { "Mutant": { no: 3, x: 240, y: 67, r: 50 } },
		  { "Mutant": { no: 3, x: 240, y: 67, r: 50 } },
		  null,
		  { "Ślepy Mutant": { no: 1, x: 690, y: 280, r: 40 } },
		  { "Mutant": { no: 3, x: 300, y: 500, r: 50 } },
		  { "Mutant": { no: 3, x: 300, y: 530, r: 50 } },
		  null,
		  null,
		  null,
		  null,
		  null,
		  null,
        ],
        24 * 1
      );
	  level.define_wave( 24 * 25 ,
        [
          { "Mutant": { no: 4, x: 240, y: 67, r: 50 } },
		  { "Mutant": { no: 3, x: 240, y: 100, r: 50 } },
		  { "Ślepy Mutant": { no: 1, x: 680, y: 270, r: 40 } },
		  { "Ślepy Mutant": { no: 2, x: 690, y: 280, r: 40 } },
		  { "Mutant": { no: 4, x: 300, y: 500, r: 50 } },
		  { "Mutant": { no: 3, x: 300, y: 530, r: 50 } },
		  null,
		  null,
		  null,
		  null,
		  null,
		  null,
		],
        24 * 20
      );
	  level.define_wave( 24 * 50 ,
        [
          { "Mutant": { no: 3, x: 240, y: 67, r: 50 } },
		  { "Mutant": { no: 3, x: 240, y: 100, r: 50 } },
		  { "Ślepy Mutant": { no: 2, x: 680, y: 270, r: 40 } },
		  { "Ślepy Mutant": { no: 2, x: 690, y: 280, r: 40 } },
		  { "Mutant": { no: 3, x: 300, y: 500, r: 50 } },
		  { "Mutant": { no: 3, x: 300, y: 530, r: 50 } },
		  null,
		  null,
		  null,
		  { "Mutant": { no: 3, x: 765, y: 60, r: 50 } }, // lewo góra
		  null,
		  null,
		],
        24 * 45
      );
	  level.define_wave( 24 * 95 ,
        [
          null,
		  null,
		  { "Ślepy Mutant": { no: 1, x: 680, y: 270, r: 40 } },
		  { "Ślepy Mutant": { no: 1, x: 690, y: 280, r: 40 } },
		  { "Mutant": { no: 3, x: 240, y: 520, r: 50 } }, // prawo dół
		  { "Mutant": { no: 3, x: 240, y: 550, r: 50 } }, // prawo dół
		  null,
		  null,
		  null,
		  { "Mutant": { no: 3, x: 765, y: 60, r: 50 } }, // lewo góra
		  { "Mutant": { no: 3, x: 290, y: 484, r: 50 } }, // lewo góra
		  { "Mutant": { no: 3, x: 434, y: 255, r: 50 } }, // lewo góra
		],
        24 * 90
      );
	  level.define_wave( 24 * 135 ,
        [
          { "Mutant": { no: 3, x: 240, y: 67, r: 50 } }, // prawo góra
		  { "Mutant": { no: 3, x: 240, y: 100, r: 50 } }, // prawo góra 
		  { "Ślepy Mutant": { no: 1, x: 680, y: 270, r: 40 } },
		  { "Ślepy Mutant": { no: 1, x: 690, y: 280, r: 40 } },
		  null,
		  null,
		  { "Mutant": { no: 2, x: 172, y: 198, r: 50 } }, // dół
		  { "Mutant": { no: 3, x: 280, y: 75, r: 50 } }, // dół
		  { "Mutant": { no: 2, x: 455, y: 225, r: 50 } }, // dół
		  null,
		  null,
		  { "Mutant": { no: 3, x: 434, y: 255, r: 50 } }, // lewo góra
		],
        24 * 130
      );
	  level.define_wave( 24 * 190 ,
        [
          { "Mutant": { no: 3, x: 240, y: 67, r: 50 } }, // prawo góra
		  { "Mutant": { no: 3, x: 240, y: 100, r: 50 } }, // prawo góra 
		  { "Ślepy Mutant": { no: 2, x: 690, y: 280, r: 50 } }, // prawo środek
		  { "Ślepy Mutant": { no: 2, x: 690, y: 280, r: 50 } }, // prawo środek
		  null,
		  null,
		  null,
		  { "Mutant": { no: 3, x: 280, y: 75, r: 50 } }, // dół
		  { "Mutant": { no: 3, x: 455, y: 225, r: 50 } }, // dół
		  null,
		  { "Mutant": { no: 3, x: 290, y: 484, r: 50 } }, // lewo góra
		  { "Mutant": { no: 3, x: 434, y: 255, r: 50 } }, // lewo góra
		],
        24 * 185
      );
	  level.define_wave( 24 * 250 ,
        [
          { "Mutant": { no: 2, x: 240, y: 67, r: 50 } }, // prawo góra
		  { "Mutant": { no: 2, x: 240, y: 100, r: 50 } }, // prawo góra 
		  null,
		  null,
		  null,
		  null,
		  { "Mutant": { no: 2, x: 172, y: 198, r: 50 } }, // dół
		  { "Mutant": { no: 2, x: 280, y: 75, r: 50 } }, // dół
		  { "Mutant": { no: 2, x: 455, y: 225, r: 50 } }, // dół
		  { "Mutant": { no: 2, x: 765, y: 60, r: 50 } }, // lewo góra
		  { "Mutant": { no: 2, x: 290, y: 484, r: 50 } }, // lewo góra
		  { "Mutant": { no: 2, x: 434, y: 255, r: 50 } }, // lewo góra
		],
        24 * 245
      );
	  level.define_wave( 24 * 310 ,
        [
          { "Mutant": { no: 2, x: 240, y: 67, r: 50 } }, // prawo góra
		  { "Mutant": { no: 3, x: 240, y: 100, r: 50 } }, // prawo góra 
		  { "Mutant": { no: 2, x: 690, y: 515, r: 55 } }, // prawo środek
		  { "Mutant": { no: 3, x: 690, y: 530, r: 524 } }, // prawo środek
		  { "Mutant": { no: 2, x: 240, y: 520, r: 50 } }, // prawo dół
		  { "Mutant": { no: 3, x: 240, y: 550, r: 50 } }, // prawo dół
		  { "Mutant": { no: 2, x: 172, y: 198, r: 50 } }, // dół
		  { "Mutant": { no: 3, x: 280, y: 75, r: 50 } }, // dół
		  { "Mutant": { no: 2, x: 455, y: 225, r: 50 } }, // dół
		  { "Mutant": { no: 3, x: 765, y: 60, r: 50 } }, // lewo góra
		  { "Mutant": { no: 2, x: 290, y: 484, r: 50 } }, // lewo góra
		  { "Mutant": { no: 3, x: 434, y: 255, r: 50 } }, // lewo góra
		],
        24 * 305
      );
	 
	 // prawy górny róg
	  level.define_dropping_point( 700, 154,
        10 * 24,
        { ammo: 0.00, health: 0.20, viols: 0.15, ttl: 15 * 24, health_add: [10,20], ammo_add: [0.1, 0.2], viols_add: [5,20] }
      );
	  // prawo środek
	  level.define_dropping_point( 700, 278,
        13 * 24,
        { ammo: 0.00, health: 0.00, viols: 0.4, ttl: 35 * 24, health_add: [10,20], ammo_add: [0.1, 0.2], viols_add: [20,40] }
      );
	  // prawo środek kawałek niżej
	  level.define_dropping_point( 700, 308,
        13 * 24,
        { ammo: 0.00, health: 0.25, viols: 0.0, ttl: 35 * 24, health_add: [16,32], ammo_add: [0.1, 0.2], viols_add: [20,40] }
      );
	  // prawo dolny róg
	  level.define_dropping_point( 700, 456,
        16 * 24,
        { ammo: 0.00, health: 0.20, viols: 0.15, ttl: 15 * 24, health_add: [10,20], ammo_add: [0.1, 0.2], viols_add: [5,20] }
      );
	    // dolne wejście
	  level.define_dropping_point( 331, 548,
        19 * 24,
        { ammo: 0.00, health: 0.4, viols: 0.10, ttl: 15 * 24, health_add: [16,32], ammo_add: [0.1, 0.2], viols_add: [5,20] }
      );
	  // na lewo od ciężarówki
	  level.define_dropping_point( 431, 340,
        22 * 24,
        { ammo: 0.0, health: 0.4, viols: 0.05, ttl: 15 * 24, health_add: [16,32], ammo_add: [0.1, 0.2], viols_add: [5,20] }
      );
	  // góra na środku
	  level.define_dropping_point( 325, 91,
        25 * 24,
        { ammo: 0.00, health: 0.4, viols: 0.10, ttl: 15 * 24, health_add: [16,32], ammo_add: [0.1, 0.2], viols_add: [5,20] }
      );
	  // lewy dolny róg
	  level.define_dropping_point( 206, 528,
        28 * 24,
        { ammo: 0.00, health: 0.15, viols: 0.15, ttl: 15 * 24, health_add: [10,20], ammo_add: [0.1, 0.2], viols_add: [5,20] }
      );
	  // pod niebieskim samochodem
	  level.define_dropping_point( 164, 352,
        31 * 24,
        { ammo: 0.00, health: 0.2, viols: 0.10, ttl: 15 * 24, health_add: [10,20], ammo_add: [0.1, 0.25], viols_add: [5,20] }
      );
	  // nad niebieskim samochodem
	  level.define_dropping_point( 139, 266,
        34 * 24,
        { ammo: 0.00, health: 0.15, viols: 0.15, ttl: 15 * 24, health_add: [10,20], ammo_add: [0.1, 0.25], viols_add: [5,20] }
      );
	  // lewy górny róg
	  level.define_dropping_point( 132, 149,
        37 * 24,
        { ammo: 0.00, health: 0.15, viols: 0.15, ttl: 15 * 24, health_add: [10,20], ammo_add: [0.1, 0.25], viols_add: [5,20] }
      );
	level.define_prizes( {
      });
      level.define_violki_prize(250);
    }
  );

  // >>>>>>>>>>
  // REPLAY LEVEL 1 >>
  // >>>>>>>>>>
  
   // <<<<<<<<<<
  // << REPLAY LEVEL 2
  // <<<<<<<<<<

  // tworzmy nowy poziom w nawiazie podajemy jego numer porzadkowy
  var replay_level_2 = levels.define_replay_level(2);
  // nazwa pojawiajaca sie na mapie
  replay_level_2.set_name("replay_level_2_name");
  // lewy dolny rog napisu
  replay_level_2.set_map_position(172, 41);
  // pierwsza linijka opisu poziomu
  replay_level_2.set_desc('replay_level_2_desc');
  replay_level_2.set_previous(2);
  // opisujemy szczegoly mapy poziomu
  replay_level_2.set_level_data(
    function level_data(level) {
      // powtarzamy numer porzadkowy - koniecznie
      level.set_id(2);

      // ustawiamy tlo poziomu
      level.set_background_image ('assets/img/levels/Gdanska_fabryka.png');
      // (opcjonalnie) ustawiamy pierwszy plan poziomu - jest rysowany na tle i na postaciach
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');

      // ustawimy kolejne punkty z ktorych moga startowac boty, w nawiazie podajemy wspolrzedne tych punktow
      // powinny byc poza mapa (lub w miejscu przykrytym pierwszym planem) tak aby gracz nie zobaczyl
      // botow pojawiajacych sie z nikad
      level.define_bot_start_point(370,-13);
	  level.define_bot_start_point(370,618);
	  
	  level.define_bot_start_point_mark( 370, 10, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(370, 550, 'assets/img/strzalki/arrow_up.png');

      // gdzie gra bedzie rozmieszczac postacie graczy
      // dla kazdego poziomu musza byc 4 takie punkty, bo kazdy poziom bedzie mozna zagrac
      // majac 4 postacie w druzynie
      level.define_soldier_start_point(379,388);
      level.define_soldier_start_point(448,388);
      level.define_soldier_start_point(379,439);
      level.define_soldier_start_point(448,439);

      // limit jednoczesnie widocznych w grze botow
      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      // Tworzymy siatke poziomu
      var mesh = level.mesh;

	  mesh.define_barrier(20,20, 277,20);
	  mesh.define_barrier(277,20, 277,-40);
	  mesh.define_barrier(277,-40, 520,-40);
	  mesh.define_barrier(520,-40, 520,20);
	  mesh.define_barrier(520,20, 780,20);
	  mesh.define_barrier(780,20, 780,580);
	  mesh.define_barrier(780,580, 638,580);
	  mesh.define_barrier(638,580, 674,509);
	  mesh.define_barrier(674,509, 674,475);
	  mesh.define_barrier(674,475, 652,457);
	  mesh.define_barrier(652,475, 652,413);
	  mesh.define_barrier(652,413, 602,366);
	  mesh.define_barrier(602,366, 559,366);
	  mesh.define_barrier(559,366, 559,471);
	  mesh.define_barrier(559, 471, 540,488);
	  mesh.define_barrier(540,488, 540,580);
	  mesh.define_barrier(540,580, 470,580);
	  mesh.define_barrier(470,580, 470,650);
	  mesh.define_barrier(470,650, 342,650);
	  mesh.define_barrier(342,650, 342,580);
	  mesh.define_barrier(342,580, 20,580);
	  mesh.define_barrier(20,580, 20,20);
	  mesh.define_barrier(160,92, 242,92);
	  mesh.define_barrier(242,92, 242,122);
	  mesh.define_barrier(242,122, 294,146);
	  mesh.define_barrier(294,146, 294,440);
	  mesh.define_barrier(294,440, 216,440);
	  mesh.define_barrier(216,440, 216,521);
	  mesh.define_barrier(216,521, 160,521);
	  mesh.define_barrier(160,521, 160,92);
	  mesh.define_barrier(446,264, 446,328);
	  mesh.define_barrier(446,328, 380,328);
	  mesh.define_barrier(380,328, 380,264);
	  mesh.define_barrier(380,264, 446,264);
	  mesh.define_barrier(566,92, 584,92);
	  mesh.define_barrier(584,92, 652,154);
	  mesh.define_barrier(652,154, 652,255);
	  mesh.define_barrier(652,255, 604,255);
	  mesh.define_barrier(604,255, 533,220);
	  mesh.define_barrier(533,220, 533,136);
	  mesh.define_barrier(533,136, 566,92);
	  
	  mesh.define_wall(533,136, 652,255);
	  mesh.define_wall(533,220, 652,154);
	  mesh.define_wall(559,366, 638,579);
	  mesh.define_wall(380,264, 446,328);
	  mesh.define_wall(446,264, 380,328);
	  mesh.define_wall(160,521, 294,146);
	  mesh.define_wall(160,92, 294,440);
	  mesh.define_wall(559,471, 652,413);

	  // Dialogi w grze, po prostu tablica do kolejnych obrazkóww z rozmowami
     // jesli w poziomie nie ma dialogow nie umieszczac w ogóle
      level.define_speeches( [
          'assets/img/story/02/LANG/d/begining/2/1.jpg',
          'assets/img/story/02/LANG/d/begining/2/2.jpg',
		 
      ]);
	  // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazkow z rozmowami
      // jesli w poziomie nie ma dialogow nie umieszczac w ogole
      level.define_end_speeches( [
          'assets/img/story/02/LANG/d/end/2/1.jpg',
		  'assets/img/story/02/LANG/d/end/2/2.jpg',
      ]);
	  
      // wave'y
      // dwa wave'y nie moga zdarzyc sie w tej samej klatce
      level.define_wave( 24 * 5, 
        [
          { "Korsarz": 3 },
          null,
        ],
		1
      );
	  level.define_wave( 24 * 15, 
        [
          { "Korsarz": 4 },
          { "Mutant": 8 },
        ],
		24 * 10
      );
	  level.define_wave( 24 * 50, 
        [
          { "Korsarz": 4 },
          { "Mutant": 10 },
        ],
		24 * 45
      );
	  level.define_wave( 24 * 80, 
        [
          { "Korsarz": 4 },
          { "Mutant": 10 },
        ],
		24 * 75
      );
	  level.define_wave( 24 * 120, 
        [
          { "Korsarz": 7 },
          null,
        ],
		24 * 115
      );
	  
	  // prawy górny róg przy górnym gruzie
	  level.define_dropping_point( 652, 107,
        20 * 24,
        { ammo: 0.15, health: 0.20, viols: 0.00, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.35], viols_add: [10,40] }
      );
	  // międzygruzie
	  level.define_dropping_point( 630, 318,
        23 * 24,
        { ammo: 0.15, health: 0.20, viols: 0.00, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.35], viols_add: [10,40] }
      );
	  // prawy dolny róg
	  level.define_dropping_point( 732, 517,
        26 * 24,
        { ammo: 0.15, health: 0.20, viols: 0.00, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.35], viols_add: [10,40] }
      );
	   // lewy górny róg
	  level.define_dropping_point( 58, 56,
        29 * 24,
        { ammo: 0.15, health: 0.20, viols: 0.00, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.35], viols_add: [10,40] }
      );
	  // na lewo od maszyny
	  level.define_dropping_point( 58, 355,
        32 * 24,
        { ammo: 0.15, health: 0.20, viols: 0.00, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.35], viols_add: [10,40] }
      );
	  // na lewo od dolnego gruzu
	  level.define_dropping_point( 482, 404,
        35 * 24,
        { ammo: 0.05, health: 0.05, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.35], viols_add: [10,40] }
      );
	  // prawy dolny róg maszyny
	  level.define_dropping_point( 253, 486,
        38 * 24,
        { ammo: 0.05, health: 0.05, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.35], viols_add: [10,40] }
      );
	  // między maszyną a filarem
	  level.define_dropping_point( 340, 298,
        41 * 24,
        { ammo: 0.05, health: 0.05, viols: 0.25, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.35], viols_add: [10,40] }
      );
	  // pod drzwiami
	  level.define_dropping_point( 438, 170,
        44 * 24,
        { ammo: 0.05, health: 0.05, viols: 0.20, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.35], viols_add: [10,40] }
      );
	  // prawy górny róg maszyny
	  level.define_dropping_point( 303, 107,
        47 * 24,
        { ammo: 0.05, health: 0.05, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.35], viols_add: [10,40] }
      );

      // definiujemy nagrody
      // define_prizes( { "Klucz_itemu_1": liczba, "Klucz_itemu_2": liczba, ..., "Klucz_itemu_6": liczba } )
      level.define_prizes( {
        // "Pojemniki z kwasem": 2,
		//"Korsarski kordelas": 1,
      });

      // definiujemy ilosc violek nagrody
      level.define_violki_prize(300);
    }
  );

  // >>>>>>>>>>
  // REPLAY LEVEL 2 >>
  // >>>>>>>>>>
  
   // <<<<<<<<<<
  // << REPLAY LEVEL 3
  // <<<<<<<<<<

  
  // tworzmy nowy poziom w nawiazie podajemy jego numer porzadkowy
  var replay_level_3 = levels.define_replay_level(3);
  // nazwa pojawiajaca sie na mapie
  replay_level_3.set_name("replay_level_3_name");
  // lewy dolny rog napisu
  replay_level_3.set_map_position(160, 72);
  // pierwsza linijka opisu poziomu
  replay_level_3.set_desc('replay_level_3_desc');
  replay_level_3.set_previous(3);
  // opisujemy szczegóły mapy poziomu
  replay_level_3.set_level_data(
    function level_data(level) {
      // powtarzamy numer porzadkowy - koniecznie
      level.set_id(3);

      // ustawiamy tlo poziomu
      level.set_background_image ('assets/img/levels/gdanskie_wybrzeze.png');
      // (opcjonalnie) ustawiamy pierwszy plan poziomu - jest rysowany na tle i na postaciach
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');

      // ustawimy kolejne punkty z ktorych moga startowac boty, w nawiazie podajemy wspolrzedne tych punktow
      // powinny byc poza mapa (lub w miejscu przykrytym pierwszym planem) tak aby gracz nie zobaczyl
      // botow pojawiajacych sie z nikad
      level.define_bot_start_point(585,-20);
      level.define_bot_start_point(327,-20);
      level.define_bot_start_point(-20,100);
      level.define_bot_start_point(-20,307);
      level.define_bot_start_point(-20,489);
      level.define_bot_start_point(135,619);
      level.define_bot_start_point(162,-20);
      level.define_bot_start_point(330,619);
	  
	  level.define_bot_start_point_mark(585, 10, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(327, 10, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(10, 100, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(10, 307, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(10, 489, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(135, 541, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(162, 10, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(330, 541, 'assets/img/strzalki/arrow_up.png');

      // gdzie gra bedzie rozmieszczać postacie graczy
      // dla kazdego poziomu musza byc 4 takie punkty, bo kazdy poziom bedzie mozna zagrac
      // majac 4 postacie w druzynie
      level.define_soldier_start_point(542,284);
      level.define_soldier_start_point(500,284);
      level.define_soldier_start_point(500,332);
      level.define_soldier_start_point(542,332);

      // limit jednocześnie widocznych w grze botów
      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      // Tworzymy siatke poziomu
      var mesh = level.mesh;

	  mesh.define_barrier(612,-40, 612,201);
	  mesh.define_barrier(612,201, 688,201);
	  mesh.define_barrier(688,201, 688,243);
	  mesh.define_barrier(688,243, 800,243);
	  mesh.define_barrier(800,243, 800,356);
	  mesh.define_barrier(800,356, 612,356);
	  mesh.define_barrier(612,356, 612,412);
	  mesh.define_barrier(612,412, 458,412);
	  mesh.define_barrier(458,412, 368,462);
	  mesh.define_barrier(368,462, 469,650);
	  mesh.define_barrier(469,650, -40,640);
	  mesh.define_barrier(-40,640, -40,-40);
	  mesh.define_barrier(-40,-40, 612,-40);
	  mesh.define_barrier(169,70, 454,70);
	  mesh.define_barrier(454,70, 512,97);
	  mesh.define_barrier(512,97, 564,130);
	  mesh.define_barrier(564,130, 547,166);
	  mesh.define_barrier(547,166, 464,166);
	  mesh.define_barrier(464,166, 431,222);
	  mesh.define_barrier(431,222, 417,222);
	  mesh.define_barrier(417,222, 371,182);
	  mesh.define_barrier(371,182, 296,182);
	  mesh.define_barrier(296,182, 212,256);
	  mesh.define_barrier(212,256, 212,297);
	  mesh.define_barrier(212,297, 188,284);
	  mesh.define_barrier(188,284, 146,242);
	  mesh.define_barrier(146,242, 130,164);
	  mesh.define_barrier(130,164, 166,130);
	  mesh.define_barrier(166,130, 169,70);
	  mesh.define_barrier(66,341, 123,341);
	  mesh.define_barrier(123,341, 172,386);
	  mesh.define_barrier(172,386, 192,373);
	  mesh.define_barrier(192,373, 254,412);
	  mesh.define_barrier(254,412, 284,455);
	  mesh.define_barrier(284,455, 293,485);
	  mesh.define_barrier(293,485, 334,524);
	  mesh.define_barrier(334,524, 306,558);
	  mesh.define_barrier(66,424, 66,341);
	  mesh.define_barrier(66,424, 169,559);
	  mesh.define_barrier(169,559, 268,588);
	  mesh.define_barrier(306,558, 268,588);
	  
	  mesh.define_wall(114,424, 284,455);
	  mesh.define_wall(192,373, 220,524);
	  mesh.define_wall(169,70, 212,297);
	  mesh.define_wall(166,130, 512,97);
	  mesh.define_wall(454,70, 464,166);
	  mesh.define_wall(368,462, 469,620);
	  mesh.define_wall(612,201, 688,166);

	 // Dialogi w grze, po prostu tablica do kolejnych obrazkóww z rozmowami
     // jesli w poziomie nie ma dialogow nie umieszczac w ogóle
      level.define_speeches( [
          'assets/img/story/03/LANG/d/begining/2/1.jpg',
          'assets/img/story/03/LANG/d/begining/2/2.jpg',
		  'assets/img/story/03/LANG/d/begining/2/3.jpg',
		  'assets/img/story/03/LANG/d/begining/2/4.jpg',
		 
      ]);
	
		
	  // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazkow z rozmowami
      // jesli w poziomie nie ma dialogow nie umieszczac w ogole
      level.define_end_speeches( [
          'assets/img/story/03/LANG/d/end/2/1.jpg',
		  'assets/img/story/03/LANG/d/end/2/2.jpg',
		  'assets/img/story/03/LANG/d/end/2/3.jpg',
      ]);
	   // Dialogi przed fala, pierwszy parametr - numer fali przed ktora ma sie pojawic dialo, 
			//drugi parametr jak dialogach poczatkowych
			level.define_wave_speeches( 24*560, [
           'assets/img/story/03/LANG/d/mid/1.jpg',
           'assets/img/story/03/LANG/d/mid/2.jpg',
           'assets/img/story/03/LANG/d/mid/3.jpg',
		   ]);
	  
      level.define_wave( 24 , 
        [
         null,
         { "Korsarz": 1 },
         { "Korsarz": 1 },
         { "Korsarz": 1 },
         { "Korsarz": 1 },
         null,
         null,
         null,
        ],
		1
      );
	  level.define_wave( 24 * 20 , 
        [
         null,
         null,
         { "Korsarz": 1 },
         { "Korsarz": 1 },
         { "Korsarz": 1 },
         { "Korsarz": 1 },
         { "Korsarz": 1 },
         { "Korsarz": 1 },
        ],
		24 * 15
      );
	  level.define_wave( 24 * 80 , 
        [
         null,
         null,
         { "Korsarz": 1, "Korsarz_7": 1 },
         { "Korsarz": 1, "Korsarz_7": 1 },
         { "Korsarz": 1, "Korsarz_7": 1 },
         { "Korsarz": 1 },
         null,
         null,
        ],
		24 * 75
      );
	  level.define_wave( 24 * 115 , 
        [
         { "Korsarz": 1, "Korsarz_7": 1 },
         { "Korsarz": 1, "Korsarz_7": 1 },
         { "Korsarz": 1, "Korsarz_7": 1 },
         null,
         null,
         null,
         null,
         null,
        ],
		24 * 110
      );
	   level.define_wave( 24 * 175 , 
        [
         { "Korsarz": 2 },
         { "Korsarz": 1 },
         { "Korsarz_7": 1 },
         { "Korsarz_7": 1 },
         { "Korsarz_7": 1 },
         { "Korsarz_7": 1 },
         { "Korsarz": 1 },
         { "Korsarz": 1 },
        ],
		24 * 170
      );
	  level.define_wave( 24 * 220 , 
        [
         null,
         null,
         null,
         { "Król Korsarzy": 1 },
         null,
         null,
         null,
         null,
        ],
		24 * 215
      );
	  
	  // na prawo od ruiny
	  level.define_dropping_point( 573, 122,
        20 * 24,
        { ammo: 0.1, health: 0.1, viols: 0.05, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.25, 0.5], viols_add: [10,40] }
      );
	  // pomost góra
	  level.define_dropping_point( 782, 258,
        23 * 24,
        { ammo: 0.15, health: 0.3, viols: 0.2, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.25, 0.5], viols_add: [10,40] }
      );
	  // pomost dół
	  level.define_dropping_point( 779, 346,
        26 * 24,
        { ammo: 0.15, health: 0.3, viols: 0.20, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.25, 0.5], viols_add: [10,40] }
      );
	  // przy śladach gora
	  level.define_dropping_point( 116, 120,
        29 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.05, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.25, 0.5], viols_add: [10,40] }
      );
	  // pod samochodem
	  level.define_dropping_point( 95, 498,
        32 * 24,
        { ammo: 0.2, health: 0.15, viols: 0.2, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.25, 0.5], viols_add: [10,40] }
      );
	  // nad drzewem
	  level.define_dropping_point( 500, 396,
        35 * 24,
        { ammo: 0.2, health: 0.25, viols: 0.05, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.25, 0.5], viols_add: [10,40] }
      );
	  // między samochodem a drzewem
	  level.define_dropping_point( 358, 520,
        38 * 24,
        { ammo: 0.15, health: 0.25, viols: 0.1, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.25, 0.5], viols_add: [10,40] }
      );
	  // na prawo od samochodu
	  level.define_dropping_point( 302, 417,
        41 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.05, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.25, 0.5], viols_add: [10,40] }
      );
	  // środek mapy
	  level.define_dropping_point( 362, 302,
        44 * 24,
        { ammo: 0.2, health: 0.2, viols: 0.00, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.25, 0.5], viols_add: [10,40] }
      );
	  // pod ruiną
	  level.define_dropping_point( 313, 207,
        47 * 24,
        { ammo: 0.15, health: 0.20, viols: 0.05, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.25, 0.5], viols_add: [10,40] }
      );

      // definiujemy nagrody
      // define_prizes( { "Klucz_itemu_1": liczba, "Klucz_itemu_2": liczba, ..., "Klucz_itemu_6": liczba } )
      level.define_prizes( {
	  // "Naboje pistoletowe-samoróbki": 2,
      });

      // definiujemy ilość violek nagrody
      level.define_violki_prize(500);
    }
  );

  // >>>>>>>>>>
  // REPLAY LEVEL 3 >>
  // >>>>>>>>>>
  
  //>>>>>>>>>>>>
  // LEVEL 4 >>>>>>>
  //>>>>>>>>>>>>
  
  var level_4 = levels.define_level(4);
  level_4.set_name('level_4_name');
  level_4.set_map_position(220, 150);
  level_4.set_desc('level_4_desc');
  level_4.set_previous(3);

  level_4.set_level_data(
    function level_data(level) {
      level.set_id(4);

      level.set_background_image ('assets/img/levels/warszawska_ulica.png');
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');

      // dochodzacy zolniez - parametry
      // id - karta postaci, liczona od zera
      // nawa postaci z pliku soldiers.js
      // opcjonalnie założona broń
      // opcjonalnie założony armour
      // 4 * opcjonalnie item w plecaku
      level.add_survivor(2, "Żołnierka", "Kapiszon", "", "Naboje karabinowe-samoróbki", "Naboje karabinowe-samoróbki", "Wojskowa apteczka", "Uniwersalne antidotum" );

      level.define_bot_start_point(819,90);
      level.define_bot_start_point(819,215);
      level.define_bot_start_point(819,385);
      level.define_bot_start_point(819,510);
      level.define_bot_start_point(415,-20);
      level.define_bot_start_point(400,620);
	  level.define_bot_start_point(298,272);

      level.define_bot_start_point_mark(745, 85, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 210, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 380, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 505, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(415, 8, 'assets/img/strzalki/arrow_down.png');
      level.define_bot_start_point_mark(400, 542, 'assets/img/strzalki/arrow_up.png');

      level.define_soldier_start_point(375,120); 
      level.define_soldier_start_point(375,200); 
      level.define_soldier_start_point(240,120); 
      level.define_soldier_start_point(240,200); 

      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      var mesh = level.mesh;

	  mesh.define_barrier(835,40, 835,564);
	  mesh.define_barrier(835,564, 451,564);
	  mesh.define_barrier(451,564, 451,635);
	  mesh.define_barrier(451,635, 345,635);
	  mesh.define_barrier(345,635, 345,558);
	  mesh.define_barrier(345,558, 60,558);
	  mesh.define_barrier(60,558, 72,480);
	  mesh.define_barrier(72,480, 102,458);
	  mesh.define_barrier(102,458, 66,398);
	  mesh.define_barrier(66,398, 93,337);
	  mesh.define_barrier(93,337, 48,302);
	  mesh.define_barrier(48,302, 82,241);
	  mesh.define_barrier(82,241, 60,124);
	  mesh.define_barrier(60,124, 140,35);
	  mesh.define_barrier(140,35, 348,35);
	  mesh.define_barrier(348,35, 384,0);
	  mesh.define_barrier(384,0, 384,-35);
	  mesh.define_barrier(384,-35, 457,-35);
	  mesh.define_barrier(457,-35, 457,40);
	  mesh.define_barrier(457,40, 530,40);
	  mesh.define_barrier(530,40, 542,98);
	  mesh.define_barrier(542,98, 556,98);
	  mesh.define_barrier(556,98, 556,40);
	  mesh.define_barrier(556,40, 835,40);
	  
	  mesh.define_barrier(542,352, 580,328);
	  mesh.define_barrier(580,328, 608,362);
	  mesh.define_barrier(608,362, 586,454);
	  mesh.define_barrier(586,454, 599,468);
	  mesh.define_barrier(599,468, 599,506);
	  mesh.define_barrier(599,506, 553,515);
	  mesh.define_barrier(553,515, 542,498);
	  mesh.define_barrier(542,498, 507,498);
	  mesh.define_barrier(507,498, 483,542);
	  mesh.define_barrier(483,542, 424,478);
	  mesh.define_barrier(424,478, 529,392);
	  mesh.define_barrier(529,392, 542,352);
	  mesh.define_barrier(542,352, 580,328);
	  
	  mesh.define_barrier(581,160, 584,262);
	  mesh.define_barrier(584,262, 552,262);
	  mesh.define_barrier(552,262, 552,301);
	  mesh.define_barrier(552,301, 518,310);
	  mesh.define_barrier(518,310, 494,272);
	  mesh.define_barrier(494,272, 515,182);
	  mesh.define_barrier(515,182, 534,147);
	  mesh.define_barrier(534,147, 581,160);
	  
	  mesh.define_barrier(266,200, 354,218);
	  mesh.define_barrier(354,218, 360,262);
	  mesh.define_barrier(372,308, 313,340);
	  mesh.define_barrier(313,340, 242,344);
	  mesh.define_barrier(242,344, 200,328);
	  mesh.define_barrier(200,328, 194,290);
	  mesh.define_barrier(194,290, 222,263);
	  mesh.define_barrier(222,263, 201,227);
	  mesh.define_barrier(201,227, 266,200);
	  
	  mesh.define_wall(72,480, 102,458);
	  mesh.define_wall(93,337, 48,302);
	  mesh.define_wall(348,35, 384,0);
	  mesh.define_wall(457,-35, 457,40);
	  mesh.define_wall(345,635, 345,558);
	  mesh.define_wall(451,564, 451,635);
	  mesh.define_wall(200,328, 354,218);
	  mesh.define_wall(201,227, 372,308);
	  
	    // Dialogi w grze, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczac w ogóle
      //level.define_speeches( [	  
      //]);
	     // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczać w ogóle
      //level.define_end_speeches( [
      //]);
	  
	  //level.define_tips( [
        //]);
		
		//level.define_end_tips( [
         //]);

      // wave'y
      // dwa wave'y nie mogą zdarzyć się w tej samej klatce
      level.define_wave( 24 * 8 ,
        [
          { "Mutant_z_macką": 1 }, //prawa
          { "Mutant_z_macką": 1 }, //prawa
          { "Mutant_z_macką": 1 }, //prawa
          { "Mutant_z_pazurem": 1}, //prawa
          null, //góra
          null, //dół
		  null, //złom
        ],
        24 * 3
      );
	  
	  level.define_wave( 24 * 30 ,
        [
          { "Mutant_z_macką": 1 }, 
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, 
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, 
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, 
          null, 
          null, 
		  null, 
        ],
        24 * 25
      );
	  
	  level.define_wave( 24 * 35 ,
        [
          { "Ghul": 1 }, 
          null, 
          null, 
          null, 
          null, 
          null, 
		  null, 
        ],
        24 * 30
      );
	  
	  level.define_wave( 24 * 50 ,
        [
          null, 
          null, 
          null, 
          null, 
          { "Szczur": 1 }, 
          null, 
		  null, 
        ],
        24 * 45
      );
	  
	  level.define_wave( 24 * 80 ,
        [
          null, 
          null, 
          null, 
          null, 
          { "Ghul": 1 }, 
          null, 
		  null, 
        ],
        24 * 75
      );
	  
	  level.define_wave( 24 * 90 ,
        [
          null, 
          null, 
          null, 
          null, 
          null, 
          null, 
		  { "Ghul": 2 }, 
        ],
        24 * 85
      );
	  
	  level.define_wave( 24 * 115 ,
        [
          { "Mutant_z_pazurem": 1}, 
          { "Mutant_z_pazurem": 1}, 
          { "Mutant_z_pazurem": 1}, 
          { "Mutant_z_pazurem": 1}, 
          null, 
          { "Reptilian": 3 }, 
		  null, 
        ],
        24 * 110
      );
	  
	  level.define_wave( 24 * 160 ,
        [
          { "Mutant_z_macką": 1 }, 
          { "Mutant_z_macką": 1 }, 
          { "Mutant_z_macką": 1 }, 
          { "Mutant_z_macką": 1 }, 
          { "Szczur": 3 }, 
          { "Reptilian": 2 }, 
		  { "Ghul": 1 }, 
        ],
        24 * 155
      );
	 
	// prawy górny róg
	  level.define_dropping_point( 724, 170,
        20 * 24,
        { ammo: 0.05, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [30,50] }
      );
	// prawo środek  
	  level.define_dropping_point( 724, 290,
        20 * 24,
        { ammo: 0.05, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [30,50] }
      );
	  
	  // prawy dolny róg  
	  level.define_dropping_point( 724, 444,
        20 * 24,
        { ammo: 0.05, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [30,50] }
      );
	  
	  // nad gruzem  
	  level.define_dropping_point( 374, 206,
        20 * 24,
        { ammo: 0.01, health: 0.1, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,50] }
      );
	  
	  // pod gruzem  
	  level.define_dropping_point( 349, 368,
        20 * 24,
        { ammo: 0.01, health: 0.1, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,50] }
      );
	  
	  // lewo środek  
	  level.define_dropping_point( 93, 298,
        20 * 24,
        { ammo: 0.01, health: 0.1, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,50] }
      );
	  
	  // lewy górny róg  
	  level.define_dropping_point( 178, 66,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.2, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [20,50] }
      );
	  
	  // lewy dolny róg  
	  level.define_dropping_point( 115, 525,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.2, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [20,50] }
      );
	  
	  // przy górnym wyjściu  
	  level.define_dropping_point( 487, 63,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.2, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [20,50] }
      );
	  
	  // przy dolnym wyjściiu  
	  level.define_dropping_point( 324, 508,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.2, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [20,50] }
      );

      level.define_prizes( {
        //"Nowak-5T": 1,
        //"Naboje pistoletowe-samoróbki": 1,
		//"Wojskowa apteczka": 1,
		//"Uniwersalne antidotum": 1,
      });

      level.define_violki_prize(800);
    }
  );
  //<<<<<<<<<<<<<<<
  //LEVEL 4<<<<<<<<
  //>>>>>>>>>>>>>>>
  
   //>>>>>>>>>>>>
  // REPLAY LEVEL 4 >>>>>>>
  //>>>>>>>>>>>>
  
  var replay_level_4 = levels.define_replay_level(4);
  replay_level_4.set_name('replay_level_4_name');
  replay_level_4.set_map_position(220, 150);
  replay_level_4.set_desc('replay_level_4_desc');
  replay_level_4.set_previous(4);

  replay_level_4.set_level_data(
    function level_data(level) {
      level.set_id(4);

      level.set_background_image ('assets/img/levels/warszawska_ulica.png');
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');

      level.define_bot_start_point(819,90);
      level.define_bot_start_point(819,215);
      level.define_bot_start_point(819,385);
      level.define_bot_start_point(819,510);
      level.define_bot_start_point(415,-20);
      level.define_bot_start_point(400,620);
	  level.define_bot_start_point(298,272);

      level.define_bot_start_point_mark(745, 85, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 210, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 380, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 505, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(415, 8, 'assets/img/strzalki/arrow_down.png');
      level.define_bot_start_point_mark(400, 542, 'assets/img/strzalki/arrow_up.png');

      level.define_soldier_start_point(375,120); 
      level.define_soldier_start_point(375,200); 
      level.define_soldier_start_point(240,120); 
      level.define_soldier_start_point(240,200); 

      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      var mesh = level.mesh;

	  mesh.define_barrier(835,40, 835,564);
	  mesh.define_barrier(835,564, 451,564);
	  mesh.define_barrier(451,564, 451,635);
	  mesh.define_barrier(451,635, 345,635);
	  mesh.define_barrier(345,635, 345,558);
	  mesh.define_barrier(345,558, 60,558);
	  mesh.define_barrier(60,558, 72,480);
	  mesh.define_barrier(72,480, 102,458);
	  mesh.define_barrier(102,458, 66,398);
	  mesh.define_barrier(66,398, 93,337);
	  mesh.define_barrier(93,337, 48,302);
	  mesh.define_barrier(48,302, 82,241);
	  mesh.define_barrier(82,241, 60,124);
	  mesh.define_barrier(60,124, 140,35);
	  mesh.define_barrier(140,35, 348,35);
	  mesh.define_barrier(348,35, 384,0);
	  mesh.define_barrier(384,0, 384,-35);
	  mesh.define_barrier(384,-35, 457,-35);
	  mesh.define_barrier(457,-35, 457,40);
	  mesh.define_barrier(457,40, 530,40);
	  mesh.define_barrier(530,40, 542,98);
	  mesh.define_barrier(542,98, 556,98);
	  mesh.define_barrier(556,98, 556,40);
	  mesh.define_barrier(556,40, 835,40);
	  
	  mesh.define_barrier(542,352, 580,328);
	  mesh.define_barrier(580,328, 608,362);
	  mesh.define_barrier(608,362, 586,454);
	  mesh.define_barrier(586,454, 599,468);
	  mesh.define_barrier(599,468, 599,506);
	  mesh.define_barrier(599,506, 553,515);
	  mesh.define_barrier(553,515, 542,498);
	  mesh.define_barrier(542,498, 507,498);
	  mesh.define_barrier(507,498, 483,542);
	  mesh.define_barrier(483,542, 424,478);
	  mesh.define_barrier(424,478, 529,392);
	  mesh.define_barrier(529,392, 542,352);
	  mesh.define_barrier(542,352, 580,328);
	  
	  mesh.define_barrier(581,160, 584,262);
	  mesh.define_barrier(584,262, 552,262);
	  mesh.define_barrier(552,262, 552,301);
	  mesh.define_barrier(552,301, 518,310);
	  mesh.define_barrier(518,310, 494,272);
	  mesh.define_barrier(494,272, 515,182);
	  mesh.define_barrier(515,182, 534,147);
	  mesh.define_barrier(534,147, 581,160);
	  
	  mesh.define_barrier(266,200, 354,218);
	  mesh.define_barrier(354,218, 360,262);
	  mesh.define_barrier(372,308, 313,340);
	  mesh.define_barrier(313,340, 242,344);
	  mesh.define_barrier(242,344, 200,328);
	  mesh.define_barrier(200,328, 194,290);
	  mesh.define_barrier(194,290, 222,263);
	  mesh.define_barrier(222,263, 201,227);
	  mesh.define_barrier(201,227, 266,200);
	  
	  mesh.define_wall(72,480, 102,458);
	  mesh.define_wall(93,337, 48,302);
	  mesh.define_wall(348,35, 384,0);
	  mesh.define_wall(457,-35, 457,40);
	  mesh.define_wall(345,635, 345,558);
	  mesh.define_wall(451,564, 451,635);
	  mesh.define_wall(200,328, 354,218);
	  mesh.define_wall(201,227, 372,308);
	  
	    // Dialogi w grze, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczac w ogóle
      //level.define_speeches( [	  
      //]);
	     // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczać w ogóle
      //level.define_end_speeches( [
      //]);
	  
	  //level.define_tips( [
        //]);
		
		//level.define_end_tips( [
         //]);

      // wave'y
      // dwa wave'y nie mogą zdarzyć się w tej samej klatce
      level.define_wave( 24 * 6 ,
        [
          { "Mutant": 1 }, //prawa
          { "Mutant": 1 }, //prawa
          { "Mutant": 1 }, //prawa
          null, // dół
          null, //lewa
          { "Mutant": 1 }, //prawa
        ],
        1
      );
	 
	// prawy górny róg
	  level.define_dropping_point( 724, 170,
        20 * 24,
        { ammo: 0.05, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [30,50] }
      );
	// prawo środek  
	  level.define_dropping_point( 724, 290,
        20 * 24,
        { ammo: 0.05, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [30,50] }
      );
	  
	  // prawy dolny róg  
	  level.define_dropping_point( 724, 444,
        20 * 24,
        { ammo: 0.05, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [30,50] }
      );
	  
	  // nad gruzem  
	  level.define_dropping_point( 374, 206,
        20 * 24,
        { ammo: 0.01, health: 0.1, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,50] }
      );
	  
	  // pod gruzem  
	  level.define_dropping_point( 349, 368,
        20 * 24,
        { ammo: 0.01, health: 0.1, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,50] }
      );
	  
	  // lewo środek  
	  level.define_dropping_point( 93, 298,
        20 * 24,
        { ammo: 0.01, health: 0.1, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,50] }
      );
	  
	  // lewy górny róg  
	  level.define_dropping_point( 178, 66,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.2, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [20,50] }
      );
	  
	  // lewy dolny róg  
	  level.define_dropping_point( 115, 525,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.2, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [20,50] }
      );
	  
	  // przy górnym wyjściu  
	  level.define_dropping_point( 487, 63,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.2, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [20,50] }
      );
	  
	  // przy dolnym wyjściiu  
	  level.define_dropping_point( 324, 508,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.2, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [20,50] }
      );

      level.define_prizes( {
        //"": 0,
        //"": 0,
      });

      level.define_violki_prize(0);
    }
  );
  
  //<<<<<<<<<<<<<<<<<<<
  //REPLAY LEVEL 4<<<<<
  //<<<<<<<<<<<<<<<<<<<
  
  //>>>>>>>>>>>>>>>>>>>
  //LEVEL 5>>>>>>>>>>>>
  //>>>>>>>>>>>>>>>>>>>
  
  var level_5 = levels.define_level(5);
  level_5.set_name('level_5_name');
  level_5.set_map_position(235, 170);
  level_5.set_desc('level_5_desc');
  level_5.set_previous(4);

  level_5.set_level_data(
    function level_data(level) {
      level.set_id(5);

      level.set_background_image ('assets/img/levels/metro_swietokrzyska.png');
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');
	  
      level.define_bot_start_point(819,104);
      level.define_bot_start_point(819,290);
      level.define_bot_start_point(819,492);
      level.define_bot_start_point(650,620);
      level.define_bot_start_point(406,620);
      level.define_bot_start_point(140,620);
	  level.define_bot_start_point(-20,492);
	  level.define_bot_start_point(-20,290);
	  level.define_bot_start_point(-20,104);
	  level.define_bot_start_point(140,-20);
	  level.define_bot_start_point(406,-20);
	  level.define_bot_start_point(650,-20);

      level.define_bot_start_point_mark(745, 96, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 275, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 477, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(635, 545, 'assets/img/strzalki/arrow_up.png');
      level.define_bot_start_point_mark(391, 545, 'assets/img/strzalki/arrow_up.png');
      level.define_bot_start_point_mark(125, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(5, 477, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 275, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 96, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(125, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(391, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(635, 5, 'assets/img/strzalki/arrow_down.png');

      level.define_soldier_start_point(148,252);
      level.define_soldier_start_point(148,319);
      level.define_soldier_start_point(83,252);
      level.define_soldier_start_point(83,319);

      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      var mesh = level.mesh;

	  mesh.define_barrier(835,18, 835,582);
	  mesh.define_barrier(835,582, 684,582);
	  mesh.define_barrier(684,582, 684,635);
	  mesh.define_barrier(684,635, 608,635);
	  mesh.define_barrier(608,635, 608,582);
	  mesh.define_barrier(608,582, 488,582);
	  mesh.define_barrier(488, 582, 488,635);
	  mesh.define_barrier(488,635, 321,635);
	  mesh.define_barrier(321,635, 321,582);
	  mesh.define_barrier(321,582, 178,582);
	  mesh.define_barrier(178,582, 170,635);
	  mesh.define_barrier(170,635, 125,653);
	  mesh.define_barrier(125,653, 100,582);
	  mesh.define_barrier(100,582, -35,582);
	  mesh.define_barrier(-35,18, 88,18);
	  mesh.define_barrier(88,18, 88,-35);
	  mesh.define_barrier(88,-35, 212,-35);
	  mesh.define_barrier(212,-35, 212,18);
	  mesh.define_barrier(212,18, 324,18);
	  mesh.define_barrier(324,18, 324,-35);
	  mesh.define_barrier(324,-35, 460,-35);
	  mesh.define_barrier(460,-35, 460,18);
	  mesh.define_barrier(460,18, 605,18);
	  mesh.define_barrier(605,18, 620,-35);
	  mesh.define_barrier(620,-35, 655,-35);
	  mesh.define_barrier(635,-35, 675,18);
	  mesh.define_barrier(675,18, 835,18);
	  
	  mesh.define_barrier(242,136, 645,136);
	  mesh.define_barrier(645,136, 604,232);
	  mesh.define_barrier(604,232, 472,252);
	  mesh.define_barrier(472,252, 514,324);
	  mesh.define_barrier(514,324, 588,326);
	  mesh.define_barrier(588,326, 602,406);
	  mesh.define_barrier(602,406, 247,414);
	  mesh.define_barrier(247,414, 219,376);
	  mesh.define_barrier(219,376, 330,326);
	  mesh.define_barrier(330,326, 330,240);
	  mesh.define_barrier(330,240, 242,206);
	  mesh.define_barrier(242,206, 242,136);
	  
	  
	  mesh.define_wall(246,408, 470,138);
	  mesh.define_wall(596,404, 284,149);
	  mesh.define_wall(470,151, 612,151);
	  
	    // Dialogi w grze, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczac w ogóle
      //level.define_speeches( [	  
      //]);
	     // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczać w ogóle
      //level.define_end_speeches( [
      //]);
	  
	  //level.define_tips( [
        //]);
		
		//level.define_end_tips( [
         //]);

      // wave'y
      // dwa wave'y nie mogą zdarzyć się w tej samej klatce
      level.define_wave( 24 * 10 ,
        [
          null, //prawa góra
          null, //prawa środek
          null, //prawa dół
          null, // dół prawo
          null, // dół środek
          null, // dół lewo
		  { "Reptilian": 1 }, // lewa dół
		  { "Reptilian": 1 }, // lewa środek
		  { "Reptilian": 1 }, // lewa góra
		  null, // góra lewo
		  null, // góra środek
		  null, // góra prawo
        ],
        24 * 5
      );
	  
	  level.define_wave( 24 * 30 ,
        [
          null, //prawa góra
          null, //prawa środek
          null, //prawa dół
          { "Reptilian": 1 }, // dół prawo
          { "Reptilian": 1 }, // dół środek
          { "Reptilian": 1 }, // dół lewo
		  null, // lewa dół
		  null, // lewa środek
		  null, // lewa góra
		  { "Reptilian": 1 }, // góra lewo
		  { "Reptilian": 1 }, // góra środek
		  { "Reptilian": 1 }, // góra prawo
        ],
        24 * 25
      );
	  
	  level.define_wave( 24 * 55 ,
        [
          { "Reptilian": 1 }, //prawa góra
          { "Reptilian": 2 }, //prawa środek
          { "Reptilian": 1 }, //prawa dół
          null, // dół prawo
          null, // dół środek
          null, // dół lewo
		  { "Reptilian": 1 }, // lewa dół
		  { "Reptilian": 2 }, // lewa środek
		  { "Reptilian": 1 }, // lewa góra
		  null, // góra lewo
		  null, // góra środek
		  null, // góra prawo
        ],
        24 * 50
      );
	  
	  level.define_wave( 24 * 90 ,
        [
          null, //prawa góra
          null, //prawa środek
          { "Reptilian": 1, "Reptoludz": 1 }, //prawa dół
          { "Reptilian": 1 }, // dół prawo
          { "Reptilian": 1 }, // dół środek
          { "Reptilian": 1 }, // dół lewo
		  { "Reptilian": 1, "Reptoludz": 1 }, // lewa dół
		  null, // lewa środek
		  null, // lewa góra
		  null, // góra lewo
		  null, // góra środek
		  null, // góra prawo
        ],
        24 * 85
      );
	  
	  level.define_wave( 24 * 130 ,
        [
          { "Reptoludz": 2 }, //prawa góra
          { "Reptoludz": 2 }, //prawa środek
          { "Reptoludz": 1 }, //prawa dół
          null, // dół prawo
          null, // dół środek
          null, // dół lewo
		  null, // lewa dół
		  null, // lewa środek
		  null, // lewa góra
		  { "Reptoludz": 1 }, // góra lewo
		  { "Reptoludz": 2 }, // góra środek
		  { "Reptoludz": 2 }, // góra prawo
        ],
        24 * 125
      );
	  
	  level.define_wave( 24 * 170 ,
        [
          null, //prawa góra
          null, //prawa środek
          null, //prawa dół
          null, // dół prawo
          null, // dół środek
          null, // dół lewo
		  { "Reptilian": 1, "Reptoludz": 1 }, // lewa dół
		  { "Reptilian": 1, "Reptoludz": 1 }, // lewa środek
		  { "Reptilian": 1, "Reptoludz": 1 }, // lewa góra
		  null, // góra lewo
		  null, // góra środek
		  null, // góra prawo
        ],
        24 * 165
      );
	 
	 // prawy górny róg
	  level.define_dropping_point( 755, 55,
        20 * 24,
        { ammo: 0.05, health: 0.3, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [30,60] }
      );
	  
	  // prawy dolny róg
	  level.define_dropping_point( 755, 545,
        20 * 24,
        { ammo: 0.05, health: 0.3, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [30,60] }
      );
	  
	  // lewy górny róg
	  level.define_dropping_point( 50, 50,
        20 * 24,
        { ammo: 0.05, health: 0.3, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [30,60] }
      );
	  
	  // lewy dolny róg
	  level.define_dropping_point( 50, 535,
        20 * 24,
        { ammo: 0.05, health: 0.3, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [30,60] }
      );
	  
	  // prawy górny róg gruzu
	  level.define_dropping_point( 666, 167,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // prawy dolny róg gruzu
	  level.define_dropping_point( 666, 376,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // lewy górny róg gruzu
	  level.define_dropping_point( 160, 197,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // lewy dolny róg gruzu
	  level.define_dropping_point( 160, 367,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // góra gruzu
	  level.define_dropping_point( 422, 91,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // prawy górny róg gruzu
	  level.define_dropping_point( 422, 450,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );

      level.define_prizes( {
       // "": 0,
        //"": 0,
      });

      level.define_violki_prize(0);
    }
  );
  
  //<<<<<<<<<<<<<<<<<<<<<
  //LEVEL 5<<<<<<<<<<<<<<
  //<<<<<<<<<<<<<<<<<<<<<
  
  //>>>>>>>>>>>>>>>>>>>
  //REPLAY LEVEL 5>>>>>>>>>>>>
  //>>>>>>>>>>>>>>>>>>>
  
  var replay_level_5 = levels.define_replay_level(5);
  replay_level_5.set_name('replay_level_5_name');
  replay_level_5.set_map_position(235, 170);
  replay_level_5.set_desc('level_5_desc');
  replay_level_5.set_previous(5);

  replay_level_5.set_level_data(
    function level_data(level) {
      level.set_id(5);

      level.set_background_image ('assets/img/levels/metro_swietokrzyska.png');
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');
	  
      level.define_bot_start_point(819,104);
      level.define_bot_start_point(819,290);
      level.define_bot_start_point(819,492);
      level.define_bot_start_point(650,620);
      level.define_bot_start_point(406,620);
      level.define_bot_start_point(140,620);
	  level.define_bot_start_point(-20,492);
	  level.define_bot_start_point(-20,290);
	  level.define_bot_start_point(-20,104);
	  level.define_bot_start_point(140,-20);
	  level.define_bot_start_point(406,-20);
	  level.define_bot_start_point(650,-20);

      level.define_bot_start_point_mark(745, 96, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 275, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 477, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(635, 545, 'assets/img/strzalki/arrow_up.png');
      level.define_bot_start_point_mark(391, 545, 'assets/img/strzalki/arrow_up.png');
      level.define_bot_start_point_mark(125, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(5, 477, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 275, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 96, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(125, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(391, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(635, 5, 'assets/img/strzalki/arrow_down.png');

      level.define_soldier_start_point(148,252);
      level.define_soldier_start_point(148,319);
      level.define_soldier_start_point(83,252);
      level.define_soldier_start_point(83,319);

      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      var mesh = level.mesh;

	  mesh.define_barrier(835,18, 835,582);
	  mesh.define_barrier(835,582, 684,582);
	  mesh.define_barrier(684,582, 684,635);
	  mesh.define_barrier(684,635, 608,635);
	  mesh.define_barrier(608,635, 608,582);
	  mesh.define_barrier(608,582, 488,582);
	  mesh.define_barrier(488, 582, 488,635);
	  mesh.define_barrier(488,635, 321,635);
	  mesh.define_barrier(321,635, 321,582);
	  mesh.define_barrier(321,582, 178,582);
	  mesh.define_barrier(178,582, 170,635);
	  mesh.define_barrier(170,635, 125,653);
	  mesh.define_barrier(125,653, 100,582);
	  mesh.define_barrier(100,582, -35,582);
	  mesh.define_barrier(-35,18, 88,18);
	  mesh.define_barrier(88,18, 88,-35);
	  mesh.define_barrier(88,-35, 212,-35);
	  mesh.define_barrier(212,-35, 212,18);
	  mesh.define_barrier(212,18, 324,18);
	  mesh.define_barrier(324,18, 324,-35);
	  mesh.define_barrier(324,-35, 460,-35);
	  mesh.define_barrier(460,-35, 460,18);
	  mesh.define_barrier(460,18, 605,18);
	  mesh.define_barrier(605,18, 620,-35);
	  mesh.define_barrier(620,-35, 655,-35);
	  mesh.define_barrier(635,-35, 675,18);
	  mesh.define_barrier(675,18, 835,18);
	  
	  mesh.define_barrier(242,136, 645,136);
	  mesh.define_barrier(645,136, 604,232);
	  mesh.define_barrier(604,232, 472,252);
	  mesh.define_barrier(472,252, 514,324);
	  mesh.define_barrier(514,324, 588,326);
	  mesh.define_barrier(588,326, 602,406);
	  mesh.define_barrier(602,406, 247,414);
	  mesh.define_barrier(247,414, 219,376);
	  mesh.define_barrier(219,376, 330,326);
	  mesh.define_barrier(330,326, 330,240);
	  mesh.define_barrier(330,240, 242,206);
	  mesh.define_barrier(242,206, 242,136);
	  
	  
	  mesh.define_wall(246,408, 470,138);
	  mesh.define_wall(596,404, 284,149);
	  mesh.define_wall(470,151, 612,151);
	  
	    // Dialogi w grze, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczac w ogóle
      //level.define_speeches( [	  
      //]);
	     // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczać w ogóle
      //level.define_end_speeches( [
      //]);
	  
	  //level.define_tips( [
        //]);
		
		//level.define_end_tips( [
         //]);

      // wave'y
      // dwa wave'y nie mogą zdarzyć się w tej samej klatce
      //level.define_wave( 24 * 10 ,
      //  [
      //    null, //prawa góra
      //    null, //prawa środek
      //    null, //prawa dół
      //    null, // dół prawo
      //    null, // dół środek
      //    null, // dół lewo
	//	  { "Reptilian": 1 }, // lewa dół
	//	  { "Reptilian": 1 }, // lewa środek
	//	  { "Reptilian": 1 }, // lewa góra
	//	  null, // góra lewo
	//	  null, // góra środek
	//	  null, // góra prawo
    //    ],
    //    24 * 5
    //  );
	  
	  
	 // prawy górny róg
	  level.define_dropping_point( 755, 55,
        20 * 24,
        { ammo: 0.05, health: 0.3, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [30,60] }
      );
	  
	  // prawy dolny róg
	  level.define_dropping_point( 755, 545,
        20 * 24,
        { ammo: 0.05, health: 0.3, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [30,60] }
      );
	  
	  // lewy górny róg
	  level.define_dropping_point( 50, 50,
        20 * 24,
        { ammo: 0.05, health: 0.3, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [30,60] }
      );
	  
	  // lewy dolny róg
	  level.define_dropping_point( 50, 535,
        20 * 24,
        { ammo: 0.05, health: 0.3, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [30,60] }
      );
	  
	  // prawy górny róg gruzu
	  level.define_dropping_point( 666, 167,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // prawy dolny róg gruzu
	  level.define_dropping_point( 666, 376,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // lewy górny róg gruzu
	  level.define_dropping_point( 160, 197,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // lewy dolny róg gruzu
	  level.define_dropping_point( 160, 367,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // góra gruzu
	  level.define_dropping_point( 422, 91,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // prawy górny róg gruzu
	  level.define_dropping_point( 422, 450,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );

      level.define_prizes( {
        "": 0,
        "": 0,
      });

      level.define_violki_prize(0);
    }
  );
  
  //<<<<<<<<<<<<<<<<<<<<<
  //REPLAY LEVEL 5<<<<<<<<<<<<<<
  //<<<<<<<<<<<<<<<<<<<<<
  
     //>>>>>>>>>>>>>>>>>>>
  //LEVEL 6>>>>>>>>>>>>
  //>>>>>>>>>>>>>>>>>>>
  
  var level_6 = levels.define_level(6);
  level_6.set_name('level_6_name');
  level_6.set_map_position(245, 200);
  level_6.set_desc('level_6_desc');
  level_6.set_previous(5);

  level_6.set_level_data(
    function level_data(level) {
      level.set_id(6);

      level.set_background_image ('assets/img/levels/metro_plac_wilsona.png');
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');
	  
      level.define_bot_start_point(820,104);
      level.define_bot_start_point(820,290);
      level.define_bot_start_point(820,466);
      level.define_bot_start_point(368,620);
      level.define_bot_start_point(135,620);
      level.define_bot_start_point(372,-20);
	  level.define_bot_start_point(147,-20);
	  level.define_bot_start_point(-20,108);
	  level.define_bot_start_point(-20,290);
	  level.define_bot_start_point(-20,466);

 
      level.define_bot_start_point_mark(745, 91, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 275, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 451, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(353, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(120, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(358, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(132, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(5, 93, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 275, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 451, 'assets/img/strzalki/arrow_right.png');

      level.define_soldier_start_point(164,182);
      level.define_soldier_start_point(164,234);
      level.define_soldier_start_point(101,182);
      level.define_soldier_start_point(101,234);

      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      var mesh = level.mesh;

	  mesh.define_barrier(835,18, 835,582);
	  mesh.define_barrier(835,582, 405,582);
	  mesh.define_barrier(405,582, 405,635);
	  mesh.define_barrier(405,635, 345,635);
	  mesh.define_barrier(345,635, 188,450);
	  mesh.define_barrier(188,450, 180,582);
	  mesh.define_barrier(180,582, 160,635);
	  mesh.define_barrier(160,635, 135,635);
	  mesh.define_barrier(135,635, 100,582);
	  mesh.define_barrier(100,582, -35,582);
	  mesh.define_barrier(-35,582, -35,18);
	  mesh.define_barrier(-35,18, 82,18);
	  mesh.define_barrier(82,18, 90,-35);
	  mesh.define_barrier(90,-35, 220,-35);
	  mesh.define_barrier(220,-35, 211,86);
	  mesh.define_barrier(211,86, 350,-35);
	  mesh.define_barrier(350,-35, 400-35);
	  mesh.define_barrier(400,-35, 18);
	  mesh.define_barrier(400,18, 835,18);
	  
	  mesh.define_barrier(235,215, 292,158);
	  mesh.define_barrier(292,158, 347,212);
	  mesh.define_barrier(347,212, 290,269);
	  mesh.define_barrier(290,269,235,215);
	  
	  mesh.define_barrier(375,134, 410,98);
	  mesh.define_barrier(410,98, 446,134);
	  mesh.define_barrier(446,134, 410,169);
	  mesh.define_barrier(410,169, 375,134);
	  
	  mesh.define_barrier(301,384, 349,336);
	  mesh.define_barrier(349,336, 399,384);
	  mesh.define_barrier(399,384, 349,432);
	  mesh.define_barrier(349,432, 301,384);
	  
	  mesh.define_barrier(542,132, 598,75);
	  mesh.define_barrier(598,75, 652,128);
	  mesh.define_barrier(652,128, 594,186);
	  mesh.define_barrier(594,186, 542,132);
	  
	  mesh.define_barrier(432,276, 504,203);
	  mesh.define_barrier(504,203, 590,288);
	  mesh.define_barrier(590,288, 517,361);
	  mesh.define_barrier(517,361, 432,276);
	  
	  mesh.define_barrier(471,466, 518,420);
	  mesh.define_barrier(518,420, 562,464);
	  mesh.define_barrier(562,464, 516,512);
	  mesh.define_barrier(516,512, 471,466);
	  
	    // Dialogi w grze, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczac w ogóle
      //level.define_speeches( [	  
      //]);
	     // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczać w ogóle
      //level.define_end_speeches( [
      //]);
	  
	  //level.define_tips( [
        //]);
		
		//level.define_end_tips( [
         //]);

      // wave'y
      // dwa wave'y nie mogą zdarzyć się w tej samej klatce
      level.define_wave( 24 * 10 ,
        [
          null, // prawa góra
          null, // prawa środek
          null, // prawa dół
          { "Reptilian": 1 }, // dół środek
          null, // dół lewo
          { "Reptilian": 1 }, // góra środek
		  null, // góra lewo
		  { "Reptilian": 1 }, // lewo góra
		  { "Reptilian": 1 }, // lewo środek
		  { "Reptilian": 1 }, // lewo dół
        ],
        24 * 5
      );
	  
	  level.define_wave( 24 * 25 ,
        [
          null, // prawa góra
          null, // prawa środek
          null, // prawa dół
          { "Reptilian": 1 }, // dół środek
          { "Reptilian": 1 }, // dół lewo
          { "Reptoludz": 1 }, // góra środek
		  { "Reptoludz": 1 }, // góra lewo
		  null, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
        ],
        24 * 20
      );
	  
	  level.define_wave( 24 * 50 ,
        [
          { "Reptilian": 1 }, // prawa góra
          null, // prawa środek
          { "Reptilian": 1 }, // prawa dół
          null, // dół środek
          { "Reptoludz": 1 }, // dół lewo
          null, // góra środek
		  { "Reptoludz": 1 }, // góra lewo
		  null, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
        ],
        24 * 45
      );
	  
	  level.define_wave( 24 * 55 ,
        [
          { "Pandora": 2 }, // prawa góra
          { "Pandora": 2 }, // prawa środek
          { "Pandora": 2 }, // prawa dół
          null, // dół środek
          null, // dół lewo
          null, // góra środek
		  null, // góra lewo
		  null, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
        ],
        24 * 50
      );
	  
	  level.define_wave( 24 * 70 ,
        [
          { "Pandora": 2 }, // prawa góra
          { "Pandora": 1, "Matrona": 1 }, // prawa środek
          { "Pandora": 2 }, // prawa dół
          null, // dół środek
          null, // dół lewo
          null, // góra środek
		  null, // góra lewo
		  null, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
        ],
        24 * 65
      );
	  
	  level.define_wave( 24 * 90 ,
        [
          { "Pandora": 2 }, // prawa góra
          { "Pandora": 2 }, // prawa środek
          { "Pandora": 2 }, // prawa dół
          null, // dół środek
          null, // dół lewo
          null, // góra środek
		  null, // góra lewo
		  null, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
        ],
        24 * 85
      );
	  
	  level.define_wave( 24 * 110 ,
        [
          { "Pandora": 1 }, // prawa góra
          { "Pandora": 1 }, // prawa środek
          { "Pandora": 1 }, // prawa dół
          null, // dół środek
          null, // dół lewo
          { "Pandora": 1 }, // góra środek
		  { "Pandora": 1 }, // góra lewo
		  null, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
        ],
        24 * 105
      );
	  
	   level.define_wave( 24 * 130 ,
        [
          { "Pandora": 1 }, // prawa góra
          { "Pandora": 1 }, // prawa środek
          { "Pandora": 1 }, // prawa dół
          { "Pandora": 1 }, // dół środek
          { "Pandora": 1 }, // dół lewo
          null, // góra środek
		  null, // góra lewo
		  null, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
        ],
        24 * 125
      );
	  
	   level.define_wave( 24 * 130 ,
        [
          { "Pandora": 1 }, // prawa góra
          { "Pandora": 1 }, // prawa środek
          { "Pandora": 1 }, // prawa dół
          null, // dół środek
          null, // dół lewo
          null, // góra środek
		  null, // góra lewo
		  { "Reptoludz": 1 }, // lewo góra
		  { "Reptoludz": 1 }, // lewo środek
		  { "Reptoludz": 1 }, // lewo dół
        ],
        24 * 125
      );
	  
	 
	 // prawy górny róg
	  level.define_dropping_point( 781, 51,
        20 * 24,
        { ammo: 0.05, health: 0.3, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [30,60] }
      );
	  
	  // prawy dolny róg
	  level.define_dropping_point( 781, 542,
        20 * 24,
        { ammo: 0.05, health: 0.3, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [30,60] }
      );
	  
	  // lewy górny róg
	  level.define_dropping_point( 20, 51,
        20 * 24,
        { ammo: 0.05, health: 0.3, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [30,60] }
      );
	  
	  // lewy dolny róg
	  level.define_dropping_point( 20, 542,
        20 * 24,
        { ammo: 0.05, health: 0.3, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [30,60] }
      );
	  
	  // prawy górny róg gruzu
	  level.define_dropping_point( 651, 214,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // prawy dolny róg gruzu
	  level.define_dropping_point( 651, 367,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // lewy górny róg gruzu
	  level.define_dropping_point( 405, 214,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // lewy dolny róg gruzu
	  level.define_dropping_point( 405, 367,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // górny gruz
	  level.define_dropping_point( 312, 76,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // dolny gruz
	  level.define_dropping_point( 288, 473,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );

      level.define_prizes( {
        "": 0,
        "": 0,
      });

      level.define_violki_prize(0);
    }
  );
  
  //<<<<<<<<<<<<<<<<<<<<<
  //LEVEL 6<<<<<<<<<<<<<<
  //<<<<<<<<<<<<<<<<<<<<<
  
      //>>>>>>>>>>>>>>>>>>>
  //REPLAY LEVEL 6>>>>>>>>>>>>
  //>>>>>>>>>>>>>>>>>>>
  
  var replay_level_6 = levels.define_replay_level(6);
  replay_level_6.set_name('replay_level_6_name');
  replay_level_6.set_map_position(245, 200);
  replay_level_6.set_desc('replay_level_6_desc');
  replay_level_6.set_previous(6);

  replay_level_6.set_level_data(
    function level_data(level) {
      level.set_id(6);

      level.set_background_image ('assets/img/levels/metro_plac_wilsona.png');
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');
	  
      level.define_bot_start_point(820,104);
      level.define_bot_start_point(820,290);
      level.define_bot_start_point(820,466);
      level.define_bot_start_point(368,620);
      level.define_bot_start_point(135,620);
      level.define_bot_start_point(372,-20);
	  level.define_bot_start_point(147,-20);
	  level.define_bot_start_point(-20,108);
	  level.define_bot_start_point(-20,290);
	  level.define_bot_start_point(-20,466);

 
      level.define_bot_start_point_mark(745, 91, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 275, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 451, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(353, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(120, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(358, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(132, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(5, 93, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 275, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 451, 'assets/img/strzalki/arrow_right.png');

      level.define_soldier_start_point(164,182);
      level.define_soldier_start_point(164,234);
      level.define_soldier_start_point(101,182);
      level.define_soldier_start_point(101,234);

      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      var mesh = level.mesh;

	  mesh.define_barrier(835,18, 835,582);
	  mesh.define_barrier(835,582, 405,582);
	  mesh.define_barrier(405,582, 405,635);
	  mesh.define_barrier(405,635, 345,635);
	  mesh.define_barrier(345,635, 188,450);
	  mesh.define_barrier(188,450, 180,582);
	  mesh.define_barrier(180,582, 160,635);
	  mesh.define_barrier(160,635, 135,635);
	  mesh.define_barrier(135,635, 100,582);
	  mesh.define_barrier(100,582, -35,582);
	  mesh.define_barrier(-35,582, -35,18);
	  mesh.define_barrier(-35,18, 82,18);
	  mesh.define_barrier(82,18, 90,-35);
	  mesh.define_barrier(90,-35, 220,-35);
	  mesh.define_barrier(220,-35, 211,86);
	  mesh.define_barrier(211,86, 350,-35);
	  mesh.define_barrier(350,-35, 400-35);
	  mesh.define_barrier(400,-35, 18);
	  mesh.define_barrier(400,18, 835,18);
	  
	  mesh.define_barrier(235,215, 292,158);
	  mesh.define_barrier(292,158, 347,212);
	  mesh.define_barrier(347,212, 290,269);
	  mesh.define_barrier(290,269,235,215);
	  
	  mesh.define_barrier(375,134, 410,98);
	  mesh.define_barrier(410,98, 446,134);
	  mesh.define_barrier(446,134, 410,169);
	  mesh.define_barrier(410,169, 375,134);
	  
	  mesh.define_barrier(301,384, 349,336);
	  mesh.define_barrier(349,336, 399,384);
	  mesh.define_barrier(399,384, 349,432);
	  mesh.define_barrier(349,432, 301,384);
	  
	  mesh.define_barrier(542,132, 598,75);
	  mesh.define_barrier(598,75, 652,128);
	  mesh.define_barrier(652,128, 594,186);
	  mesh.define_barrier(594,186, 542,132);
	  
	  mesh.define_barrier(432,276, 504,203);
	  mesh.define_barrier(504,203, 590,288);
	  mesh.define_barrier(590,288, 517,361);
	  mesh.define_barrier(517,361, 432,276);
	  
	  mesh.define_barrier(471,466, 518,420);
	  mesh.define_barrier(518,420, 562,464);
	  mesh.define_barrier(562,464, 516,512);
	  mesh.define_barrier(516,512, 471,466);
	  
	    // Dialogi w grze, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczac w ogóle
      //level.define_speeches( [	  
      //]);
	     // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczać w ogóle
      //level.define_end_speeches( [
      //]);
	  
	  //level.define_tips( [
        //]);
		
		//level.define_end_tips( [
         //]);

      // wave'y
      // dwa wave'y nie mogą zdarzyć się w tej samej klatce
      level.define_wave( 24 * 10 ,
        [
          null, // prawa góra
          null, // prawa środek
          null, // prawa dół
          { "Reptilian": 1 }, // dół środek
          null, // dół lewo
          { "Reptilian": 1 }, // góra środek
		  null, // góra lewo
		  { "Reptilian": 1 }, // lewo góra
		  { "Reptilian": 1 }, // lewo środek
		  { "Reptilian": 1 }, // lewo dół
        ],
        24 * 5
      );
	  
	  level.define_wave( 24 * 25 ,
        [
          null, // prawa góra
          null, // prawa środek
          null, // prawa dół
          { "Reptilian": 1 }, // dół środek
          { "Reptilian": 1 }, // dół lewo
          { "Reptoludz": 1 }, // góra środek
		  { "Reptoludz": 1 }, // góra lewo
		  null, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
        ],
        24 * 20
      );
	  
	  level.define_wave( 24 * 50 ,
        [
          { "Reptilian": 1 }, // prawa góra
          null, // prawa środek
          { "Reptilian": 1 }, // prawa dół
          null, // dół środek
          { "Reptoludz": 1 }, // dół lewo
          null, // góra środek
		  { "Reptoludz": 1 }, // góra lewo
		  null, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
        ],
        24 * 45
      );
	  
	  level.define_wave( 24 * 55 ,
        [
          { "Pandora": 2 }, // prawa góra
          { "Pandora": 2 }, // prawa środek
          { "Pandora": 2 }, // prawa dół
          null, // dół środek
          null, // dół lewo
          null, // góra środek
		  null, // góra lewo
		  null, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
        ],
        24 * 50
      );
	  
	  level.define_wave( 24 * 70 ,
        [
          { "Pandora": 2 }, // prawa góra
          { "Pandora": 1, "Matrona": 1 }, // prawa środek
          { "Pandora": 2 }, // prawa dół
          null, // dół środek
          null, // dół lewo
          null, // góra środek
		  null, // góra lewo
		  null, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
        ],
        24 * 65
      );
	  
	  level.define_wave( 24 * 90 ,
        [
          { "Pandora": 2 }, // prawa góra
          { "Pandora": 2 }, // prawa środek
          { "Pandora": 2 }, // prawa dół
          null, // dół środek
          null, // dół lewo
          null, // góra środek
		  null, // góra lewo
		  null, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
        ],
        24 * 85
      );
	  
	  level.define_wave( 24 * 110 ,
        [
          { "Pandora": 1 }, // prawa góra
          { "Pandora": 1 }, // prawa środek
          { "Pandora": 1 }, // prawa dół
          null, // dół środek
          null, // dół lewo
          { "Pandora": 1 }, // góra środek
		  { "Pandora": 1 }, // góra lewo
		  null, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
        ],
        24 * 105
      );
	  
	   level.define_wave( 24 * 130 ,
        [
          { "Pandora": 1 }, // prawa góra
          { "Pandora": 1 }, // prawa środek
          { "Pandora": 1 }, // prawa dół
          { "Pandora": 1 }, // dół środek
          { "Pandora": 1 }, // dół lewo
          null, // góra środek
		  null, // góra lewo
		  null, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
        ],
        24 * 125
      );
	  
	   level.define_wave( 24 * 130 ,
        [
          { "Pandora": 1 }, // prawa góra
          { "Pandora": 1 }, // prawa środek
          { "Pandora": 1 }, // prawa dół
          null, // dół środek
          null, // dół lewo
          null, // góra środek
		  null, // góra lewo
		  { "Reptoludz": 1 }, // lewo góra
		  { "Reptoludz": 1 }, // lewo środek
		  { "Reptoludz": 1 }, // lewo dół
        ],
        24 * 125
      );
	  
	 
	 // prawy górny róg
	  level.define_dropping_point( 781, 51,
        20 * 24,
        { ammo: 0.05, health: 0.3, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [30,60] }
      );
	  
	  // prawy dolny róg
	  level.define_dropping_point( 781, 542,
        20 * 24,
        { ammo: 0.05, health: 0.3, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [30,60] }
      );
	  
	  // lewy górny róg
	  level.define_dropping_point( 20, 51,
        20 * 24,
        { ammo: 0.05, health: 0.3, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [30,60] }
      );
	  
	  // lewy dolny róg
	  level.define_dropping_point( 20, 542,
        20 * 24,
        { ammo: 0.05, health: 0.3, viols: 0.2, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.2, 0.4], viols_add: [30,60] }
      );
	  
	  // prawy górny róg gruzu
	  level.define_dropping_point( 651, 214,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // prawy dolny róg gruzu
	  level.define_dropping_point( 651, 367,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // lewy górny róg gruzu
	  level.define_dropping_point( 405, 214,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // lewy dolny róg gruzu
	  level.define_dropping_point( 405, 367,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // górny gruz
	  level.define_dropping_point( 312, 76,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );
	  
	  // dolny gruz
	  level.define_dropping_point( 288, 473,
        20 * 24,
        { ammo: 0.05, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [4,8], ammo_add: [0.2, 0.4], viols_add: [10,60] }
      );

      level.define_prizes( {
        "": 0,
        "": 0,
      });

      level.define_violki_prize(0);
    }
  );
  
  //<<<<<<<<<<<<<<<<<<<<<<<<
  //REPLAY LEVEL 6<<<<<<<<<<
  //<<<<<<<<<<<<<<<<<<<<<<<<
  
  //>>>>>>>>>>>>>>>>>>>
  //LEVEL 7>>>>>>>>>>>>
  //>>>>>>>>>>>>>>>>>>>
  
  var level_7 = levels.define_level(7);
  level_7.set_name('level_7_name');
  level_7.set_map_position(220, 190);
  level_7.set_desc('level_7_desc');
  level_7.set_previous(6);

  level_7.set_level_data(
    function level_data(level) {
      level.set_id(7);

      level.set_background_image ('assets/img/levels/minski_las.png');
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');
	  
	  level.add_survivor(3, "Komandoska", "Łuk górski", "", "Policyjna kamizelka kulloodporna", "Strzały", "Strzały", "Prawie oryginalny nóż wojskowy", "Pobudzacz" );
	  
      level.define_bot_start_point(820,98);
      level.define_bot_start_point(820,319);
      level.define_bot_start_point(820,484);
      level.define_bot_start_point(694,620);
      level.define_bot_start_point(408,620);
      level.define_bot_start_point(122,620);
	  level.define_bot_start_point(-20,98);
	  level.define_bot_start_point(-20,319);
	  level.define_bot_start_point(-20,484);
	  level.define_bot_start_point(694,-20);
	  level.define_bot_start_point(408,-20);
	  level.define_bot_start_point(122,-20);

 
      level.define_bot_start_point_mark(745, 83, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 304, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 469, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(679, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(393, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(107, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(5, 83, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 304, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 469, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(679, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(393, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(107, 5, 'assets/img/strzalki/arrow_down.png');


      level.define_soldier_start_point(332,230);
      level.define_soldier_start_point(439,229);
      level.define_soldier_start_point(332,304);
      level.define_soldier_start_point(439,229);

      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      var mesh = level.mesh;

mesh.define_barrier(835,-35, 835,620);
	  mesh.define_barrier(835,620, -35,620);
	  mesh.define_barrier(-35,620, -35,-35);
	  mesh.define_barrier(-35,-35, 835,-35);
	  
	  mesh.define_barrier(254,63, 552,63);
	  mesh.define_barrier(552,63, 702,260);
	  mesh.define_barrier(702,260, 648,310);
	  mesh.define_barrier(648,310, 537,160);
	  mesh.define_barrier(537,160, 269,160);
	  mesh.define_barrier(269,160, 170,290);
	  mesh.define_barrier(170,290, 116,264);
	  mesh.define_barrier(116,264, 254,63);
	  
	  mesh.define_barrier(94,331, 183,331);
	  mesh.define_barrier(183,331, 183,376);
	  mesh.define_barrier(183,376, 382,466);
	  mesh.define_barrier(382,466, 340,512);
	  mesh.define_barrier(340,512, 94,393);
	  mesh.define_barrier(94,393, 94,331);
	  
	  mesh.define_barrier(642,348, 722,350);
	  mesh.define_barrier(722,350, 470,526),
	  mesh.define_barrier(470,526, 456,512);
	  mesh.define_barrier(456,512, 456,464);
	  mesh.define_barrier(456,464, 642,350);
	  
	 
	  
	    // Dialogi w grze, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczac w ogóle
      //level.define_speeches( [	  
      //]);
	     // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczać w ogóle
      //level.define_end_speeches( [
      //]);
	  
	  //level.define_tips( [
        //]);
		
		//level.define_end_tips( [
         //]);

      // wave'y
      // dwa wave'y nie mogą zdarzyć się w tej samej klatce
      level.define_wave( 24 * 12 ,
        [
          { "Mutant_z_macką": 1 }, // prawa góra
          { "Mutant_z_macką": 1 }, // prawa środek
          { "Mutant_z_pazurem": 1 }, // prawa dół
          null, // dół prawa
          null, // dół środek
          null, // dół lewo
		  { "Mutant_z_macką": 1 }, // lewo góra
		  { "Mutant_z_macką": 1 }, // lewo środek
		  { "Mutant_z_pazurem": 1 }, // lewo dół
		  null, // góra prawa
		  null, // góra środek
		  null, // góra lewa
        ],
        24 * 7
      );
	  
	  level.define_wave( 24 * 30 ,
        [
          null, // prawa góra
          null, // prawa środek
          null, // prawa dół
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // dół prawa
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // dół środek
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // dół lewo
		  null, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
		  null, // góra prawa
		  { "Ghul": 1 }, // góra środek
		  { "Ghul": 1 }, // góra lewa
        ],
        24 * 25
      );
	  
	  level.define_wave( 24 * 60 ,
        [
          null, // prawa góra
          null, // prawa środek
          { "Ghul": 1 }, // prawa dół
          null, // dół prawa
          null, // dół środek
          null, // dół lewo
		  { "Mutant_z_macką": 1 }, // lewo góra
		  { "Mutant_z_macką": 1 }, // lewo środek
		  { "Mutant_z_macką": 1 }, // lewo dół
		  { "Mutant_z_macką": 1 }, // góra prawa
		  { "Mutant_z_macką": 1 }, // góra środek
		  { "Mutant_z_macką": 1 }, // góra lewa
        ],
        24 * 55
      );
	  
	   level.define_wave( 24 * 85 ,
        [
          null, // prawa góra
          null, // prawa środek
          null, // prawa dół
          { "Mutant_z_macką": 1 }, // dół prawa
          { "Mutant_z_macką": 1 }, // dół środek
          { "Mutant_z_macką": 1 }, // dół lewo
		  { "Mutant_z_pazurem": 1 }, // lewo góra
		  { "Mutant_z_pazurem": 1 }, // lewo środek
		  { "Mutant_z_pazurem": 1 }, // lewo dół
		  { "Mutant": 2 }, // góra prawa
		  { "Mutant": 2 }, // góra środek
		  { "Mutant": 2 }, // góra lewa
        ],
        24 * 80
      );
	  
	  level.define_wave( 24 * 100 ,
        [
          null, // prawa góra
          null, // prawa środek
          null, // prawa dół
          { "Ghul": 1 }, // dół prawa
          { "Ghul": 1 }, // dół środek
          null, // dół lewo
		  null, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
		  null, // góra prawa
		  null, // góra środek
		  null, // góra lewa
        ],
        24 * 95
      );
	  
	  level.define_wave( 24 * 130 ,
        [
          null, // prawa góra
          null, // prawa środek
          null, // prawa dół
          null, // dół prawa
          null, // dół środek
          null, // dół lewo
		  { "Mutant_z_macką": 2 }, // lewo góra
		  { "Mutant_z_macką": 2 }, // lewo środek
		  { "Mutant_z_macką": 2 }, // lewo dół
		  null, // góra prawa
		  { "Ghul": 1 }, // góra środek
		  null, // góra lewa
        ],
        24 * 125
      );
	  
	  level.define_wave( 24 * 160 ,
        [
          { "Mutant_z_pazurem": 1 }, // prawa góra
          null, // prawa środek
          null, // prawa dół
          { "Ghul": 1 }, // dół prawa
          { "Ghul": 1 }, // dół środek
          { "Ghul": 1 }, // dół lewo
		  { "Mutant_z_pazurem": 1 }, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
		  { "Mutant_z_pazurem": 2 }, // góra prawa
		  { "Mutant_z_pazurem": 2 }, // góra środek
		  { "Mutant_z_pazurem": 2 }, // góra lewa
        ],
        24 * 155
      );
	  
	 
	 // prawy górny róg
	  level.define_dropping_point( 751, 39,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.25, 0.45], viols_add: [40,100] }
      );
	  
	  // prawy dolny róg
	  level.define_dropping_point( 751, 558,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.25, 0.45], viols_add: [40,100] }
      );
	  
	  // lewy górny róg
	  level.define_dropping_point( 54, 39,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.25, 0.45], viols_add: [40,100] }
      );
	  
	  // lewy dolny róg
	  level.define_dropping_point( 54, 558,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.25, 0.45], viols_add: [40,100] }
      );
	  
	  // prawy górny róg przeszkody
	  level.define_dropping_point( 668, 142,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.15, 0.45], viols_add: [20,100] }
      );
	  
	  // prawy dolny róg przeszkody
	  level.define_dropping_point( 621, 471,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.15, 0.45], viols_add: [20,100] }
      );
	  
	  // lewy górny róg przeszkody
	  level.define_dropping_point( 152, 142,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.15, 0.45], viols_add: [20,100] }
      );
	  
	  // lewy dolny róg przeszkody
	  level.define_dropping_point( 187, 481,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.15, 0.45], viols_add: [20,100] }
      );
	  
	  // środek prawo
	  level.define_dropping_point( 517, 378,
        20 * 24,
        { ammo: 0.1, health: 0.1, viols: 0.1, ttl: 15 * 24, health_add: [1,8], ammo_add: [0.1, 0.3], viols_add: [10,80] }
      );
	  
	  // środek lewo
	  level.define_dropping_point( 283, 390,
        20 * 24,
        { ammo: 0.1, health: 0.1, viols: 0.1, ttl: 15 * 24, health_add: [1,8], ammo_add: [0.1, 0.3], viols_add: [10,80] }
      );

      level.define_prizes( {
        "": 0,
        "": 0,
      });

      level.define_violki_prize(0);
    }
  );
  
  //<<<<<<<<<<<<<<<<<<<<<<<<
  //LEVEL 7<<<<<<<<<<
  //<<<<<<<<<<<<<<<<<<<<<<<<
  
  //>>>>>>>>>>>>>>>>>>>
  //REPLAY LEVEL 7>>>>>>>>>>>>
  //>>>>>>>>>>>>>>>>>>>
  
  var replay_level_7 = levels.define_replay_level(7);
  replay_level_7.set_name('replay_level_7_name');
  replay_level_7.set_map_position(220, 190);
  replay_level_7.set_desc('replay_level_7_desc');
  replay_level_7.set_previous(7);

  replay_level_7.set_level_data(
    function level_data(level) {
      level.set_id(7);

      level.set_background_image ('assets/img/levels/minski_las.png');
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');
	  
      level.define_bot_start_point(820,98);
      level.define_bot_start_point(820,319);
      level.define_bot_start_point(820,484);
      level.define_bot_start_point(694,620);
      level.define_bot_start_point(408,620);
      level.define_bot_start_point(122,620);
	  level.define_bot_start_point(-20,98);
	  level.define_bot_start_point(-20,319);
	  level.define_bot_start_point(-20,484);
	  level.define_bot_start_point(694,-20);
	  level.define_bot_start_point(408,-20);
	  level.define_bot_start_point(122,-20);

 
      level.define_bot_start_point_mark(745, 83, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 304, 'assets/img/strzalki/arrow_left.png');
      level.define_bot_start_point_mark(745, 469, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(679, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(393, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(107, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(5, 83, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 304, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 469, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(679, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(393, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(107, 5, 'assets/img/strzalki/arrow_down.png');


      level.define_soldier_start_point(332,230);
      level.define_soldier_start_point(439,229);
      level.define_soldier_start_point(332,304);
      level.define_soldier_start_point(439,229);

      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      var mesh = level.mesh;

	  mesh.define_barrier(835,-35, 835,620);
	  mesh.define_barrier(835,620, -35,620);
	  mesh.define_barrier(-35,620, -35,-35);
	  mesh.define_barrier(-35,-35, 835,-35);
	  
	  mesh.define_barrier(254,63, 552,63);
	  mesh.define_barrier(552,63, 702,260);
	  mesh.define_barrier(702,260, 648,310);
	  mesh.define_barrier(648,310, 537,160);
	  mesh.define_barrier(537,160, 269,160);
	  mesh.define_barrier(269,160, 170,290);
	  mesh.define_barrier(170,290, 116,264);
	  mesh.define_barrier(116,264, 254,63);
	  
	  mesh.define_barrier(94,331, 183,331);
	  mesh.define_barrier(183,331, 183,376);
	  mesh.define_barrier(183,376, 382,466);
	  mesh.define_barrier(382,466, 340,512);
	  mesh.define_barrier(340,512, 94,393);
	  mesh.define_barrier(94,393, 94,331);
	  
	  mesh.define_barrier(642,348, 722,350);
	  mesh.define_barrier(722,350, 470,526),
	  mesh.define_barrier(470,526, 456,512);
	  mesh.define_barrier(456,512, 456,464);
	  mesh.define_barrier(456,464, 642,350);
	 
	  
	    // Dialogi w grze, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczac w ogóle
      //level.define_speeches( [	  
      //]);
	     // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczać w ogóle
      //level.define_end_speeches( [
      //]);
	  
	  //level.define_tips( [
        //]);
		
		//level.define_end_tips( [
         //]);

      // wave'y
      // dwa wave'y nie mogą zdarzyć się w tej samej klatce
      level.define_wave( 24 * 12 ,
        [
          { "Mutant_z_macką": 1 }, // prawa góra
          { "Mutant_z_macką": 1 }, // prawa środek
          { "Mutant_z_pazurem": 1 }, // prawa dół
          null, // dół prawa
          null, // dół środek
          null, // dół lewo
		  { "Mutant_z_macką": 1 }, // lewo góra
		  { "Mutant_z_macką": 1 }, // lewo środek
		  { "Mutant_z_pazurem": 1 }, // lewo dół
		  null, // góra prawa
		  null, // góra środek
		  null, // góra lewa
        ],
        24 * 7
      );
	  
	  level.define_wave( 24 * 30 ,
        [
          null, // prawa góra
          null, // prawa środek
          null, // prawa dół
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // dół prawa
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // dół środek
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // dół lewo
		  null, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
		  null, // góra prawa
		  { "Ghul": 1 }, // góra środek
		  { "Ghul": 1 }, // góra lewa
        ],
        24 * 25
      );
	  
	  level.define_wave( 24 * 60 ,
        [
          null, // prawa góra
          null, // prawa środek
          { "Ghul": 1 }, // prawa dół
          null, // dół prawa
          null, // dół środek
          null, // dół lewo
		  { "Mutant_z_macką": 1 }, // lewo góra
		  { "Mutant_z_macką": 1 }, // lewo środek
		  { "Mutant_z_macką": 1 }, // lewo dół
		  { "Mutant_z_macką": 1 }, // góra prawa
		  { "Mutant_z_macką": 1 }, // góra środek
		  { "Mutant_z_macką": 1 }, // góra lewa
        ],
        24 * 55
      );
	  
	   level.define_wave( 24 * 85 ,
        [
          null, // prawa góra
          null, // prawa środek
          null, // prawa dół
          { "Mutant_z_macką": 1 }, // dół prawa
          { "Mutant_z_macką": 1 }, // dół środek
          { "Mutant_z_macką": 1 }, // dół lewo
		  { "Mutant_z_pazurem": 1 }, // lewo góra
		  { "Mutant_z_pazurem": 1 }, // lewo środek
		  { "Mutant_z_pazurem": 1 }, // lewo dół
		  { "Mutant": 2 }, // góra prawa
		  { "Mutant": 2 }, // góra środek
		  { "Mutant": 2 }, // góra lewa
        ],
        24 * 80
      );
	  
	  level.define_wave( 24 * 100 ,
        [
          null, // prawa góra
          null, // prawa środek
          null, // prawa dół
          { "Ghul": 1 }, // dół prawa
          { "Ghul": 1 }, // dół środek
          null, // dół lewo
		  null, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
		  null, // góra prawa
		  null, // góra środek
		  null, // góra lewa
        ],
        24 * 95
      );
	  
	  level.define_wave( 24 * 130 ,
        [
          null, // prawa góra
          null, // prawa środek
          null, // prawa dół
          null, // dół prawa
          null, // dół środek
          null, // dół lewo
		  { "Mutant_z_macką": 2 }, // lewo góra
		  { "Mutant_z_macką": 2 }, // lewo środek
		  { "Mutant_z_macką": 2 }, // lewo dół
		  null, // góra prawa
		  { "Ghul": 1 }, // góra środek
		  null, // góra lewa
        ],
        24 * 125
      );
	  
	  level.define_wave( 24 * 160 ,
        [
          { "Mutant_z_pazurem": 1 }, // prawa góra
          null, // prawa środek
          null, // prawa dół
          { "Ghul": 1 }, // dół prawa
          { "Ghul": 1 }, // dół środek
          { "Ghul": 1 }, // dół lewo
		  { "Mutant_z_pazurem": 1 }, // lewo góra
		  null, // lewo środek
		  null, // lewo dół
		  { "Mutant_z_pazurem": 2 }, // góra prawa
		  { "Mutant_z_pazurem": 2 }, // góra środek
		  { "Mutant_z_pazurem": 2 }, // góra lewa
        ],
        24 * 155
      );
	  
	 
	 // prawy górny róg
	  level.define_dropping_point( 751, 39,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.25, 0.45], viols_add: [40,100] }
      );
	  
	  // prawy dolny róg
	  level.define_dropping_point( 751, 558,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.25, 0.45], viols_add: [40,100] }
      );
	  
	  // lewy górny róg
	  level.define_dropping_point( 54, 39,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.25, 0.45], viols_add: [40,100] }
      );
	  
	  // lewy dolny róg
	  level.define_dropping_point( 54, 558,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.25, 0.45], viols_add: [40,100] }
      );
	  
	  // prawy górny róg przeszkody
	  level.define_dropping_point( 668, 142,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.15, 0.45], viols_add: [20,100] }
      );
	  
	  // prawy dolny róg przeszkody
	  level.define_dropping_point( 621, 471,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.15, 0.45], viols_add: [20,100] }
      );
	  
	  // lewy górny róg przeszkody
	  level.define_dropping_point( 152, 142,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.15, 0.45], viols_add: [20,100] }
      );
	  
	  // lewy dolny róg przeszkody
	  level.define_dropping_point( 187, 481,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.15, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.15, 0.45], viols_add: [20,100] }
      );
	  
	  // środek prawo
	  level.define_dropping_point( 517, 378,
        20 * 24,
        { ammo: 0.1, health: 0.1, viols: 0.1, ttl: 15 * 24, health_add: [1,8], ammo_add: [0.1, 0.3], viols_add: [10,80] }
      );
	  
	  // środek lewo
	  level.define_dropping_point( 283, 390,
        20 * 24,
        { ammo: 0.1, health: 0.1, viols: 0.1, ttl: 15 * 24, health_add: [1,8], ammo_add: [0.1, 0.3], viols_add: [10,80] }
      );

      level.define_prizes( {
        "": 0,
        "": 0,
      });

      level.define_violki_prize(0);
    }
  );
  
  //<<<<<<<<<<<<<<<<<<<<<<<<
  //REPLAY LEVEL 7<<<<<<<<<<
  //<<<<<<<<<<<<<<<<<<<<<<<<
  
  //>>>>>>>>>>>>>>>>>>>
  //LEVEL 8>>>>>>>>>>>>
  //>>>>>>>>>>>>>>>>>>>
  
  var level_8 = levels.define_level(8);
  level_8.set_name('level_8_name');
  level_8.set_map_position(210, 260);
  level_8.set_desc('level_8_desc');
  level_8.set_previous(6);

  level_8.set_level_data(
    function level_data(level) {
      level.set_id(8);

      level.set_background_image ('assets/img/levels/okolice_krakowa.png');
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');
	  
      level.define_bot_start_point(224,-20);
      level.define_bot_start_point(631,-20);
      level.define_bot_start_point(820,197);
      level.define_bot_start_point(820,421);
      level.define_bot_start_point(712,620);
      level.define_bot_start_point(396,620);
	  level.define_bot_start_point(242,620);
	  level.define_bot_start_point(70,620);
	  level.define_bot_start_point(-20,357);
	  level.define_bot_start_point(-20,229);
	  level.define_bot_start_point(219,175);
	  level.define_bot_start_point(500,474);


 
      level.define_bot_start_point_mark(209, 5, 'assets/img/strzalki/arrow_down.png');
      level.define_bot_start_point_mark(616, 5, 'assets/img/strzalki/arrow_down.png');
      level.define_bot_start_point_mark(745, 182, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(745, 406, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(697, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(381, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(223, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(55, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(5, 342, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 216, 'assets/img/strzalki/arrow_right.png');



      level.define_soldier_start_point(293,210);
      level.define_soldier_start_point(293,253);
      level.define_soldier_start_point(293,293);
      level.define_soldier_start_point(392,253);

      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      var mesh = level.mesh;

	  mesh.define_barrier(835,-35, 835,635);
	  mesh.define_barrier(835,635, 163,635);
	  mesh.define_barrier(163,635, 163,562);
	  mesh.define_barrier(163,562, 113,562);
	  mesh.define_barrier(113,562, 113,635);
	  mesh.define_barrier(113,635, -35,635);
	  mesh.define_barrier(-35,635, -35,50);
	  mesh.define_barrier(-35,50, 159,50);
	  mesh.define_barrier(159,50, 159,-35);
	  mesh.define_barrier(159,-35, 288,-35);
	  mesh.define_barrier(288,-35, 288,50);
	  mesh.define_barrier(288,50, 450,50);
	  mesh.define_barrier(450,50, 450,-35),
	  mesh.define_barrier(450,-35, 835,-35);
	  mesh.define_barrier(113,301, 163,301);
	  mesh.define_barrier(163,301, 163,532);
	  mesh.define_barrier(163,532, 113,532);
	  mesh.define_barrier(113,532, 113,301);
	  mesh.define_barrier(19,466, 48,466);
	  mesh.define_barrier(48,466, 48,496);
	  mesh.define_barrier(48,496, 19,496);
	  mesh.define_barrier(19,496, 19,466);
	  mesh.define_barrier(43,154, 72,154);
	  mesh.define_barrier(72,154, 72,183);
	  mesh.define_barrier(72,183, 72,154);
	  mesh.define_barrier(72,154, 43,154);
	  mesh.define_barrier(150,124, 250,124);
	  mesh.define_barrier(250,124, 250,154);
	  mesh.define_barrier(250,194, 250,224);
	  mesh.define_barrier(250,224, 150,224);
	  mesh.define_barrier(150,224, 150,124);
	  mesh.define_barrier(280,324, 380,324);
	  mesh.define_barrier(380,324, 380,372);
	  mesh.define_barrier(380,372, 332,372);
	  mesh.define_barrier(332,272, 332,523);
	  mesh.define_barrier(332,523, 280,523);
	  mesh.define_barrier(280,523, 280,324);
	  mesh.define_barrier(450,445, 480,445);
	  mesh.define_barrier(520,445, 550,445);
	  mesh.define_barrier(550,445, 550,545);
	  mesh.define_barrier(550,545, 450,545);
	  mesh.define_barrier(450,545, 450,445);
	  mesh.define_barrier(630,546, 658,546);
	  mesh.define_barrier(658,546, 658,576);
	  mesh.define_barrier(658,576, 630,576);
	  mesh.define_barrier(630,576, 630,546);
	  mesh.define_barrier(562,27, 592,27);
	  mesh.define_barrier(592,27, 592,57);
	  mesh.define_barrier(592,57, 562,57);
	  mesh.define_barrier(562,57, 562,27);
	  mesh.define_barrier(475,248, 524,248);
	  mesh.define_barrier(524,248, 524,328);
	  mesh.define_barrier(524,328, 475,328);
	  mesh.define_barrier(475,328, 475,248);
	  mesh.define_barrier(374,129, 599,129);
	  mesh.define_barrier(599,129, 599,178);
	  mesh.define_barrier(599,178, 524,178);
	  mesh.define_barrier(524,178, 524,217);
	  mesh.define_barrier(524,217, 475,217);
	  mesh.define_barrier(475,217, 475,178);
	  mesh.define_barrier(475,178, 374,178);
	  mesh.define_barrier(374,178, 374,129);
	  mesh.define_barrier(664,92, 714,92);
	  mesh.define_barrier(714,92, 714,297);
	  mesh.define_barrier(714,297, 664,297);
	  mesh.define_barrier(664,297, 664,92);
	  mesh.define_barrier(664,326, 714,326);
	  mesh.define_barrier(714,326, 714,490);
	  mesh.define_barrier(714,490, 664,490);
	  mesh.define_barrier(664,490, 664,326);
	  mesh.define_barrier(72,183, 43,183);
	  mesh.define_barrier(43,183, 43,154);
	  
	  mesh.define_wall(664,326, 714,490);
	  mesh.define_wall(714,326, 664,490);
	  mesh.define_wall(664,92, 714,297);
	  mesh.define_wall(664,297, 714,92);
	  mesh.define_wall(475,248, 524,328);
	  mesh.define_wall(475,328, 524,248);
	  mesh.define_wall(374,129, 524,217);
	  mesh.define_wall(475,217, 599,129);
	  mesh.define_wall(280,324, 332,524);
	  mesh.define_wall(380,349, 282,349);
	  
	 
	  
	    // Dialogi w grze, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczac w ogóle
      //level.define_speeches( [	  
      //]);
	     // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczać w ogóle
      //level.define_end_speeches( [
      //]);
	  
	  //level.define_tips( [
        //]);
		
		//level.define_end_tips( [
         //]);

      // wave'y
      // dwa wave'y nie mogą zdarzyć się w tej samej klatce
      level.define_wave( 24 * 15 ,
        [
          null, // góra budynek
          null, // góra prawa
          { "Mutant_z_pazurem": 1 }, // prawa góra
          { "Mutant_z_pazurem": 1 }, // prawa dół
          null, // dół prawo
          null, // dół środek
		  null, // dół wyrwa
		  null, // dół lewo
		  { "Mutant_z_macką": 1 }, // lewo dół
		  { "Mutant_z_macką": 1 }, // lewo góra
		  null, // skrzynka góra
		  null, // skrzynka dół
        ],
        24 * 10
      );
	  
	  level.define_wave( 24 * 30 ,
        [
          null, // góra budynek
          { "Ghul": 1 }, // góra prawa
          { "Mutant_z_pazurem": 1 }, // prawa góra
          { "Mutant_z_pazurem": 1 }, // prawa dół
          { "Mutant_z_pazurem": 1 }, // dół prawo
          { "Mutant_z_pazurem": 1 }, // dół środek
		  { "Mutant_z_pazurem": 1 }, // dół wyrwa
		  { "Mutant_z_pazurem": 1 }, // dół lewo
		  null, // lewo dół
		  null, // lewo góra
		  null, // skrzynka góra
		  null, // skrzynka dół
        ],
        24 * 25
      );
	  
	  level.define_wave( 24 * 45 ,
        [
          { "Gor": 1 }, // góra budynek
          null, // góra prawa
          null, // prawa góra
          null, // prawa dół
          null, // dół prawo
          null, // dół środek
		  null, // dół wyrwa
		  null, // dół lewo
		  null, // lewo dół
		  null, // lewo góra
		  null, // skrzynka góra
		  null, // skrzynka dół
        ],
        24 * 40
      );
	  
	   level.define_wave( 24 * 50 ,
        [
          null, // góra budynek
          null, // góra prawa
          { "Mutant_z_pazurem": 1 }, // prawa góra
          { "Mutant_z_pazurem": 1 }, // prawa dół
          null, // dół prawo
          null, // dół środek
		  null, // dół wyrwa
		  null, // dół lewo
		  { "Mutant": 2 }, // lewo dół
		  { "Mutant": 2 }, // lewo góra
		  null, // skrzynka góra
		  null, // skrzynka dół
        ],
        24 * 75
      );
	  
	  level.define_wave( 24 * 75 ,
        [
          null, // góra budynek
          { "Mutant_z_pazurem": 2 }, // góra prawa
          null, // prawa góra
          null, // prawa dół
          { "Mutant_z_macką": 1 }, // dół prawo
          { "Mutant_z_macką": 1 }, // dół środek
		  { "Mutant_z_macką": 1 }, // dół wyrwa
		  { "Mutant_z_macką": 1 }, // dół lewo
		  null, // lewo dół
		  null, // lewo góra
		  null, // skrzynka góra
		  { "Ghul": 1 }, // skrzynka dół
        ],
        24 * 70
      );
	  
	  level.define_wave( 24 * 110 ,
        [
          { "Mutant": 1 }, // góra budynek
          { "Mutant": 1 }, // góra prawa
          { "Mutant": 1 }, // prawa góra
          { "Mutant": 1 }, // prawa dół
          { "Mutant": 1 }, // dół prawo
          { "Mutant": 1 }, // dół środek
		  { "Mutant": 1 }, // dół wyrwa
		  { "Mutant": 1 }, // dół lewo
		  { "Mutant": 1 }, // lewo dół
		  { "Mutant": 1 }, // lewo góra
		  { "Mutant": 1 }, // skrzynka góra
		  { "Mutant": 1 }, // skrzynka dół
        ],
        24 * 105
      );
	  
	  level.define_wave( 24 * 150 ,
        [
          null, // góra budynek
          null, // góra prawa
          { "Mutant_z_macką": 2 }, // prawa góra
          { "Mutant_z_macką": 2 }, // prawa dół
          null, // dół prawo
          null, // dół środek
		  null, // dół wyrwa
		  null, // dół lewo
		  { "Mutant_z_pazurem": 2 }, // lewo dół
		  { "Mutant_z_pazurem": 2 }, // lewo góra
		  { "Ghul": 1 }, // skrzynka góra
		  null, // skrzynka dół
        ],
        24 * 145
      );
	  
	 
	 
	  level.define_dropping_point( 774, 26,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,32], ammo_add: [0.25, 0.5], viols_add: [50,120] }
      );
	  
	  level.define_dropping_point( 766, 570,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,32], ammo_add: [0.25, 0.5], viols_add: [50,120] }
      );
	  
	  level.define_dropping_point( 19, 579,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,32], ammo_add: [0.25, 0.5], viols_add: [50,120] }
      );
	  
	  level.define_dropping_point( 24, 77,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,32], ammo_add: [0.25, 0.5], viols_add: [50,120] }
      );
	  
	  
	  
	  
	  level.define_dropping_point( 475, 18,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.25, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.2, 0.4], viols_add: [50,100] }
      );
	  
	  level.define_dropping_point( 485, 570,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.25, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.2, 0.4], viols_add: [50,100] }
      );
	  
	  
	  
	  
	  
	  
	  level.define_dropping_point( 561, 199,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [1,16], ammo_add: [0.1, 0.4], viols_add: [10,100] }
      );
	  
	  level.define_dropping_point( 635, 423,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [1,16], ammo_add: [0.1, 0.4], viols_add: [10,100] }
      );
	  
	  level.define_dropping_point( 349, 392,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [1,16], ammo_add: [0.1, 0.4], viols_add: [10,100] }
      );
	  
	  level.define_dropping_point( 197, 248,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [1,16], ammo_add: [0.1, 0.4], viols_add: [10,100] }
      );

      level.define_prizes( {
        "": 0,
        "": 0,
      });

      level.define_violki_prize(0);
    }
  );
  
  //<<<<<<<<<<<<<<<<<<<<<<<<
  //LEVEL 8<<<<<<<<<<
  //<<<<<<<<<<<<<<<<<<<<<<<<
  
  
  //>>>>>>>>>>>>>>>>>>>
  //REPLAY LEVEL 8>>>>>>>>>>>>
  //>>>>>>>>>>>>>>>>>>>
  
  var replay_level_8 = levels.define_replay_level(8);
  replay_level_8.set_name('replay_level_8_name');
  replay_level_8.set_map_position(210, 260);
  replay_level_8.set_desc('replay_level_8_desc');
  replay_level_8.set_previous(8);

  replay_level_8.set_level_data(
    function level_data(level) {
      level.set_id(8);

      level.set_background_image ('assets/img/levels/okolice_krakowa.png');
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');
	  
      level.define_bot_start_point(224,-20);
      level.define_bot_start_point(631,-20);
      level.define_bot_start_point(820,197);
      level.define_bot_start_point(820,421);
      level.define_bot_start_point(712,620);
      level.define_bot_start_point(396,620);
	  level.define_bot_start_point(242,620);
	  level.define_bot_start_point(70,620);
	  level.define_bot_start_point(-20,357);
	  level.define_bot_start_point(-20,229);
	  level.define_bot_start_point(219,175);
	  level.define_bot_start_point(500,474);


 
      level.define_bot_start_point_mark(209, 5, 'assets/img/strzalki/arrow_down.png');
      level.define_bot_start_point_mark(616, 5, 'assets/img/strzalki/arrow_down.png');
      level.define_bot_start_point_mark(745, 182, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(745, 406, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(697, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(381, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(223, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(55, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(5, 342, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 216, 'assets/img/strzalki/arrow_right.png');



      level.define_soldier_start_point(293,210);
      level.define_soldier_start_point(293,253);
      level.define_soldier_start_point(293,293);
      level.define_soldier_start_point(392,253);

      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      var mesh = level.mesh;

	  mesh.define_barrier(835,-35, 835,635);
	  mesh.define_barrier(835,635, 163,635);
	  mesh.define_barrier(163,635, 163,562);
	  mesh.define_barrier(163,562, 113,562);
	  mesh.define_barrier(113,562, 113,635);
	  mesh.define_barrier(113,635, -35,635);
	  mesh.define_barrier(-35,635, -35,50);
	  mesh.define_barrier(-35,50, 159,50);
	  mesh.define_barrier(159,50, 159,-35);
	  mesh.define_barrier(159,-35, 288,-35);
	  mesh.define_barrier(288,-35, 288,50);
	  mesh.define_barrier(288,50, 450,50);
	  mesh.define_barrier(450,50, 450,-35),
	  mesh.define_barrier(450,-35, 835,-35);
	  mesh.define_barrier(113,301, 163,301);
	  mesh.define_barrier(163,301, 163,532);
	  mesh.define_barrier(163,532, 113,532);
	  mesh.define_barrier(113,532, 113,301);
	  mesh.define_barrier(19,466, 48,466);
	  mesh.define_barrier(48,466, 48,496);
	  mesh.define_barrier(48,496, 19,496);
	  mesh.define_barrier(19,496, 19,466);
	  mesh.define_barrier(43,154, 72,154);
	  mesh.define_barrier(72,154, 72,183);
	  mesh.define_barrier(72,183, 72,154);
	  mesh.define_barrier(72,154, 43,154);
	  mesh.define_barrier(150,124, 250,124);
	  mesh.define_barrier(250,124, 250,154);
	  mesh.define_barrier(250,194, 250,224);
	  mesh.define_barrier(250,224, 150,224);
	  mesh.define_barrier(150,224, 150,124);
	  mesh.define_barrier(280,324, 380,324);
	  mesh.define_barrier(380,324, 380,372);
	  mesh.define_barrier(380,372, 332,372);
	  mesh.define_barrier(332,272, 332,523);
	  mesh.define_barrier(332,523, 280,523);
	  mesh.define_barrier(280,523, 280,324);
	  mesh.define_barrier(450,445, 480,445);
	  mesh.define_barrier(520,445, 550,445);
	  mesh.define_barrier(550,445, 550,545);
	  mesh.define_barrier(550,545, 450,545);
	  mesh.define_barrier(450,545, 450,445);
	  mesh.define_barrier(630,546, 658,546);
	  mesh.define_barrier(658,546, 658,576);
	  mesh.define_barrier(658,576, 630,576);
	  mesh.define_barrier(630,576, 630,546);
	  mesh.define_barrier(562,27, 592,27);
	  mesh.define_barrier(592,27, 592,57);
	  mesh.define_barrier(592,57, 562,57);
	  mesh.define_barrier(562,57, 562,27);
	  mesh.define_barrier(475,248, 524,248);
	  mesh.define_barrier(524,248, 524,328);
	  mesh.define_barrier(524,328, 475,328);
	  mesh.define_barrier(475,328, 475,248);
	  mesh.define_barrier(374,129, 599,129);
	  mesh.define_barrier(599,129, 599,178);
	  mesh.define_barrier(599,178, 524,178);
	  mesh.define_barrier(524,178, 524,217);
	  mesh.define_barrier(524,217, 475,217);
	  mesh.define_barrier(475,217, 475,178);
	  mesh.define_barrier(475,178, 374,178);
	  mesh.define_barrier(374,178, 374,129);
	  mesh.define_barrier(664,92, 714,92);
	  mesh.define_barrier(714,92, 714,297);
	  mesh.define_barrier(714,297, 664,297);
	  mesh.define_barrier(664,297, 664,92);
	  mesh.define_barrier(664,326, 714,326);
	  mesh.define_barrier(714,326, 714,490);
	  mesh.define_barrier(714,490, 664,490);
	  mesh.define_barrier(664,490, 664,326);
	  mesh.define_barrier(72,183, 43,183);
	  mesh.define_barrier(43,183, 43,154);
	  
	  mesh.define_wall(664,326, 714,490);
	  mesh.define_wall(714,326, 664,490);
	  mesh.define_wall(664,92, 714,297);
	  mesh.define_wall(664,297, 714,92);
	  mesh.define_wall(475,248, 524,328);
	  mesh.define_wall(475,328, 524,248);
	  mesh.define_wall(374,129, 524,217);
	  mesh.define_wall(475,217, 599,129);
	  mesh.define_wall(280,324, 332,524);
	  mesh.define_wall(380,349, 282,349);
	  
	 
	  
	    // Dialogi w grze, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczac w ogóle
      //level.define_speeches( [	  
      //]);
	     // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczać w ogóle
      //level.define_end_speeches( [
      //]);
	  
	  //level.define_tips( [
        //]);
		
		//level.define_end_tips( [
         //]);

      // wave'y
      // dwa wave'y nie mogą zdarzyć się w tej samej klatce
      level.define_wave( 24 * 15 ,
        [
          null, // góra budynek
          null, // góra prawa
          { "Mutant_z_pazurem": 1 }, // prawa góra
          { "Mutant_z_pazurem": 1 }, // prawa dół
          null, // dół prawo
          null, // dół środek
		  null, // dół wyrwa
		  null, // dół lewo
		  { "Mutant_z_macką": 1 }, // lewo dół
		  { "Mutant_z_macką": 1 }, // lewo góra
		  null, // skrzynka góra
		  null, // skrzynka dół
        ],
        24 * 10
      );
	  
	  level.define_wave( 24 * 30 ,
        [
          null, // góra budynek
          { "Ghul": 1 }, // góra prawa
          { "Mutant_z_pazurem": 1 }, // prawa góra
          { "Mutant_z_pazurem": 1 }, // prawa dół
          { "Mutant_z_pazurem": 1 }, // dół prawo
          { "Mutant_z_pazurem": 1 }, // dół środek
		  { "Mutant_z_pazurem": 1 }, // dół wyrwa
		  { "Mutant_z_pazurem": 1 }, // dół lewo
		  null, // lewo dół
		  null, // lewo góra
		  null, // skrzynka góra
		  null, // skrzynka dół
        ],
        24 * 25
      );
	  
	  level.define_wave( 24 * 45 ,
        [
          { "Gor": 1 }, // góra budynek
          null, // góra prawa
          null, // prawa góra
          null, // prawa dół
          null, // dół prawo
          null, // dół środek
		  null, // dół wyrwa
		  null, // dół lewo
		  null, // lewo dół
		  null, // lewo góra
		  null, // skrzynka góra
		  null, // skrzynka dół
        ],
        24 * 40
      );
	  
	   level.define_wave( 24 * 50 ,
        [
          null, // góra budynek
          null, // góra prawa
          { "Mutant_z_pazurem": 1 }, // prawa góra
          { "Mutant_z_pazurem": 1 }, // prawa dół
          null, // dół prawo
          null, // dół środek
		  null, // dół wyrwa
		  null, // dół lewo
		  { "Mutant": 2 }, // lewo dół
		  { "Mutant": 2 }, // lewo góra
		  null, // skrzynka góra
		  null, // skrzynka dół
        ],
        24 * 75
      );
	  
	  level.define_wave( 24 * 75 ,
        [
          null, // góra budynek
          { "Mutant_z_pazurem": 2 }, // góra prawa
          null, // prawa góra
          null, // prawa dół
          { "Mutant_z_macką": 1 }, // dół prawo
          { "Mutant_z_macką": 1 }, // dół środek
		  { "Mutant_z_macką": 1 }, // dół wyrwa
		  { "Mutant_z_macką": 1 }, // dół lewo
		  null, // lewo dół
		  null, // lewo góra
		  null, // skrzynka góra
		  { "Ghul": 1 }, // skrzynka dół
        ],
        24 * 70
      );
	  
	  level.define_wave( 24 * 110 ,
        [
          { "Mutant": 1 }, // góra budynek
          { "Mutant": 1 }, // góra prawa
          { "Mutant": 1 }, // prawa góra
          { "Mutant": 1 }, // prawa dół
          { "Mutant": 1 }, // dół prawo
          { "Mutant": 1 }, // dół środek
		  { "Mutant": 1 }, // dół wyrwa
		  { "Mutant": 1 }, // dół lewo
		  { "Mutant": 1 }, // lewo dół
		  { "Mutant": 1 }, // lewo góra
		  { "Mutant": 1 }, // skrzynka góra
		  { "Mutant": 1 }, // skrzynka dół
        ],
        24 * 105
      );
	  
	  level.define_wave( 24 * 150 ,
        [
          null, // góra budynek
          null, // góra prawa
          { "Mutant_z_macką": 2 }, // prawa góra
          { "Mutant_z_macką": 2 }, // prawa dół
          null, // dół prawo
          null, // dół środek
		  null, // dół wyrwa
		  null, // dół lewo
		  { "Mutant_z_pazurem": 2 }, // lewo dół
		  { "Mutant_z_pazurem": 2 }, // lewo góra
		  { "Ghul": 1 }, // skrzynka góra
		  null, // skrzynka dół
        ],
        24 * 145
      );
	  
	 
	 
	  level.define_dropping_point( 774, 26,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,32], ammo_add: [0.25, 0.5], viols_add: [50,120] }
      );
	  
	  level.define_dropping_point( 766, 570,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,32], ammo_add: [0.25, 0.5], viols_add: [50,120] }
      );
	  
	  level.define_dropping_point( 19, 579,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,32], ammo_add: [0.25, 0.5], viols_add: [50,120] }
      );
	  
	  level.define_dropping_point( 24, 77,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,32], ammo_add: [0.25, 0.5], viols_add: [50,120] }
      );
	  
	  
	  
	  
	  level.define_dropping_point( 475, 18,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.25, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.2, 0.4], viols_add: [50,100] }
      );
	  
	  level.define_dropping_point( 485, 570,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.25, ttl: 15 * 24, health_add: [8,16], ammo_add: [0.2, 0.4], viols_add: [50,100] }
      );
	  
	  
	  
	  
	  
	  
	  level.define_dropping_point( 561, 199,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [1,16], ammo_add: [0.1, 0.4], viols_add: [10,100] }
      );
	  
	  level.define_dropping_point( 635, 423,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [1,16], ammo_add: [0.1, 0.4], viols_add: [10,100] }
      );
	  
	  level.define_dropping_point( 349, 392,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [1,16], ammo_add: [0.1, 0.4], viols_add: [10,100] }
      );
	  
	  level.define_dropping_point( 197, 248,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [1,16], ammo_add: [0.1, 0.4], viols_add: [10,100] }
      );

      level.define_prizes( {
        "": 0,
        "": 0,
      });

      level.define_violki_prize(0);
    }
  );
  
  //<<<<<<<<<<<<<<<<<<<<<<<<
  //REPLAY LEVEL 8<<<<<<<<<<
  //<<<<<<<<<<<<<<<<<<<<<<<<
  
  //>>>>>>>>>>>>>>>>>>>
  //LEVEL 9>>>>>>>>>>>>
  //>>>>>>>>>>>>>>>>>>>
  
  var level_9 = levels.define_level(9);
  level_9.set_name('level_9_name');
  level_9.set_map_position(190, 280);
  level_9.set_desc('level_9_desc');
  level_9.set_previous(8);

  level_9.set_level_data(
    function level_data(level) {
      level.set_id(9);

      level.set_background_image ('assets/img/levels/krakowskie_metro.png');
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');
	  
      level.define_bot_start_point(36,-20);
      level.define_bot_start_point(145,-20);
      level.define_bot_start_point(396,-20);
      level.define_bot_start_point(558,-20);
      level.define_bot_start_point(747,-20);
      level.define_bot_start_point(820,147);
	  level.define_bot_start_point(820,291);
	  level.define_bot_start_point(820,781);
	  level.define_bot_start_point(749,620);
	  level.define_bot_start_point(660,620);
	  level.define_bot_start_point(292,620);
	  level.define_bot_start_point(163,620);
	  level.define_bot_start_point(52,620);
	  level.define_bot_start_point(-20,438);
	  level.define_bot_start_point(-20,287);
	  level.define_bot_start_point(-20,143);
 
      level.define_bot_start_point_mark(21, 5, 'assets/img/strzalki/arrow_down.png');
      level.define_bot_start_point_mark(130, 5, 'assets/img/strzalki/arrow_down.png');
      level.define_bot_start_point_mark(381, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(543, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(697, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(745, 132, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(745, 276, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(745, 766, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(734, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(645, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(177, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(148, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(37, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(5, 423, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 272, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 128, 'assets/img/strzalki/arrow_right.png');

      level.define_soldier_start_point(354,70);
      level.define_soldier_start_point(434,70);
      level.define_soldier_start_point(354,109);
      level.define_soldier_start_point(434,109);

      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      var mesh = level.mesh;

	  mesh.define_barrier(835,20, 835,580);
	  mesh.define_barrier(835,580, 775,580);
	  mesh.define_barrier(775,580, 775,635);
	  mesh.define_barrier(775,635, 725,635);
	  mesh.define_barrier(725,635, 725,580);
	  mesh.define_barrier(725,580, 686,580);
	  mesh.define_barrier(686,580, 686,635);
	  mesh.define_barrier(686,635, 636,635);
	  mesh.define_barrier(636,635, 636,580);
	  mesh.define_barrier(636,580, 317,580);
	  mesh.define_barrier(317,580, 317,635);
	  mesh.define_barrier(317,635, 267,635);
	  mesh.define_barrier(267,635, 267,580);
	  mesh.define_barrier(267,580, 189,580);
	  mesh.define_barrier(189,580, 189,635);
	  mesh.define_barrier(189,635, 139,635);
	  mesh.define_barrier(139,635, 139,580);
	  mesh.define_barrier(139,580, 79,580);
	  mesh.define_barrier(79,580, 79,635);
	  mesh.define_barrier(79,635, 29,635);
	  mesh.define_barrier(29,635, 29,580);
	  mesh.define_barrier(29,580, -35,580);
	  mesh.define_barrier(-35,580, -35,20);
	  mesh.define_barrier(-35,20, 13,20);
	  mesh.define_barrier(13,20, 13,-35);
	  mesh.define_barrier(13,-35, 63,-35);
	  mesh.define_barrier(63,-35, 63,20);
	  mesh.define_barrier(63,20, 120,20);
	  mesh.define_barrier(120,20, 120,-35);
	  mesh.define_barrier(120,-35, 171,-35);
	  mesh.define_barrier(171,-35, 171,20);
	  mesh.define_barrier(171,20, 370,20);
	  mesh.define_barrier(370,20, 370,-35);
	  mesh.define_barrier(370,-35, 420,-35);
	  mesh.define_barrier(420,-35, 420,20);
	  mesh.define_barrier(420,20, 533,20);
	  mesh.define_barrier(533,20, 533,-35);
	  mesh.define_barrier(533,-35, 583,-35);
	  mesh.define_barrier(583,-35, 583,20);
	  mesh.define_barrier(583,20, 725,20);
	  mesh.define_barrier(725,20, 725,-35);
	  mesh.define_barrier(725,-35, 775,-35);
	  mesh.define_barrier(775,-35, 775,20);
	  mesh.define_barrier(775,20, 835,20);
	  
	  mesh.define_barrier(81,81, 331,81);
	  mesh.define_barrier(331,81, 331,111);
	  mesh.define_barrier(331,111, 81,111);
	  mesh.define_barrier(81,111, 81,81);
	  mesh.define_barrier(474,81, 675,81);
	  mesh.define_barrier(675,81, 675,111);
	  mesh.define_barrier(675,111, 474,111);
	  mesh.define_barrier(474,111, 474,81);
	  mesh.define_barrier(375,504, 675,504);
	  mesh.define_barrier(675,504, 675,534);
	  mesh.define_barrier(675,534, 375,534);
	  mesh.define_barrier(375,534, 375,504);
	  mesh.define_barrier(135,188, 676,188);
	  mesh.define_barrier(676,188, 676,438);
	  mesh.define_barrier(676,438, 646,438);
	  mesh.define_barrier(646,438, 646,218);
	  mesh.define_barrier(646,218, 168,218);
	  mesh.define_barrier(168,218, 168,408);
	  mesh.define_barrier(168,408, 376,408);
	  mesh.define_barrier(376,408, 376,438);
	  mesh.define_barrier(376,438, 135,438);
	  mesh.define_barrier(135,438, 135,188);
	  
	  
	  mesh.define_wall(81,81, 331,111);
	  mesh.define_wall(331,81, 81,111);
	  mesh.define_wall(474,81, 676,111);
	  mesh.define_wall(676,81, 474,111);
	  mesh.define_wall(375,504, 675,634);
	  mesh.define_wall(375,634, 675,504);
	  mesh.define_wall(150,188, 150,438);
	  mesh.define_wall(135,424, 376,424);
	  mesh.define_wall(135,204, 676,204);
	  mesh.define_wall(660,188, 660,438);
	  
	 
	  
	    // Dialogi w grze, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczac w ogóle
      //level.define_speeches( [	  
      //]);
	     // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczać w ogóle
      //level.define_end_speeches( [
      //]);
	  
	  //level.define_tips( [
        //]);
		
		//level.define_end_tips( [
         //]);

      // wave'y
      // dwa wave'y nie mogą zdarzyć się w tej samej klatce
      level.define_wave( 24 * 5 ,
        [
          null, // góra lewa
          null, // góra lewa-środek
          null, // góra środek
          null, // góra prawa-środek
          null, // góra prawa
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // prawo góra
		  { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // prawo środek
		  { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // prawo dół
		  null, // dół prawo
		  null, // dół prawo-środek
		  null, // dół środek
		  null, // dół lewo-środek
		  null, // dół lewo
		  { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // lewo dół
		  { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // lewo środek
		  { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // lewo góra
        ],
        1
      );
	  
	  level.define_wave( 24 * 20 ,
        [
          null, // góra lewa
          null, // góra lewa-środek
          null, // góra środek
          null, // góra prawa-środek
          null, // góra prawa
          null, // prawo góra
		  null, // prawo środek
		  null, // prawo dół
		  { "Mutant": 2 }, // dół prawo
		  { "Mutant": 2 }, // dół prawo-środek
		  { "Mutant": 2 }, // dół środek
		  { "Mutant": 2 }, // dół lewo-środek
		  { "Mutant": 2 }, // dół lewo
		  null, // lewo dół
		  null, // lewo środek
		  null, // lewo góra
        ],
        24 * 15
      );
	  
	  level.define_wave( 24 * 40 ,
        [
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // góra lewa
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // góra lewa-środek
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // góra środek
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // góra prawa-środek
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // góra prawa
          { "Ghul": 1 }, // prawo góra
		  { "Ghul": 1 }, // prawo środek
		  null, // prawo dół
		  null, // dół prawo
		  null, // dół prawo-środek
		  null, // dół środek
		  null, // dół lewo-środek
		  null, // dół lewo
		  null, // lewo dół
		  { "Ghul": 1 }, // lewo środek
		  { "Ghul": 1 }, // lewo góra
        ],
        24 * 35
      );
	  
	   level.define_wave( 24 * 60 ,
        [
          { "Mutant_z_macką": 1 }, // góra lewa
          { "Mutant_z_macką": 1 }, // góra lewa-środek
          { "Mutant": 1 }, // góra środek
          { "Mutant": 1 }, // góra prawa-środek
          { "Mutant": 1 }, // góra prawa
          { "Mutant": 1 }, // prawo góra
		  { "Mutant": 1 }, // prawo środek
		  { "Mutant": 1 }, // prawo dół
		  { "Mutant": 1 }, // dół prawo
		  { "Mutant": 1 }, // dół prawo-środek
		  { "Mutant_z_macką": 1 }, // dół środek
		  { "Mutant_z_macką": 1 }, // dół lewo-środek
		  { "Mutant_z_macką": 1 }, // dół lewo
		  { "Mutant_z_macką": 1 }, // lewo dół
		  { "Mutant_z_macką": 1 }, // lewo środek
		  { "Mutant_z_macką": 1 }, // lewo góra
        ],
        24 * 55
      );
	  
	  level.define_wave( 24 * 90 ,
        [
          { "Mutant_z_pazurem": 1 }, // góra lewa
          { "Mutant_z_pazurem": 1 }, // góra lewa-środek
          { "Mutant_z_pazurem": 1 }, // góra środek
          { "Mutant_z_pazurem": 1 }, // góra prawa-środek
          { "Mutant_z_pazurem": 1 }, // góra prawa
          { "Mutant_z_pazurem": 1 }, // prawo góra
		  { "Mutant_z_pazurem": 1 }, // prawo środek
		  { "Mutant_z_pazurem": 1 }, // prawo dół
		  { "Mutant_z_pazurem": 1 }, // dół prawo
		  { "Mutant_z_pazurem": 1 }, // dół prawo-środek
		  { "Mutant_z_pazurem": 1 }, // dół środek
		  { "Mutant_z_pazurem": 1 }, // dół lewo-środek
		  { "Mutant_z_pazurem": 1 }, // dół lewo
		  { "Mutant_z_pazurem": 1 }, // lewo dół
		  { "Mutant_z_pazurem": 1 }, // lewo środek
		  { "Mutant_z_pazurem": 1 }, // lewo góra
        ],
        24 * 85
      );
	  
	  level.define_wave( 24 * 100 ,
        [
          null, // góra lewa
          null, // góra lewa-środek
          { "Ghul": 1 }, // góra środek
          null, // góra prawa-środek
          null, // góra prawa
          null, // prawo góra
		  { "Ghul": 1 }, // prawo środek
		  null, // prawo dół
		  null, // dół prawo
		  null, // dół prawo-środek
		  { "Ghul": 1 }, // dół środek
		  null, // dół lewo-środek
		  null, // dół lewo
		  null, // lewo dół
		  { "Ghul": 1 }, // lewo środek
		  null, // lewo góra
        ],
        24 * 95
      );
	  
	 
	  // prawy górny róg
	  level.define_dropping_point( 784, 48,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [8,32], ammo_add: [0.3, 0.5], viols_add: [70,120] }
      );
	  
	  // lewy górny róg
	  level.define_dropping_point( 13, 55,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [8,32], ammo_add: [0.3, 0.5], viols_add: [70,120] }
      );
	  
	  // prawo nad bunkrem
	  level.define_dropping_point( 579, 140,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [8,32], ammo_add: [0.3, 0.5], viols_add: [70,120] }
      );
	  
	  // lewo nad bunkrem
	  level.define_dropping_point( 204, 148,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [8,32], ammo_add: [0.3, 0.5], viols_add: [70,120] }
      );
	  
	  // na prawo
	  level.define_dropping_point( 770, 198,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.25, ttl: 15 * 24, health_add: [4,32], ammo_add: [0.25, 0.4], viols_add: [50,120] }
      );
	  
	  // na lewo
	  level.define_dropping_point( 28, 198,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.25, ttl: 15 * 24, health_add: [4,32], ammo_add: [0.25, 0.4], viols_add: [50,120] }
      );
	  
	  // prawy dolny róg
	  level.define_dropping_point( 784, 557,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.15, 0.4], viols_add: [10,120] }
      );
	  
	   // lewy dolny róg
	  level.define_dropping_point( 22, 557,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.15, 0.4], viols_add: [10,120] }
      );
	  
	   // prawo pod bunkrem
	  level.define_dropping_point( 542, 562,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.15, 0.4], viols_add: [10,120] }
      );
	  
	   // lewo pod bunkrem
	  level.define_dropping_point( 214, 508,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.15, 0.4], viols_add: [10,120] }
      );

      level.define_prizes( {
        "": 0,
        "": 0,
      });

      level.define_violki_prize(0);
    }
  );
  
  //<<<<<<<<<<<<<<<<<<<<<<<<
  //LEVEL 9<<<<<<<<<<
  //<<<<<<<<<<<<<<<<<<<<<<<<
  
  //>>>>>>>>>>>>>>>>>>>
  //REPLAY LEVEL 9>>>>>>>>>>>>
  //>>>>>>>>>>>>>>>>>>>
  
  var replay_level_9 = levels.define_replay_level(9);
  replay_level_9.set_name('replay_level_9_name');
  replay_level_9.set_map_position(190, 280);
  replay_level_9.set_desc('replay_level_9_desc');
  replay_level_9.set_previous(9);

  replay_level_9.set_level_data(
    function level_data(level) {
      level.set_id(9);

      level.set_background_image ('assets/img/levels/krakowskie_metro.png');
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');
	  
      level.define_bot_start_point(36,-20);
      level.define_bot_start_point(145,-20);
      level.define_bot_start_point(396,-20);
      level.define_bot_start_point(558,-20);
      level.define_bot_start_point(747,-20);
      level.define_bot_start_point(820,147);
	  level.define_bot_start_point(820,291);
	  level.define_bot_start_point(820,781);
	  level.define_bot_start_point(749,620);
	  level.define_bot_start_point(660,620);
	  level.define_bot_start_point(292,620);
	  level.define_bot_start_point(163,620);
	  level.define_bot_start_point(52,620);
	  level.define_bot_start_point(-20,438);
	  level.define_bot_start_point(-20,287);
	  level.define_bot_start_point(-20,143);
 
      level.define_bot_start_point_mark(21, 5, 'assets/img/strzalki/arrow_down.png');
      level.define_bot_start_point_mark(130, 5, 'assets/img/strzalki/arrow_down.png');
      level.define_bot_start_point_mark(381, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(543, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(697, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(745, 132, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(745, 276, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(745, 766, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(734, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(645, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(177, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(148, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(37, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(5, 423, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 272, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 128, 'assets/img/strzalki/arrow_right.png');

      level.define_soldier_start_point(354,70);
      level.define_soldier_start_point(434,70);
      level.define_soldier_start_point(354,109);
      level.define_soldier_start_point(434,109);

      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      var mesh = level.mesh;

	  mesh.define_barrier(835,20, 835,580);
	  mesh.define_barrier(835,580, 775,580);
	  mesh.define_barrier(775,580, 775,635);
	  mesh.define_barrier(775,635, 725,635);
	  mesh.define_barrier(725,635, 725,580);
	  mesh.define_barrier(725,580, 686,580);
	  mesh.define_barrier(686,580, 686,635);
	  mesh.define_barrier(686,635, 636,635);
	  mesh.define_barrier(636,635, 636,580);
	  mesh.define_barrier(636,580, 317,580);
	  mesh.define_barrier(317,580, 317,635);
	  mesh.define_barrier(317,635, 267,635);
	  mesh.define_barrier(267,635, 267,580);
	  mesh.define_barrier(267,580, 189,580);
	  mesh.define_barrier(189,580, 189,635);
	  mesh.define_barrier(189,635, 139,635);
	  mesh.define_barrier(139,635, 139,580);
	  mesh.define_barrier(139,580, 79,580);
	  mesh.define_barrier(79,580, 79,635);
	  mesh.define_barrier(79,635, 29,635);
	  mesh.define_barrier(29,635, 29,580);
	  mesh.define_barrier(29,580, -35,580);
	  mesh.define_barrier(-35,580, -35,20);
	  mesh.define_barrier(-35,20, 13,20);
	  mesh.define_barrier(13,20, 13,-35);
	  mesh.define_barrier(13,-35, 63,-35);
	  mesh.define_barrier(63,-35, 63,20);
	  mesh.define_barrier(63,20, 120,20);
	  mesh.define_barrier(120,20, 120,-35);
	  mesh.define_barrier(120,-35, 171,-35);
	  mesh.define_barrier(171,-35, 171,20);
	  mesh.define_barrier(171,20, 370,20);
	  mesh.define_barrier(370,20, 370,-35);
	  mesh.define_barrier(370,-35, 420,-35);
	  mesh.define_barrier(420,-35, 420,20);
	  mesh.define_barrier(420,20, 533,20);
	  mesh.define_barrier(533,20, 533,-35);
	  mesh.define_barrier(533,-35, 583,-35);
	  mesh.define_barrier(583,-35, 583,20);
	  mesh.define_barrier(583,20, 725,20);
	  mesh.define_barrier(725,20, 725,-35);
	  mesh.define_barrier(725,-35, 775,-35);
	  mesh.define_barrier(775,-35, 775,20);
	  mesh.define_barrier(775,20, 835,20);
	  
	  mesh.define_barrier(81,81, 331,81);
	  mesh.define_barrier(331,81, 331,111);
	  mesh.define_barrier(331,111, 81,111);
	  mesh.define_barrier(81,111, 81,81);
	  mesh.define_barrier(474,81, 675,81);
	  mesh.define_barrier(675,81, 675,111);
	  mesh.define_barrier(675,111, 474,111);
	  mesh.define_barrier(474,111, 474,81);
	  mesh.define_barrier(375,504, 675,504);
	  mesh.define_barrier(675,504, 675,534);
	  mesh.define_barrier(675,534, 375,534);
	  mesh.define_barrier(375,534, 375,504);
	  mesh.define_barrier(135,188, 676,188);
	  mesh.define_barrier(676,188, 676,438);
	  mesh.define_barrier(676,438, 646,438);
	  mesh.define_barrier(646,438, 646,218);
	  mesh.define_barrier(646,218, 168,218);
	  mesh.define_barrier(168,218, 168,408);
	  mesh.define_barrier(168,408, 376,408);
	  mesh.define_barrier(376,408, 376,438);
	  mesh.define_barrier(376,438, 135,438);
	  mesh.define_barrier(135,438, 135,188);
	  
	  
	  mesh.define_wall(81,81, 331,111);
	  mesh.define_wall(331,81, 81,111);
	  mesh.define_wall(474,81, 676,111);
	  mesh.define_wall(676,81, 474,111);
	  mesh.define_wall(375,504, 675,634);
	  mesh.define_wall(375,634, 675,504);
	  mesh.define_wall(150,188, 150,438);
	  mesh.define_wall(135,424, 376,424);
	  mesh.define_wall(135,204, 676,204);
	  mesh.define_wall(660,188, 660,438);
	  
	 
	  
	    // Dialogi w grze, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczac w ogóle
      //level.define_speeches( [	  
      //]);
	     // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczać w ogóle
      //level.define_end_speeches( [
      //]);
	  
	  //level.define_tips( [
        //]);
		
		//level.define_end_tips( [
         //]);

      // wave'y
      // dwa wave'y nie mogą zdarzyć się w tej samej klatce
      level.define_wave( 24 * 5 ,
        [
          null, // góra lewa
          null, // góra lewa-środek
          null, // góra środek
          null, // góra prawa-środek
          null, // góra prawa
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // prawo góra
		  { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // prawo środek
		  { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // prawo dół
		  null, // dół prawo
		  null, // dół prawo-środek
		  null, // dół środek
		  null, // dół lewo-środek
		  null, // dół lewo
		  { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // lewo dół
		  { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // lewo środek
		  { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // lewo góra
        ],
        1
      );
	  
	  level.define_wave( 24 * 20 ,
        [
          null, // góra lewa
          null, // góra lewa-środek
          null, // góra środek
          null, // góra prawa-środek
          null, // góra prawa
          null, // prawo góra
		  null, // prawo środek
		  null, // prawo dół
		  { "Mutant": 2 }, // dół prawo
		  { "Mutant": 2 }, // dół prawo-środek
		  { "Mutant": 2 }, // dół środek
		  { "Mutant": 2 }, // dół lewo-środek
		  { "Mutant": 2 }, // dół lewo
		  null, // lewo dół
		  null, // lewo środek
		  null, // lewo góra
        ],
        24 * 15
      );
	  
	  level.define_wave( 24 * 40 ,
        [
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // góra lewa
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // góra lewa-środek
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // góra środek
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // góra prawa-środek
          { "Mutant_z_macką": 1, "Mutant_z_pazurem": 1 }, // góra prawa
          { "Ghul": 1 }, // prawo góra
		  { "Ghul": 1 }, // prawo środek
		  null, // prawo dół
		  null, // dół prawo
		  null, // dół prawo-środek
		  null, // dół środek
		  null, // dół lewo-środek
		  null, // dół lewo
		  null, // lewo dół
		  { "Ghul": 1 }, // lewo środek
		  { "Ghul": 1 }, // lewo góra
        ],
        24 * 35
      );
	  
	   level.define_wave( 24 * 60 ,
        [
          { "Mutant_z_macką": 1 }, // góra lewa
          { "Mutant_z_macką": 1 }, // góra lewa-środek
          { "Mutant": 1 }, // góra środek
          { "Mutant": 1 }, // góra prawa-środek
          { "Mutant": 1 }, // góra prawa
          { "Mutant": 1 }, // prawo góra
		  { "Mutant": 1 }, // prawo środek
		  { "Mutant": 1 }, // prawo dół
		  { "Mutant": 1 }, // dół prawo
		  { "Mutant": 1 }, // dół prawo-środek
		  { "Mutant_z_macką": 1 }, // dół środek
		  { "Mutant_z_macką": 1 }, // dół lewo-środek
		  { "Mutant_z_macką": 1 }, // dół lewo
		  { "Mutant_z_macką": 1 }, // lewo dół
		  { "Mutant_z_macką": 1 }, // lewo środek
		  { "Mutant_z_macką": 1 }, // lewo góra
        ],
        24 * 55
      );
	  
	  level.define_wave( 24 * 90 ,
        [
          { "Mutant_z_pazurem": 1 }, // góra lewa
          { "Mutant_z_pazurem": 1 }, // góra lewa-środek
          { "Mutant_z_pazurem": 1 }, // góra środek
          { "Mutant_z_pazurem": 1 }, // góra prawa-środek
          { "Mutant_z_pazurem": 1 }, // góra prawa
          { "Mutant_z_pazurem": 1 }, // prawo góra
		  { "Mutant_z_pazurem": 1 }, // prawo środek
		  { "Mutant_z_pazurem": 1 }, // prawo dół
		  { "Mutant_z_pazurem": 1 }, // dół prawo
		  { "Mutant_z_pazurem": 1 }, // dół prawo-środek
		  { "Mutant_z_pazurem": 1 }, // dół środek
		  { "Mutant_z_pazurem": 1 }, // dół lewo-środek
		  { "Mutant_z_pazurem": 1 }, // dół lewo
		  { "Mutant_z_pazurem": 1 }, // lewo dół
		  { "Mutant_z_pazurem": 1 }, // lewo środek
		  { "Mutant_z_pazurem": 1 }, // lewo góra
        ],
        24 * 85
      );
	  
	  level.define_wave( 24 * 100 ,
        [
          null, // góra lewa
          null, // góra lewa-środek
          { "Ghul": 1 }, // góra środek
          null, // góra prawa-środek
          null, // góra prawa
          null, // prawo góra
		  { "Ghul": 1 }, // prawo środek
		  null, // prawo dół
		  null, // dół prawo
		  null, // dół prawo-środek
		  { "Ghul": 1 }, // dół środek
		  null, // dół lewo-środek
		  null, // dół lewo
		  null, // lewo dół
		  { "Ghul": 1 }, // lewo środek
		  null, // lewo góra
        ],
        24 * 95
      );
	  
	 
	  // prawy górny róg
	  level.define_dropping_point( 784, 48,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [8,32], ammo_add: [0.3, 0.5], viols_add: [70,120] }
      );
	  
	  // lewy górny róg
	  level.define_dropping_point( 13, 55,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [8,32], ammo_add: [0.3, 0.5], viols_add: [70,120] }
      );
	  
	  // prawo nad bunkrem
	  level.define_dropping_point( 579, 140,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [8,32], ammo_add: [0.3, 0.5], viols_add: [70,120] }
      );
	  
	  // lewo nad bunkrem
	  level.define_dropping_point( 204, 148,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [8,32], ammo_add: [0.3, 0.5], viols_add: [70,120] }
      );
	  
	  // na prawo
	  level.define_dropping_point( 770, 198,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.25, ttl: 15 * 24, health_add: [4,32], ammo_add: [0.25, 0.4], viols_add: [50,120] }
      );
	  
	  // na lewo
	  level.define_dropping_point( 28, 198,
        20 * 24,
        { ammo: 0.1, health: 0.2, viols: 0.25, ttl: 15 * 24, health_add: [4,32], ammo_add: [0.25, 0.4], viols_add: [50,120] }
      );
	  
	  // prawy dolny róg
	  level.define_dropping_point( 784, 557,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.15, 0.4], viols_add: [10,120] }
      );
	  
	   // lewy dolny róg
	  level.define_dropping_point( 22, 557,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.15, 0.4], viols_add: [10,120] }
      );
	  
	   // prawo pod bunkrem
	  level.define_dropping_point( 542, 562,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.15, 0.4], viols_add: [10,120] }
      );
	  
	   // lewo pod bunkrem
	  level.define_dropping_point( 214, 508,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [4,16], ammo_add: [0.15, 0.4], viols_add: [10,120] }
      );

      level.define_prizes( {
        "": 0,
        "": 0,
      });

      level.define_violki_prize(0);
    }
  );
  
  //<<<<<<<<<<<<<<<<<<<<<<<<
  //REPLAY LEVEL 9<<<<<<<<<<
  //<<<<<<<<<<<<<<<<<<<<<<<<
  
  //>>>>>>>>>>>>>>>>>>>
  //LEVEL 10>>>>>>>>>>>>
  //>>>>>>>>>>>>>>>>>>>
  
  var level_10 = levels.define_level(10);
  level_10.set_name('level_10_name');
  level_10.set_map_position(250, 280);
  level_10.set_desc('level_10_desc');
  level_10.set_previous(8);

  level_10.set_level_data(
    function level_data(level) {
      level.set_id(10);

      level.set_background_image ('assets/img/levels/ulice_krakowa.png');
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');
	  
      level.define_bot_start_point(322,-20);
      level.define_bot_start_point(543,-20);
      level.define_bot_start_point(820,97);
      level.define_bot_start_point(820,212);
      level.define_bot_start_point(820,367);
      level.define_bot_start_point(820,493);
	  level.define_bot_start_point(637,620);
	  level.define_bot_start_point(195,620);
	  level.define_bot_start_point(-20,503);
	  level.define_bot_start_point(-20,366);
	  level.define_bot_start_point(-20,214);
	  level.define_bot_start_point(-20,82);
	  level.define_bot_start_point(391,153);	
	  level.define_bot_start_point(253,184);
	  level.define_bot_start_point(370,425);
	  level.define_bot_start_point(531,385);
 
      level.define_bot_start_point_mark(307, 5, 'assets/img/strzalki/arrow_down.png');
      level.define_bot_start_point_mark(528, 5, 'assets/img/strzalki/arrow_down.png');
      level.define_bot_start_point_mark(745, 82, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(745, 197, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(745, 352, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(745, 478, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(622, 545, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(180, 545, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(5, 488, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(5, 351, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(5, 199, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(5, 67, 'assets/img/strzalki/arrow_up.png');

      level.define_soldier_start_point(236,273);
      level.define_soldier_start_point(236,325);
      level.define_soldier_start_point(294,273);
      level.define_soldier_start_point(294,325);

      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      var mesh = level.mesh;

	  mesh.define_barrier(835,35, 835,563);
	  mesh.define_barrier(835,563, 663,563);
	  mesh.define_barrier(663,563, 663,635);
	  mesh.define_barrier(663,635, 613,635);
	  mesh.define_barrier(613,635, 613,563);
	  mesh.define_barrier(613,563, 226,563);
	  mesh.define_barrier(613,563, 613,635);
	  mesh.define_barrier(613,635, 176,635);
	  mesh.define_barrier(176,635, 176,563);
	  mesh.define_barrier(176,563, -35,563);
	  mesh.define_barrier(-35,563, -35,35);
	  mesh.define_barrier(-35,35, 299,35);
	  mesh.define_barrier(299,35, 299,-35);
	  mesh.define_barrier(299,-35, 349,-35);
	  mesh.define_barrier(349,-35, 349,35);
	  mesh.define_barrier(349,35, 516,35);
	  mesh.define_barrier(516,35, 516,-35);
	  mesh.define_barrier(516,-35, 566,-35);
	  mesh.define_barrier(566,-35, 566,35);
	  mesh.define_barrier(566,35, 835,35);
	  
	  mesh.define_barrier(89,98, 430,98);
	  mesh.define_barrier(430,98, 430,125);
	  mesh.define_barrier(430,125, 430,204);
	  mesh.define_barrier(430,204, 305,204);
	  mesh.define_barrier(205,204, 89,204);
	  mesh.define_barrier(89,204, 89,98);
	  
	  mesh.define_barrier(347,367, 480,367);
	  mesh.define_barrier(570,367, 688,367);
	  mesh.define_barrier(688,367, 688,474);
	  mesh.define_barrier(688,474, 347,474);
	  mesh.define_barrier(347,474, 347,450);
	  mesh.define_barrier(347,405, 347,367);
	  
	    // Dialogi w grze, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczac w ogóle
      //level.define_speeches( [	  
      //]);
	     // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczać w ogóle
      //level.define_end_speeches( [
      //]);
	  
	  //level.define_tips( [
        //]);
		
		//level.define_end_tips( [
         //]);

      // wave'y
      // dwa wave'y nie mogą zdarzyć się w tej samej klatce
      level.define_wave( 24 * 15 ,
        [
          null, // góra lewa
          null, // góra prawa
          { "Mutant": 3 }, // prawo góra chodnik
          { "Mutant": 3 }, // prawo góra ulica
          { "Mutant": 3 }, // prawo dół ulica
          { "Mutant": 3 }, // prawo dół chodnik
		  null, // dół prawo
		  null, // dół lewo
		  null, // lewo dół chodnik
		  null, // lewo dół ulica
		  null, // lewo góra ulica
		  null, // lewo góra chodnik
		  null, // ukryte prawo
		  null, // ukryte dół
		  null, // ukryte lewo
		  null, // ukryte góra
        ],
        24 * 10
      );
	  
	  level.define_wave( 24 * 35 ,
        [
          null, // góra lewa
          null, // góra prawa
          null, // prawo góra chodnik
          null, // prawo góra ulica
          null, // prawo dół ulica
          null, // prawo dół chodnik
		  null, // dół prawo
		  null, // dół lewo
		  { "Mutant_z_macką": 3 }, // lewo dół chodnik
		  { "Mutant_z_macką": 3 }, // lewo dół ulica
		  { "Mutant_z_macką": 3 }, // lewo góra ulica
		  { "Mutant_z_macką": 3 }, // lewo góra chodnik
		  null, // ukryte prawo
		  null, // ukryte dół
		  null, // ukryte lewo
		  null, // ukryte góra
        ],
        24 * 30
      );
	  
	  level.define_wave( 24 * 60 ,
        [
          { "Ghul": 1 }, // góra lewa
          { "Ghul": 1 }, // góra prawa
          { "Mutant_z_macką": 3, "Mutant_z_pazurem": 1 }, // prawo góra chodnik
          { "Mutant_z_macką": 3, "Mutant_z_pazurem": 1 }, // prawo góra ulica
          { "Mutant_z_macką": 3, "Mutant_z_pazurem": 1 }, // prawo dół ulica
          { "Mutant_z_macką": 3, "Mutant_z_pazurem": 1 }, // prawo dół chodnik
		  null, // dół prawo
		  null, // dół lewo
		  { "Mutant_z_macką": 3 }, // lewo dół chodnik
		  { "Mutant_z_macką": 3 }, // lewo dół ulica
		  { "Mutant_z_macką": 3 }, // lewo góra ulica
		  { "Mutant_z_macką": 3 }, // lewo góra chodnik
		  null, // ukryte prawo
		  null, // ukryte dół
		  null, // ukryte lewo
		  null, // ukryte góra
        ],
        24 * 55
      );
	  
	   level.define_wave( 24 * 100 ,
        [
          null, // góra lewa
          null, // góra prawa
          null, // prawo góra chodnik
          null, // prawo góra ulica
          null, // prawo dół ulica
          null, // prawo dół chodnik
		  { "Mutant_z_pazurem": 3 }, // dół prawo
		  { "Mutant_z_pazurem": 3 }, // dół lewo
		  null, // lewo dół chodnik
		  null, // lewo dół ulica
		  null, // lewo góra ulica
		  null, // lewo góra chodnik
		  null, // ukryte prawo
		  null, // ukryte dół
		  null, // ukryte lewo
		  null, // ukryte góra
        ],
        24 * 95
      );
	  
	  level.define_wave( 24 * 150 ,
        [
          { "Mutant_z_pazurem": 2 }, // góra lewa
          { "Mutant_z_pazurem": 2 }, // góra prawa
          null, // prawo góra chodnik
          null, // prawo góra ulica
          null, // prawo dół ulica
          null, // prawo dół chodnik
		  null, // dół prawo
		  null, // dół lewo
		  { "Mutant_z_macką": 1 }, // lewo dół chodnik
		  { "Mutant_z_macką": 1 }, // lewo dół ulica
		  { "Mutant_z_macką": 1 }, // lewo góra ulica
		  { "Mutant_z_macką": 1 }, // lewo góra chodnik
		  null, // ukryte prawo
		  { "Ghul": 1 }, // ukryte dół
		  { "Ghul": 1 }, // ukryte lewo
		  null, // ukryte góra
        ],
        24 * 145
      );
	  
	  level.define_wave( 24 * 200 ,
        [
         null, // góra lewa
          null, // góra prawa
          null, // prawo góra chodnik
          null, // prawo góra ulica
          null, // prawo dół ulica
          null, // prawo dół chodnik
		  null, // dół prawo
		  null, // dół lewo
		  null, // lewo dół chodnik
		  null, // lewo dół ulica
		  null, // lewo góra ulica
		  null, // lewo góra chodnik
		  null, // ukryte prawo
		  null, // ukryte dół
		  null, // ukryte lewo
		  null, // ukryte góra
        ],
        24 * 195
      );
	  
	 
	  // prawy górny róg
	  level.define_dropping_point( 734, 66,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,64], ammo_add: [0.1, 0.75], viols_add: [80,150] }
      );
	  
	  // góra prawo
	  level.define_dropping_point( 488, 72,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,64], ammo_add: [0.1, 0.75], viols_add: [80,150] }
      );
	  
	  // góra lewo
	  level.define_dropping_point( 268, 72,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,64], ammo_add: [0.1, 0.75], viols_add: [80,150] }
      );
	  
	  // lewy górny róg
	  level.define_dropping_point( 70, 74,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,64], ammo_add: [0.1, 0.75], viols_add: [80,150] }
      );
	  
	  // prawy dolny róg
	  level.define_dropping_point( 748, 536,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,64], ammo_add: [0.1, 0.75], viols_add: [80,150] }
      );
	  
	  // dół prawo
	  level.define_dropping_point( 506, 519,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,64], ammo_add: [0.1, 0.75], viols_add: [80,150] }
      );
	  
	  // dół lewo
	  level.define_dropping_point( 302, 521,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,64], ammo_add: [0.1, 0.75], viols_add: [80,150] }
      );
	  
	  // lewy dolny róg
	  level.define_dropping_point( 78, 534,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,64], ammo_add: [0.1, 0.75], viols_add: [80,150] }
      );
	  
	  // środek prawo
	  level.define_dropping_point( 624, 172,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [4,32], ammo_add: [0.25, 0.5], viols_add: [10,150] }
      );
	  
	   // środek lewo
	  level.define_dropping_point( 175, 391,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [4,32], ammo_add: [0.25, 0.5], viols_add: [10,150] }
      );

      level.define_prizes( {
        "": 0,
        "": 0,
      });

      level.define_violki_prize(0);
    }
  );
  
  //<<<<<<<<<<<<<<<<<<<<<<<<
  //LEVEL 10<<<<<<<<<<
  //<<<<<<<<<<<<<<<<<<<<<<<<
  
  //>>>>>>>>>>>>>>>>>>>
  //REPLAY LEVEL 10>>>>>>>>>>>>
  //>>>>>>>>>>>>>>>>>>>
  
  var replay_level_10 = levels.define_replay_level(10);
  replay_level_10.set_name('replay_level_10_name');
  replay_level_10.set_map_position(250, 280);
  replay_level_10.set_desc('replay_level_10_desc');
  replay_level_10.set_previous(8);

  replay_level_10.set_level_data(
    function level_data(level) {
      level.set_id(10);

      level.set_background_image ('assets/img/levels/ulice_krakowa.png');
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');
	  
      level.define_bot_start_point(322,-20);
      level.define_bot_start_point(543,-20);
      level.define_bot_start_point(820,97);
      level.define_bot_start_point(820,212);
      level.define_bot_start_point(820,367);
      level.define_bot_start_point(820,493);
	  level.define_bot_start_point(637,620);
	  level.define_bot_start_point(195,620);
	  level.define_bot_start_point(-20,503);
	  level.define_bot_start_point(-20,366);
	  level.define_bot_start_point(-20,214);
	  level.define_bot_start_point(-20,82);
	  level.define_bot_start_point(391,153);	
	  level.define_bot_start_point(253,184);
	  level.define_bot_start_point(370,425);
	  level.define_bot_start_point(531,385);
 
      level.define_bot_start_point_mark(307, 5, 'assets/img/strzalki/arrow_down.png');
      level.define_bot_start_point_mark(528, 5, 'assets/img/strzalki/arrow_down.png');
      level.define_bot_start_point_mark(745, 82, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(745, 197, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(745, 352, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(745, 478, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(622, 545, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(180, 545, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(5, 488, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(5, 351, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(5, 199, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(5, 67, 'assets/img/strzalki/arrow_up.png');

      level.define_soldier_start_point(236,273);
      level.define_soldier_start_point(236,325);
      level.define_soldier_start_point(294,273);
      level.define_soldier_start_point(294,325);

      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      var mesh = level.mesh;

	  mesh.define_barrier(835,35, 835,563);
	  mesh.define_barrier(835,563, 663,563);
	  mesh.define_barrier(663,563, 663,635);
	  mesh.define_barrier(663,635, 613,635);
	  mesh.define_barrier(613,635, 613,563);
	  mesh.define_barrier(613,563, 226,563);
	  mesh.define_barrier(613,563, 613,635);
	  mesh.define_barrier(613,635, 176,635);
	  mesh.define_barrier(176,635, 176,563);
	  mesh.define_barrier(176,563, -35,563);
	  mesh.define_barrier(-35,563, -35,35);
	  mesh.define_barrier(-35,35, 299,35);
	  mesh.define_barrier(299,35, 299,-35);
	  mesh.define_barrier(299,-35, 349,-35);
	  mesh.define_barrier(349,-35, 349,35);
	  mesh.define_barrier(349,35, 516,35);
	  mesh.define_barrier(516,35, 516,-35);
	  mesh.define_barrier(516,-35, 566,-35);
	  mesh.define_barrier(566,-35, 566,35);
	  mesh.define_barrier(566,35, 835,35);
	  
	  mesh.define_barrier(89,98, 430,98);
	  mesh.define_barrier(430,98, 430,125);
	  mesh.define_barrier(430,125, 430,204);
	  mesh.define_barrier(430,204, 305,204);
	  mesh.define_barrier(205,204, 89,204);
	  mesh.define_barrier(89,204, 89,98);
	  
	  mesh.define_barrier(347,367, 480,367);
	  mesh.define_barrier(570,367, 688,367);
	  mesh.define_barrier(688,367, 688,474);
	  mesh.define_barrier(688,474, 347,474);
	  mesh.define_barrier(347,474, 347,450);
	  mesh.define_barrier(347,405, 347,367);
	  
	    // Dialogi w grze, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczac w ogóle
      //level.define_speeches( [	  
      //]);
	     // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczać w ogóle
      //level.define_end_speeches( [
      //]);
	  
	  //level.define_tips( [
        //]);
		
		//level.define_end_tips( [
         //]);

      // wave'y
      // dwa wave'y nie mogą zdarzyć się w tej samej klatce
      level.define_wave( 24 * 15 ,
        [
          null, // góra lewa
          null, // góra prawa
          { "Mutant": 3 }, // prawo góra chodnik
          { "Mutant": 3 }, // prawo góra ulica
          { "Mutant": 3 }, // prawo dół ulica
          { "Mutant": 3 }, // prawo dół chodnik
		  null, // dół prawo
		  null, // dół lewo
		  null, // lewo dół chodnik
		  null, // lewo dół ulica
		  null, // lewo góra ulica
		  null, // lewo góra chodnik
		  null, // ukryte prawo
		  null, // ukryte dół
		  null, // ukryte lewo
		  null, // ukryte góra
        ],
        24 * 10
      );
	  
	  level.define_wave( 24 * 35 ,
        [
          null, // góra lewa
          null, // góra prawa
          null, // prawo góra chodnik
          null, // prawo góra ulica
          null, // prawo dół ulica
          null, // prawo dół chodnik
		  null, // dół prawo
		  null, // dół lewo
		  { "Mutant_z_macką": 3 }, // lewo dół chodnik
		  { "Mutant_z_macką": 3 }, // lewo dół ulica
		  { "Mutant_z_macką": 3 }, // lewo góra ulica
		  { "Mutant_z_macką": 3 }, // lewo góra chodnik
		  null, // ukryte prawo
		  null, // ukryte dół
		  null, // ukryte lewo
		  null, // ukryte góra
        ],
        24 * 30
      );
	  
	  level.define_wave( 24 * 60 ,
        [
          { "Ghul": 1 }, // góra lewa
          { "Ghul": 1 }, // góra prawa
          { "Mutant_z_macką": 3, "Mutant_z_pazurem": 1 }, // prawo góra chodnik
          { "Mutant_z_macką": 3, "Mutant_z_pazurem": 1 }, // prawo góra ulica
          { "Mutant_z_macką": 3, "Mutant_z_pazurem": 1 }, // prawo dół ulica
          { "Mutant_z_macką": 3, "Mutant_z_pazurem": 1 }, // prawo dół chodnik
		  null, // dół prawo
		  null, // dół lewo
		  { "Mutant_z_macką": 3 }, // lewo dół chodnik
		  { "Mutant_z_macką": 3 }, // lewo dół ulica
		  { "Mutant_z_macką": 3 }, // lewo góra ulica
		  { "Mutant_z_macką": 3 }, // lewo góra chodnik
		  null, // ukryte prawo
		  null, // ukryte dół
		  null, // ukryte lewo
		  null, // ukryte góra
        ],
        24 * 55
      );
	  
	   level.define_wave( 24 * 100 ,
        [
          null, // góra lewa
          null, // góra prawa
          null, // prawo góra chodnik
          null, // prawo góra ulica
          null, // prawo dół ulica
          null, // prawo dół chodnik
		  { "Mutant_z_pazurem": 3 }, // dół prawo
		  { "Mutant_z_pazurem": 3 }, // dół lewo
		  null, // lewo dół chodnik
		  null, // lewo dół ulica
		  null, // lewo góra ulica
		  null, // lewo góra chodnik
		  null, // ukryte prawo
		  null, // ukryte dół
		  null, // ukryte lewo
		  null, // ukryte góra
        ],
        24 * 95
      );
	  
	  level.define_wave( 24 * 150 ,
        [
          { "Mutant_z_pazurem": 2 }, // góra lewa
          { "Mutant_z_pazurem": 2 }, // góra prawa
          null, // prawo góra chodnik
          null, // prawo góra ulica
          null, // prawo dół ulica
          null, // prawo dół chodnik
		  null, // dół prawo
		  null, // dół lewo
		  { "Mutant_z_macką": 1 }, // lewo dół chodnik
		  { "Mutant_z_macką": 1 }, // lewo dół ulica
		  { "Mutant_z_macką": 1 }, // lewo góra ulica
		  { "Mutant_z_macką": 1 }, // lewo góra chodnik
		  null, // ukryte prawo
		  { "Ghul": 1 }, // ukryte dół
		  { "Ghul": 1 }, // ukryte lewo
		  null, // ukryte góra
        ],
        24 * 145
      );
	  
	  level.define_wave( 24 * 200 ,
        [
         null, // góra lewa
          null, // góra prawa
          null, // prawo góra chodnik
          null, // prawo góra ulica
          null, // prawo dół ulica
          null, // prawo dół chodnik
		  null, // dół prawo
		  null, // dół lewo
		  null, // lewo dół chodnik
		  null, // lewo dół ulica
		  null, // lewo góra ulica
		  null, // lewo góra chodnik
		  null, // ukryte prawo
		  null, // ukryte dół
		  null, // ukryte lewo
		  null, // ukryte góra
        ],
        24 * 195
      );
	  
	 
	  // prawy górny róg
	  level.define_dropping_point( 734, 66,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,64], ammo_add: [0.1, 0.75], viols_add: [80,150] }
      );
	  
	  // góra prawo
	  level.define_dropping_point( 488, 72,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,64], ammo_add: [0.1, 0.75], viols_add: [80,150] }
      );
	  
	  // góra lewo
	  level.define_dropping_point( 268, 72,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,64], ammo_add: [0.1, 0.75], viols_add: [80,150] }
      );
	  
	  // lewy górny róg
	  level.define_dropping_point( 70, 74,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,64], ammo_add: [0.1, 0.75], viols_add: [80,150] }
      );
	  
	  // prawy dolny róg
	  level.define_dropping_point( 748, 536,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,64], ammo_add: [0.1, 0.75], viols_add: [80,150] }
      );
	  
	  // dół prawo
	  level.define_dropping_point( 506, 519,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,64], ammo_add: [0.1, 0.75], viols_add: [80,150] }
      );
	  
	  // dół lewo
	  level.define_dropping_point( 302, 521,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,64], ammo_add: [0.1, 0.75], viols_add: [80,150] }
      );
	  
	  // lewy dolny róg
	  level.define_dropping_point( 78, 534,
        20 * 24,
        { ammo: 0.1, health: 0.25, viols: 0.2, ttl: 15 * 24, health_add: [1,64], ammo_add: [0.1, 0.75], viols_add: [80,150] }
      );
	  
	  // środek prawo
	  level.define_dropping_point( 624, 172,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [4,32], ammo_add: [0.25, 0.5], viols_add: [10,150] }
      );
	  
	   // środek lewo
	  level.define_dropping_point( 175, 391,
        20 * 24,
        { ammo: 0.05, health: 0.15, viols: 0.1, ttl: 15 * 24, health_add: [4,32], ammo_add: [0.25, 0.5], viols_add: [10,150] }
      );

      level.define_prizes( {
        "": 0,
        "": 0,
      });

      level.define_violki_prize(0);
    }
  );
  
  //<<<<<<<<<<<<<<<<<<<<<<<<
  //REPLAY LEVEL 10<<<<<<<<<<
  //<<<<<<<<<<<<<<<<<<<<<<<<
  
  //>>>>>>>>>>>>>>>>>>>
  //LEVEL 11>>>>>>>>>>>>
  //>>>>>>>>>>>>>>>>>>>
  
  var level_11 = levels.define_level(11);
  level_11.set_name('level_11_name');
  level_11.set_map_position(260, 295);
  level_11.set_desc('level_11_desc');
  level_11.set_previous(8);

  level_11.set_level_data(
    function level_data(level) {
      level.set_id(11);

      level.set_background_image ('assets/img/levels/laboratorium.png');
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');
	  
      level.define_bot_start_point(132,-20);
      level.define_bot_start_point(283,-20);
      level.define_bot_start_point(434,-20);
      level.define_bot_start_point(586,-20);
      level.define_bot_start_point(820,102);
      level.define_bot_start_point(820,463);
	  level.define_bot_start_point(583,620);
	  level.define_bot_start_point(434,620);
	  level.define_bot_start_point(285,620);
	  level.define_bot_start_point(135,620);
	  level.define_bot_start_point(-20,461);
	  level.define_bot_start_point(-20,99);
	  level.define_bot_start_point(697,303);
 
      level.define_bot_start_point_mark(117, 5, 'assets/img/strzalki/arrow_down.png');
      level.define_bot_start_point_mark(268, 5, 'assets/img/strzalki/arrow_down.png');
      level.define_bot_start_point_mark(419, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(571, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(745, 87, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(745, 448, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(468, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(419, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(270, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(120, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(5, 446, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 84, 'assets/img/strzalki/arrow_right.png');

      level.define_soldier_start_point(106,229);
      level.define_soldier_start_point(106,191);
      level.define_soldier_start_point(106,269);
      level.define_soldier_start_point(56,191);

      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      var mesh = level.mesh;

	  mesh.define_barrier(784,16, 784,76);
	  mesh.define_barrier(784,76, 835,76);
	  mesh.define_barrier(835,76, 835,126);
	  mesh.define_barrier(835,126, 784,126);
	  mesh.define_barrier(784,126, 784,251);
	  mesh.define_barrier(784,251, 680,251);
	  mesh.define_barrier(680,351, 784,351);
	  mesh.define_barrier(784,351, 784,434);
	  mesh.define_barrier(784,434, 835,434);
	  mesh.define_barrier(835,434, 835,484);
	  mesh.define_barrier(835,484, 784,484);
	  mesh.define_barrier(784,484, 784,584);
	  mesh.define_barrier(784,584, 610,584);
	  mesh.define_barrier(610,584, 610,635);
	  mesh.define_barrier(610,635, 560,635);
	  mesh.define_barrier(560,635, 560,584);
	  mesh.define_barrier(560,584, 460,584);
	  mesh.define_barrier(460,584, 460,635);
	  mesh.define_barrier(460,635, 410,635);
	  mesh.define_barrier(410,635, 410,584);
	  mesh.define_barrier(410,584, 310,584);
	  mesh.define_barrier(310,584, 310,635);
	  mesh.define_barrier(310,635, 260,635);
	  mesh.define_barrier(260,635, 260,584);
	  mesh.define_barrier(260,584, 160,584);
	  mesh.define_barrier(160,584, 160,635);
	  mesh.define_barrier(160,635, 110,635);
	  mesh.define_barrier(110,635, 110,584);
	  mesh.define_barrier(110,584, 16,584);
	  mesh.define_barrier(16,584, 16,484);
	  mesh.define_barrier(16,484, -35,484);
	  mesh.define_barrier(-35,484, -35,434);
	  mesh.define_barrier(-35,434, 16,434);
	  mesh.define_barrier(16,434, 16,126);
	  mesh.define_barrier(16,126, -35,126);
	  mesh.define_barrier(-35,126, -35,76);
	  mesh.define_barrier(-35,76, 16,76);
	  mesh.define_barrier(16,76, 16,16);
	  mesh.define_barrier(16,16, 110,16);
	  mesh.define_barrier(110,16, 110,-35);
	  mesh.define_barrier(110,-35, 160,-35);
	  mesh.define_barrier(160,-35, 160,16);
	  mesh.define_barrier(160,16, 260,16);
	  mesh.define_barrier(260,16, 260,-35);
	  mesh.define_barrier(260,-35, 310,-35);
	  mesh.define_barrier(310,-35, 310,16);
	  mesh.define_barrier(310,16, 410,16);
	  mesh.define_barrier(410,16, 410,-35);
	  mesh.define_barrier(410,-35, 460,-35);
	  mesh.define_barrier(460,-35, 460,16);
	  mesh.define_barrier(460,16, 560,16);
	  mesh.define_barrier(560,16, 560,-35);
	  mesh.define_barrier(560,-35, 610,-35);
	  mesh.define_barrier(610,-35, 610,16);
	  mesh.define_barrier(610,16, 784,16);
	  mesh.define_barrier(113,116, 163,116);
	  mesh.define_barrier(163,116, 163,166);
	  mesh.define_barrier(163,166, 113,166);
	  mesh.define_barrier(113,166, 113,116);
	  mesh.define_barrier(592,116, 642,116);
	  mesh.define_barrier(642,116, 642,166);
	  mesh.define_barrier(642,166, 592,166);
	  mesh.define_barrier(592,166, 592,116);
	  mesh.define_barrier(113,434, 163,434);
	  mesh.define_barrier(163,434, 163,484);
	  mesh.define_barrier(163,484, 113,484);
	  mesh.define_barrier(113,484, 113,434);
	  mesh.define_barrier(592,434, 642,434);
	  mesh.define_barrier(642,434, 642,484);
	  mesh.define_barrier(642,484, 592,484);
	  mesh.define_barrier(592,484, 592,434);
	  
	  mesh.define_wall(113,116, 163,166);
	  mesh.define_wall(113,166, 163,116);
	  mesh.define_wall(592,116, 642,166);
	  mesh.define_wall(592,166, 652,116);
	  mesh.define_wall(113,434, 163,484);
	  mesh.define_wall(113,484, 163,434);
	  mesh.define_wall(592,434, 642,484);
	  mesh.define_wall(592,484, 642,434);
	  mesh.define_wall(680,250, 784,350);
	  mesh.define_wall(784,250, 680,350);
	  
	    // Dialogi w grze, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczac w ogóle
      //level.define_speeches( [	  
      //]);
	     // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczać w ogóle
      //level.define_end_speeches( [
      //]);
	  
	  //level.define_tips( [
        //]);
		
		//level.define_end_tips( [
         //]);

      // wave'y
      // dwa wave'y nie mogą zdarzyć się w tej samej klatce
      level.define_wave( 24 * 10 ,
        [
          { "Szczur": 6 }, // prawa góra
          { "Szczur": 6 }, // prawa dół
          null, // dół prawo
          null, // dół środek prawo
          null, // dół środek lewo
          null, // dół lewo
		  null, // lewo dół
		  null, // lewo góra
		  null, // góra lewo
		  null, // góra środek lewo
		  null, // góra środek prawo
		  null, // góra prawo
		  null, // ukryte
        ],
        24 * 5
      );
	  
	  level.define_wave( 24 * 20 ,
        [
          null, // prawa góra
          null, // prawa dół
          null, // dół prawo
          null, // dół środek prawo
          null, // dół środek lewo
          null, // dół lewo
		  { "Szczur": 6 }, // lewo dół
		  { "Szczur": 6 }, // lewo góra
		  null, // góra lewo
		  null, // góra środek lewo
		  null, // góra środek prawo
		  null, // góra prawo
		  null, // ukryte
        ],
        24 * 15
      );
	  
	  level.define_wave( 24 * 40 ,
        [
          null, // prawa góra
          null, // prawa dół
          { "Mutant": 2 }, // dół prawo
          { "Mutant": 2 }, // dół środek prawo
          { "Mutant": 2 }, // dół środek lewo
          { "Mutant": 2 }, // dół lewo
		  null, // lewo dół
		  null, // lewo góra
		  { "Mutant": 2 }, // góra lewo
		  { "Mutant": 2 }, // góra środek lewo
		  { "Mutant": 2 }, // góra środek prawo
		  { "Mutant": 2 }, // góra prawo
		  null, // ukryte
        ],
        24 * 35
      );
	  
	   level.define_wave( 24 * 70 ,
        [
          { "Mutant_z_pazurem": 1 }, // prawa góra
          { "Mutant_z_pazurem": 1 }, // prawa dół
          { "Mutant_z_macką": 2 }, // dół prawo
          { "Mutant_z_macką": 2 }, // dół środek prawo
          { "Mutant_z_macką": 2 }, // dół środek lewo
          { "Mutant_z_macką": 2 }, // dół lewo
		  { "Mutant_z_pazurem": 1 }, // lewo dół
		  { "Mutant_z_pazurem": 1 }, // lewo góra
		  { "Mutant_z_macką": 2 }, // góra lewo
		  { "Mutant_z_macką": 2 }, // góra środek lewo
		  { "Mutant_z_macką": 2 }, // góra środek prawo
		  { "Mutant_z_macką": 2 }, // góra prawo
		  null, // ukryte
        ],
        24 * 65
      );
	  
	  level.define_wave( 24 * 80 ,
        [
          { "Ghul": 1 }, // prawa góra
          { "Ghul": 1 }, // prawa dół
          null, // dół prawo
          null, // dół środek prawo
          null, // dół środek lewo
          null, // dół lewo
		  { "Ghul": 1 }, // lewo dół
		  { "Ghul": 1 }, // lewo góra
		  null, // góra lewo
		  null, // góra środek lewo
		  null, // góra środek prawo
		  null, // góra prawo
		  null, // ukryte
        ],
        24 * 75
      );
	  
	  level.define_wave( 24 * 110 ,
        [
          { "Mutant_z_pazurem": 4 }, // prawa góra
          { "Mutant_z_pazurem": 4 }, // prawa dół
          { "Ghul": 1 }, // dół prawo
          { "Ghul": 1 }, // dół środek prawo
          { "Ghul": 1 }, // dół środek lewo
          { "Ghul": 1 }, // dół lewo
		  { "Mutant_z_pazurem": 4 }, // lewo dół
		  { "Mutant_z_pazurem": 4 }, // lewo góra
		  { "Ghul": 1 }, // góra lewo
		  { "Ghul": 1 }, // góra środek lewo
		  { "Ghul": 1 }, // góra środek prawo
		  { "Ghul": 1 }, // góra prawo
		  null, // ukryte
        ],
        24 * 105
      );
	  
	  level.define_wave( 24 * 150 ,
        [
          { "Ghul": 2 }, // prawa góra
          { "Ghul": 2 }, // prawa dół
          { "Mutant_z_macką": 1 }, // dół prawo
          { "Mutant_z_macką": 1 }, // dół środek prawo
          { "Mutant_z_macką": 1 }, // dół środek lewo
          { "Mutant_z_macką": 1 }, // dół lewo
		  { "Szczur": 4 }, // lewo dół
		  { "Szczur": 4 }, // lewo góra
		  { "Mutant_z_pazurem": 1 }, // góra lewo
		  { "Mutant_z_pazurem": 1 }, // góra środek lewo
		  { "Mutant_z_pazurem": 1 }, // góra środek prawo
		  { "Mutant_z_pazurem": 1 }, // góra prawo
		  null, // ukryte
        ],
        24 * 145
      );
	  
	  level.define_wave( 24 * 190 ,
        [
          null, // prawa góra
          null, // prawa dół
          null, // dół prawo
          null, // dół środek prawo
          null, // dół środek lewo
          null, // dół lewo
		  null, // lewo dół
		  null, // lewo góra
		  null, // góra lewo
		  null, // góra środek lewo
		  null, // góra środek prawo
		  null, // góra prawo
		  { "Demigor": 1 }, // ukryte
        ],
        24 * 185
      );
	  
      level.define_prizes( {
        "": 0,
        "": 0,
      });

      level.define_violki_prize(0);
    }
  );
  
  //<<<<<<<<<<<<<<<<<<<<<<<<
  //LEVEL 11<<<<<<<<<<
  //<<<<<<<<<<<<<<<<<<<<<<<<
  
  //>>>>>>>>>>>>>>>>>>>
  //REPLAY LEVEL 11>>>>>>>>>>>>
  //>>>>>>>>>>>>>>>>>>>
  
  var replay_level_11 = levels.define_replay_level(11);
  replay_level_11.set_name('replay_level_11_name');
  replay_level_11.set_map_position(260, 295);
  replay_level_11.set_desc('replay_level_11_desc');
  replay_level_11.set_previous(11);

  replay_level_11.set_level_data(
    function level_data(level) {
      level.set_id(11);

      level.set_background_image ('assets/img/levels/laboratorium.png');
      // level.set_foreground_image ('assets/img/levels/level_0_foreground.png');
	  
      level.define_bot_start_point(132,-20);
      level.define_bot_start_point(283,-20);
      level.define_bot_start_point(434,-20);
      level.define_bot_start_point(586,-20);
      level.define_bot_start_point(820,102);
      level.define_bot_start_point(820,463);
	  level.define_bot_start_point(583,620);
	  level.define_bot_start_point(434,620);
	  level.define_bot_start_point(285,620);
	  level.define_bot_start_point(135,620);
	  level.define_bot_start_point(-20,461);
	  level.define_bot_start_point(-20,99);
	  level.define_bot_start_point(697,303);
 
      level.define_bot_start_point_mark(117, 5, 'assets/img/strzalki/arrow_down.png');
      level.define_bot_start_point_mark(268, 5, 'assets/img/strzalki/arrow_down.png');
      level.define_bot_start_point_mark(419, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(571, 5, 'assets/img/strzalki/arrow_down.png');
	  level.define_bot_start_point_mark(745, 87, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(745, 448, 'assets/img/strzalki/arrow_left.png');
	  level.define_bot_start_point_mark(468, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(419, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(270, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(120, 545, 'assets/img/strzalki/arrow_up.png');
	  level.define_bot_start_point_mark(5, 446, 'assets/img/strzalki/arrow_right.png');
	  level.define_bot_start_point_mark(5, 84, 'assets/img/strzalki/arrow_right.png');

      level.define_soldier_start_point(106,229);
      level.define_soldier_start_point(106,191);
      level.define_soldier_start_point(106,269);
      level.define_soldier_start_point(56,191);

      level.set_max_creatures(20);
      // level.set_max_creatures(1);

      var mesh = level.mesh;

	  mesh.define_barrier(784,16, 784,76);
	  mesh.define_barrier(784,76, 835,76);
	  mesh.define_barrier(835,76, 835,126);
	  mesh.define_barrier(835,126, 784,126);
	  mesh.define_barrier(784,126, 784,251);
	  mesh.define_barrier(784,251, 680,251);
	  mesh.define_barrier(680,351, 784,351);
	  mesh.define_barrier(784,351, 784,434);
	  mesh.define_barrier(784,434, 835,434);
	  mesh.define_barrier(835,434, 835,484);
	  mesh.define_barrier(835,484, 784,484);
	  mesh.define_barrier(784,484, 784,584);
	  mesh.define_barrier(784,584, 610,584);
	  mesh.define_barrier(610,584, 610,635);
	  mesh.define_barrier(610,635, 560,635);
	  mesh.define_barrier(560,635, 560,584);
	  mesh.define_barrier(560,584, 460,584);
	  mesh.define_barrier(460,584, 460,635);
	  mesh.define_barrier(460,635, 410,635);
	  mesh.define_barrier(410,635, 410,584);
	  mesh.define_barrier(410,584, 310,584);
	  mesh.define_barrier(310,584, 310,635);
	  mesh.define_barrier(310,635, 260,635);
	  mesh.define_barrier(260,635, 260,584);
	  mesh.define_barrier(260,584, 160,584);
	  mesh.define_barrier(160,584, 160,635);
	  mesh.define_barrier(160,635, 110,635);
	  mesh.define_barrier(110,635, 110,584);
	  mesh.define_barrier(110,584, 16,584);
	  mesh.define_barrier(16,584, 16,484);
	  mesh.define_barrier(16,484, -35,484);
	  mesh.define_barrier(-35,484, -35,434);
	  mesh.define_barrier(-35,434, 16,434);
	  mesh.define_barrier(16,434, 16,126);
	  mesh.define_barrier(16,126, -35,126);
	  mesh.define_barrier(-35,126, -35,76);
	  mesh.define_barrier(-35,76, 16,76);
	  mesh.define_barrier(16,76, 16,16);
	  mesh.define_barrier(16,16, 110,16);
	  mesh.define_barrier(110,16, 110,-35);
	  mesh.define_barrier(110,-35, 160,-35);
	  mesh.define_barrier(160,-35, 160,16);
	  mesh.define_barrier(160,16, 260,16);
	  mesh.define_barrier(260,16, 260,-35);
	  mesh.define_barrier(260,-35, 310,-35);
	  mesh.define_barrier(310,-35, 310,16);
	  mesh.define_barrier(310,16, 410,16);
	  mesh.define_barrier(410,16, 410,-35);
	  mesh.define_barrier(410,-35, 460,-35);
	  mesh.define_barrier(460,-35, 460,16);
	  mesh.define_barrier(460,16, 560,16);
	  mesh.define_barrier(560,16, 560,-35);
	  mesh.define_barrier(560,-35, 610,-35);
	  mesh.define_barrier(610,-35, 610,16);
	  mesh.define_barrier(610,16, 784,16);
	  mesh.define_barrier(113,116, 163,116);
	  mesh.define_barrier(163,116, 163,166);
	  mesh.define_barrier(163,166, 113,166);
	  mesh.define_barrier(113,166, 113,116);
	  mesh.define_barrier(592,116, 642,116);
	  mesh.define_barrier(642,116, 642,166);
	  mesh.define_barrier(642,166, 592,166);
	  mesh.define_barrier(592,166, 592,116);
	  mesh.define_barrier(113,434, 163,434);
	  mesh.define_barrier(163,434, 163,484);
	  mesh.define_barrier(163,484, 113,484);
	  mesh.define_barrier(113,484, 113,434);
	  mesh.define_barrier(592,434, 642,434);
	  mesh.define_barrier(642,434, 642,484);
	  mesh.define_barrier(642,484, 592,484);
	  mesh.define_barrier(592,484, 592,434);
	  
	  mesh.define_wall(113,116, 163,166);
	  mesh.define_wall(113,166, 163,116);
	  mesh.define_wall(592,116, 642,166);
	  mesh.define_wall(592,166, 652,116);
	  mesh.define_wall(113,434, 163,484);
	  mesh.define_wall(113,484, 163,434);
	  mesh.define_wall(592,434, 642,484);
	  mesh.define_wall(592,484, 642,434);
	  mesh.define_wall(680,250, 784,350);
	  mesh.define_wall(784,250, 680,350);
	  
	    // Dialogi w grze, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczac w ogóle
      //level.define_speeches( [	  
      //]);
	     // Dialogi po wygraniu poziomu, po prostu tablica do kolejnych obrazków z rozmowami
      // Jeśli w poziomie nie ma dialogów nie umieszczać w ogóle
      //level.define_end_speeches( [
      //]);
	  
	  //level.define_tips( [
        //]);
		
		//level.define_end_tips( [
         //]);

      // wave'y
      // dwa wave'y nie mogą zdarzyć się w tej samej klatce
      level.define_wave( 24 * 10 ,
        [
          { "Szczur": 6 }, // prawa góra
          { "Szczur": 6 }, // prawa dół
          null, // dół prawo
          null, // dół środek prawo
          null, // dół środek lewo
          null, // dół lewo
		  null, // lewo dół
		  null, // lewo góra
		  null, // góra lewo
		  null, // góra środek lewo
		  null, // góra środek prawo
		  null, // góra prawo
		  null, // ukryte
        ],
        24 * 5
      );
	  
	  level.define_wave( 24 * 20 ,
        [
          null, // prawa góra
          null, // prawa dół
          null, // dół prawo
          null, // dół środek prawo
          null, // dół środek lewo
          null, // dół lewo
		  { "Szczur": 6 }, // lewo dół
		  { "Szczur": 6 }, // lewo góra
		  null, // góra lewo
		  null, // góra środek lewo
		  null, // góra środek prawo
		  null, // góra prawo
		  null, // ukryte
        ],
        24 * 15
      );
	  
	  level.define_wave( 24 * 40 ,
        [
          null, // prawa góra
          null, // prawa dół
          { "Mutant": 2 }, // dół prawo
          { "Mutant": 2 }, // dół środek prawo
          { "Mutant": 2 }, // dół środek lewo
          { "Mutant": 2 }, // dół lewo
		  null, // lewo dół
		  null, // lewo góra
		  { "Mutant": 2 }, // góra lewo
		  { "Mutant": 2 }, // góra środek lewo
		  { "Mutant": 2 }, // góra środek prawo
		  { "Mutant": 2 }, // góra prawo
		  null, // ukryte
        ],
        24 * 35
      );
	  
	   level.define_wave( 24 * 70 ,
        [
          { "Mutant_z_pazurem": 1 }, // prawa góra
          { "Mutant_z_pazurem": 1 }, // prawa dół
          { "Mutant_z_macką": 2 }, // dół prawo
          { "Mutant_z_macką": 2 }, // dół środek prawo
          { "Mutant_z_macką": 2 }, // dół środek lewo
          { "Mutant_z_macką": 2 }, // dół lewo
		  { "Mutant_z_pazurem": 1 }, // lewo dół
		  { "Mutant_z_pazurem": 1 }, // lewo góra
		  { "Mutant_z_macką": 2 }, // góra lewo
		  { "Mutant_z_macką": 2 }, // góra środek lewo
		  { "Mutant_z_macką": 2 }, // góra środek prawo
		  { "Mutant_z_macką": 2 }, // góra prawo
		  null, // ukryte
        ],
        24 * 65
      );
	  
	  level.define_wave( 24 * 80 ,
        [
          { "Ghul": 1 }, // prawa góra
          { "Ghul": 1 }, // prawa dół
          null, // dół prawo
          null, // dół środek prawo
          null, // dół środek lewo
          null, // dół lewo
		  { "Ghul": 1 }, // lewo dół
		  { "Ghul": 1 }, // lewo góra
		  null, // góra lewo
		  null, // góra środek lewo
		  null, // góra środek prawo
		  null, // góra prawo
		  null, // ukryte
        ],
        24 * 75
      );
	  
	  level.define_wave( 24 * 110 ,
        [
          { "Mutant_z_pazurem": 4 }, // prawa góra
          { "Mutant_z_pazurem": 4 }, // prawa dół
          { "Ghul": 1 }, // dół prawo
          { "Ghul": 1 }, // dół środek prawo
          { "Ghul": 1 }, // dół środek lewo
          { "Ghul": 1 }, // dół lewo
		  { "Mutant_z_pazurem": 4 }, // lewo dół
		  { "Mutant_z_pazurem": 4 }, // lewo góra
		  { "Ghul": 1 }, // góra lewo
		  { "Ghul": 1 }, // góra środek lewo
		  { "Ghul": 1 }, // góra środek prawo
		  { "Ghul": 1 }, // góra prawo
		  null, // ukryte
        ],
        24 * 105
      );
	  
	  level.define_wave( 24 * 150 ,
        [
          { "Ghul": 2 }, // prawa góra
          { "Ghul": 2 }, // prawa dół
          { "Mutant_z_macką": 1 }, // dół prawo
          { "Mutant_z_macką": 1 }, // dół środek prawo
          { "Mutant_z_macką": 1 }, // dół środek lewo
          { "Mutant_z_macką": 1 }, // dół lewo
		  { "Szczur": 4 }, // lewo dół
		  { "Szczur": 4 }, // lewo góra
		  { "Mutant_z_pazurem": 1 }, // góra lewo
		  { "Mutant_z_pazurem": 1 }, // góra środek lewo
		  { "Mutant_z_pazurem": 1 }, // góra środek prawo
		  { "Mutant_z_pazurem": 1 }, // góra prawo
		  null, // ukryte
        ],
        24 * 145
      );
	  
	  level.define_wave( 24 * 190 ,
        [
          null, // prawa góra
          null, // prawa dół
          null, // dół prawo
          null, // dół środek prawo
          null, // dół środek lewo
          null, // dół lewo
		  null, // lewo dół
		  null, // lewo góra
		  null, // góra lewo
		  null, // góra środek lewo
		  null, // góra środek prawo
		  null, // góra prawo
		  { "Demigor": 1 }, // ukryte
        ],
        24 * 185
      );
	  
      level.define_prizes( {
        "": 0,
        "": 0,
      });

      level.define_violki_prize(0);
    }
  );
  
  //<<<<<<<<<<<<<<<<<<<<<<<<
  //REPLAY LEVEL 11<<<<<<<<<<
  //<<<<<<<<<<<<<<<<<<<<<<<<

}

// //////////////////////////////
// definicje konta na starcie gry
// //////////////////////////////
Account.prototype.on_start = function() {
  debug.debug("Account on_start");

  // EDYTOWALNE
  // w nawiasie podajemy nazwe postaci ktora bedzie na starcie gry
  var soldier = this.soldiers_factory.get('Pogromca', this.level);

  // NIEEDYTOWALNE
  this.soldiers.push(soldier);

  // EDYTOWALNE
  // (opcjonalnie) jaka bron ma miec postac zalozona na starcie gry
  //var weapon = this.items_factory.get_weapon("Gdański trójząb");
  //soldier.set_weapon(weapon);

  // EDYTOWALNE
  // (opcjonalnie) jaka zbroje ma miec postac zalozona na starcie gry
  //var armour = this.items_factory.get_armour("Skórzana kurtka");
  //soldier.set_armour(armour);

  // EDYTOWALNE
  // OPCJONALNE
  // jakie itemy ma miec postac w plecaku na starcie gry
  //soldier.item_0 = this.items_factory.get_ammo("Postapokaliptyczny zestaw opatrunkowy");
  //soldier.item_1 = this.items_factory.get_ammo("Postapokaliptyczny zestaw opatrunkowy");
  //soldier.item_2 = this.items_factory.get_armour("Skórzana kurtka");
  //soldier.item_3 = this.items_factory.get_item("Postapokaliptyczny zestaw opatrunkowy");

}
